/// <XRTypeInfo>
///   <AssemblyFullName>DevExpress.XtraReports.v10.2, Version=10.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a</AssemblyFullName>
///   <AssemblyLocation>C:\Windows\assembly\GAC_MSIL\DevExpress.XtraReports.v10.2\10.2.5.0__b88d1754d700e49a\DevExpress.XtraReports.v10.2.dll</AssemblyLocation>
///   <TypeName>DevExpress.XtraReports.UI.XtraReport</TypeName>
///   <Localization>es-ES</Localization>
///   <References>
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Data.SqlXml\2.0.0.0__b77a5c561934e089\System.Data.SqlXml.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Security\2.0.0.0__b03f5f7f11d50a3a\System.Security.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\Microsoft.VisualC\8.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualC.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.DirectoryServices\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Runtime.Remoting\2.0.0.0__b77a5c561934e089\System.Runtime.Remoting.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Design\2.0.0.0__b03f5f7f11d50a3a\System.Design.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Windows.Forms\2.0.0.0__b77a5c561934e089\System.Windows.Forms.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\Accessibility\2.0.0.0__b03f5f7f11d50a3a\Accessibility.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization.Formatters.Soap\2.0.0.0__b03f5f7f11d50a3a\System.Runtime.Serialization.Formatters.Soap.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Deployment\2.0.0.0__b03f5f7f11d50a3a\System.Deployment.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Drawing.Design\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.Design.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Data.OracleClient\2.0.0.0__b77a5c561934e089\System.Data.OracleClient.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Web.RegularExpressions\2.0.0.0__b03f5f7f11d50a3a\System.Web.RegularExpressions.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.DirectoryServices.Protocols\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.Protocols.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.ServiceProcess\2.0.0.0__b03f5f7f11d50a3a\System.ServiceProcess.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Configuration.Install\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.Install.dll" />
///   </References>
/// </XRTypeInfo>
namespace XtraReportSerialization {
    
    public class InformeCompraProvCat : DevExpress.XtraReports.UI.XtraReport {
        private DevExpress.XtraReports.UI.DetailBand Detail;
        private DevExpress.XtraReports.UI.XRLabel label50;
        private DevExpress.XtraReports.UI.XRLabel label45;
        private DevExpress.XtraReports.UI.XRLabel label25;
        private DevExpress.XtraReports.UI.XRLabel label23;
        private DevExpress.XtraReports.UI.XRLabel label19;
        private DevExpress.XtraReports.UI.XRLabel label2;
        private DevExpress.XtraReports.UI.TopMarginBand topMarginBand1;
        private DevExpress.XtraReports.UI.BottomMarginBand bottomMarginBand1;
        private DevExpress.XtraReports.UI.GroupHeaderBand GroupHeader1;
        private DevExpress.XtraReports.UI.XRChart chart3;
        private XtraReportSerialization.VentaCteCatDataSet VentaCteCat;
        private DevExpress.XtraReports.UI.GroupFooterBand GroupFooter1;
        private DevExpress.XtraReports.UI.XRLabel label4;
        private DevExpress.XtraReports.UI.XRLabel label3;
        private DevExpress.XtraReports.UI.XRLabel label1;
        private DevExpress.XtraReports.UI.XRLine line3;
        private DevExpress.XtraReports.UI.XRLabel label8;
        private DevExpress.XtraReports.UI.XRLabel label7;
        private DevExpress.XtraReports.UI.XRLabel label11;
        private DevExpress.XtraReports.UI.XRLabel label10;
        private DevExpress.XtraReports.UI.ReportHeaderBand ReportHeader;
        private DevExpress.XtraReports.UI.XRLabel label61;
        private DevExpress.XtraReports.UI.XRLabel label56;
        private DevExpress.XtraReports.UI.XRLabel label55;
        private DevExpress.XtraReports.UI.XRLabel label54;
        private DevExpress.XtraReports.UI.XRLabel label53;
        private DevExpress.XtraReports.UI.XRLabel label26;
        private DevExpress.XtraReports.UI.XRLabel label198;
        private DevExpress.XtraReports.UI.XRPictureBox pictureBox2;
        private DevExpress.XtraReports.UI.XRLine line6;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo3;
        private DevExpress.XtraReports.UI.ReportFooterBand ReportFooter;
        private DevExpress.XtraReports.UI.XRLabel label30;
        private DevExpress.XtraReports.UI.XRLabel label32;
        private DevExpress.XtraReports.UI.XRLabel label29;
        private DevExpress.XtraReports.UI.XRLabel label24;
        private DevExpress.XtraReports.UI.XRLabel label28;
        private DevExpress.XtraReports.UI.XRChart chart1;
        private DevExpress.XtraReports.UI.XRLabel label38;
        private DevExpress.XtraReports.UI.XRLine line4;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo1;
        private DevExpress.XtraReports.UI.XRPictureBox pictureBox1;
        private DevExpress.XtraReports.UI.XRLabel label27;
        private DevExpress.XtraReports.UI.XRLabel label22;
        private DevExpress.XtraReports.UI.XRLabel label21;
        private DevExpress.XtraReports.UI.XRLabel label20;
        private DevExpress.XtraReports.UI.XRLabel label16;
        private DevExpress.XtraReports.UI.XRLabel label17;
        private DevExpress.XtraReports.UI.XRLabel label18;
        private DevExpress.XtraReports.UI.XRLabel label5;
        private DevExpress.XtraReports.UI.XRLabel label6;
        private DevExpress.XtraReports.UI.XRLabel label15;
        private DevExpress.XtraReports.UI.XRPageBreak pageBreak1;
        private DevExpress.XtraReports.UI.XRLine line2;
        private DevExpress.XtraReports.UI.XRLabel label14;
        private DevExpress.XtraReports.UI.XRLabel label9;
        private DevExpress.XtraReports.UI.XRLabel label12;
        private DevExpress.XtraReports.UI.XRLabel label13;
        private DevExpress.XtraReports.UI.XRLine line7;
        private DevExpress.XtraReports.UI.XRLine line1;
        private DevExpress.XtraReports.UI.PageFooterBand PageFooter;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo4;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo2;
        private DevExpress.XtraReports.UI.GroupHeaderBand GroupHeader3;
        private DevExpress.XtraReports.UI.XRLine line9;
        private DevExpress.XtraReports.UI.XRLine line5;
        private DevExpress.XtraReports.UI.XRLabel label37;
        private DevExpress.XtraReports.UI.XRLabel label36;
        private DevExpress.XtraReports.UI.XRLabel label33;
        private DevExpress.XtraReports.UI.XRLabel label31;
        private DevExpress.XtraReports.UI.XRLabel label46;
        private DevExpress.XtraReports.UI.XRLabel label35;
        private System.Data.OleDb.OleDbDataAdapter TableTableAdapter;
        private System.Data.OleDb.OleDbCommand oleDbCommand1;
        private System.Data.OleDb.OleDbConnection oleDbConnection1;
        private DevExpress.XtraReports.UI.XRControlStyle Title;
        private DevExpress.XtraReports.UI.XRControlStyle FieldCaption;
        private DevExpress.XtraReports.UI.XRControlStyle PageInfo;
        private DevExpress.XtraReports.UI.XRControlStyle DataField;
        private System.Resources.ResourceManager _resources;
        public InformeCompraProvCat() {
            this.InitializeComponent();
        }
        private System.Resources.ResourceManager resources {
            get {
                if (_resources == null) {
                    string resourceString = "zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJza" +
                        "W9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4O" +
                        "SNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAADAAAAAQAAAGhTeXN0ZW0uRHJhd" +
                        "2luZy5CaXRtYXAsIFN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhb" +
                        "CwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYVBBRFBBREhecsHnWR035IbpXQAAAABSAAAAK" +
                        "wAAAK0BAAAmJAB0AGgAaQBzAC4AUwBjAHIAaQBwAHQAcwBTAG8AdQByAGMAZQAAAAAAInAAaQBjAHQAd" +
                        "QByAGUAQgBvAHgAMQAuAEkAbQBhAGcAZQCyFgAAInAAaQBjAHQAdQByAGUAQgBvAHgAMgAuAEkAbQBhA" +
                        "GcAZQCv2AAAAa8tDQpQcml2YXRlIFN1YiBEZXRhaWxfQmVmb3JlUHJpbnQoQnlWYWwgc2VuZGVyIEFzI" +
                        "E9iamVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5QcmludGluZy5QcmludEV2ZW50QXJncykNC" +
                        "g0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIkVtcHJlc2FOb21icmUiKSBJUyBOT1RISU5HIFRIR" +
                        "U4NCiAgICBSRVRVUk4NCiAgRU5EIElGDQoNCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlKCJUb3Rhb" +
                        "CIpID0gRmFsc2UgQU5EIEdldEN1cnJlbnRDb2x1bW5WYWx1ZSgiR3JhZmljYTEiKSA9IEZhbHNlIEFOR" +
                        "CBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIk1vbmVkYSIpIGlzbm90IE5vdGhpbmcgQU5EIEdldEN1cnJlb" +
                        "nRDb2x1bW5WYWx1ZSgiQ2F0ZWdvcmlhIikuVG9TdHJpbmcgPD4gIiIgVEhFTiAgICAgDQogICAgIGUuQ" +
                        "2FuY2VsID0gRmFsc2UNCiAgRUxTRQ0KICAgICBlLkNhbmNlbCA9IFRydWUgICAgDQogIEVORCBJRiANC" +
                        "g0KRW5kIFN1Yg0KDQpQcml2YXRlIFN1YiBHcm91cEhlYWRlcjJfQmVmb3JlUHJpbnQoQnlWYWwgc2VuZ" +
                        "GVyIEFzIE9iamVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5QcmludGluZy5QcmludEV2ZW50Q" +
                        "XJncykNCg0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIkVtcHJlc2FOb21icmUiKSBJUyBOT1RIS" +
                        "U5HIFRIRU4NCiAgICBSRVRVUk4NCiAgRU5EIElGDQoNCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlK" +
                        "CJUb3RhbCIpID0gRmFsc2UgQU5EIEdldEN1cnJlbnRDb2x1bW5WYWx1ZSgiR3JhZmljYTEiKSA9IEZhb" +
                        "HNlIEFORCBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIk1vbmVkYSIpIGlzbm90IE5vdGhpbmcgVEhFTg0KI" +
                        "CAgICBlLkNhbmNlbCA9IEZhbHNlDQogIEVMU0UNCiAgICAgZS5DYW5jZWwgPSBUcnVlICAgIA0KICBFT" +
                        "kQgSUYgDQoNCkVuZCBTdWINCg0KUHJpdmF0ZSBTdWIgR3JvdXBIZWFkZXIxX0JlZm9yZVByaW50KEJ5V" +
                        "mFsIHNlbmRlciBBcyBPYmplY3QsIEJ5VmFsIGUgQXMgU3lzdGVtLkRyYXdpbmcuUHJpbnRpbmcuUHJpb" +
                        "nRFdmVudEFyZ3MpDQoNCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlKCJFbXByZXNhTm9tYnJlIikgS" +
                        "VMgTk9USElORyBUSEVODQogICAgUkVUVVJODQogIEVORCBJRg0KDQogIElGIEdldEN1cnJlbnRDb2x1b" +
                        "W5WYWx1ZSgiTW9uZWRhIikuVG9TdHJpbmcgPD4gTk9USElORyBUSEVODQogICAgIGUuQ2FuY2VsID0gR" +
                        "mFsc2UNCiAgRUxTRQ0KICAgICBlLkNhbmNlbCA9IFRydWUgICAgDQogIEVORCBJRiANCg0KRW5kIFN1Y" +
                        "g0KDQpQcml2YXRlIFN1YiBHcm91cEZvb3RlcjFfQmVmb3JlUHJpbnQoQnlWYWwgc2VuZGVyIEFzIE9ia" +
                        "mVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5QcmludGluZy5QcmludEV2ZW50QXJncykNCg0KI" +
                        "CBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIlRvdGFsIikgPSBGYWxzZSBUSEVOICAgICANCiAgICAgZ" +
                        "S5DYW5jZWwgPSBGYWxzZQ0KICBFTFNFDQogICAgIGUuQ2FuY2VsID0gVHJ1ZSAgICANCiAgRU5EIElGI" +
                        "A0KDQpFbmQgU3ViDQoNCg0KUHJpdmF0ZSBTdWIgY2hhcnQxX0JlZm9yZVByaW50KEJ5VmFsIHNlbmRlc" +
                        "iBBcyBPYmplY3QsIEJ5VmFsIGUgQXMgU3lzdGVtLkRyYXdpbmcuUHJpbnRpbmcuUHJpbnRFdmVudEFyZ" +
                        "3MpDQoNCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlKCJDb250TW9uZWRhIikgSVMgTk9USElORyBUS" +
                        "EVODQogICAgIGUuQ2FuY2VsID0gVHJ1ZSAgICANCiAgICBSRVRVUk4NCiAgRU5EIElGDQoNCiAgJ0dlb" +
                        "mVyYSB1biBvYmpldG8gcXVlIHJlcHJlc2VudGEgYSBsYSBncsOhZmljYQ0KICBEaW0gR3JhZmljYTEgQ" +
                        "XMgWFJDaGFydCA9IENUeXBlKHNlbmRlcixYUkNoYXJ0KQ0KDQogICdHdWFyZGEgZWwgdmFsb3IgZGUgb" +
                        "GEgY29sdW1uYSBDb250TW9uZWRhDQogIERpbSBDb250TW9uZWRhIEFzIFN0cmluZyA9IEdldEN1cnJlb" +
                        "nRDb2x1bW5WYWx1ZSgiQ29udE1vbmVkYSIpLlRvU3RyaW5nDQoNCiAgJ0dlbmVyYSB1biBvYmpldG8gc" +
                        "XVlIHJlcHJlc2VudGEgYSBsYSBwbGFudGlsbGEgc2Ugc2VyaWVzIGF1dG9jcmVhZGFzDQogIERpbSBQb" +
                        "GFudGlsbGEgQXMgU2VyaWVzQmFzZSA9IEdyYWZpY2ExLlNlcmllc1RlbXBsYXRlDQoNCiAgJ0dlbmVyY" +
                        "SB1biBvYmpldG8gdGlwbyBUw610dWxvDQogIERpbSBUaXR1bG8xIEFzIE5ldyBDaGFydFRpdGxlKCkNC" +
                        "iAgVGl0dWxvMS5UZXh0ID0gIlJlc3VtZW4gTW9uZWRhIENvbnRhYmxlICgiICsgQ29udE1vbmVkYS5Uc" +
                        "mltICsgIikgUG9yIENhdGVnb3LDrWEiDQogIFRpdHVsbzEuRm9udCA9IE5ldyBGb250KFRpdHVsbzEuR" +
                        "m9udC5TaXplLDIwKQ0KDQogICdMaW1waWEgbG9zIHTDrXR1bG9zIGRlIGxhIGdyw6FmaWNhDQogIEdyY" +
                        "WZpY2ExLlRpdGxlcy5DbGVhcigpDQoNCiAgJ0FncmVnYSBlbCBUw610dWxvIGEgbGEgZ3LDoWZpY2ENC" +
                        "iAgR3JhZmljYTEuVGl0bGVzLkFkZFJhbmdlKE5ldyBDaGFydFRpdGxlKCkge1RpdHVsbzF9KQ0KDQogI" +
                        "CdDcmVhIGRvcyBvYmpldG9zIHRpcG8gZmlsdHJvIHkgbG9zIGluaWNpYWxpemEgY29uIGxvcyBmaWx0c" +
                        "m9zIG5lY2VzYXJpb3MNCiAgRGltIEZpbHRybzEgQXMgTmV3IERhdGFGaWx0ZXIoIk1vbmVkYTIiLCJTe" +
                        "XN0ZW0uU3RyaW5nIixEYXRhRmlsdGVyQ29uZGl0aW9uLkVxdWFsLENvbnRNb25lZGEpDQogIERpbSBGa" +
                        "Wx0cm8yIEFzIE5ldyBEYXRhRmlsdGVyKCJHcmFmaWNhMSIsIlN5c3RlbS5Cb29sZWFuIixEYXRhRmlsd" +
                        "GVyQ29uZGl0aW9uLkVxdWFsLFRydWUpDQogIERpbSBGaWx0cm8zIEFzIE5ldyBEYXRhRmlsdGVyKCJHc" +
                        "mFmaWNhMiIsIlN5c3RlbS5Cb29sZWFuIixEYXRhRmlsdGVyQ29uZGl0aW9uLkVxdWFsLFRydWUpDQoNC" +
                        "iAgJ0xpbXBpYSBsb3MgZmlsdHJvcyBkZSBsYSBwbGFudGlsbGENCiAgUGxhbnRpbGxhLkRhdGFGaWx0Z" +
                        "XJzLkNsZWFyKCkNCg0KICAnUG9uZSBlbCBDb25qdWN0aW9uTW9kZSBhIEFuZA0KICBQbGFudGlsbGEuR" +
                        "GF0YUZpbHRlcnNDb25qdW5jdGlvbk1vZGUgPSBDb25qdW5jdGlvblR5cGVzLkFuZA0KDQogICdBZ3JlZ" +
                        "2EgbG9zIGZpbHRyb3MgYSBsYSBwbGFudGlsbGENCiAgUGxhbnRpbGxhLkRhdGFGaWx0ZXJzLkFkZChGa" +
                        "Wx0cm8xKQ0KICBQbGFudGlsbGEuRGF0YUZpbHRlcnMuQWRkKEZpbHRybzIpDQogIFBsYW50aWxsYS5EY" +
                        "XRhRmlsdGVycy5BZGQoRmlsdHJvMykNCg0KICAnT2N1bHRhIG8gbXVlc3RyYSBsYXMgZXRpcXVldGFzI" +
                        "GRlIGxhIGdyYWZpY2ENCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlKCJFdGlxdWV0YSIpID0gRmFsc" +
                        "2UgVEhFTg0KICAgICBHcmFmaWNhMS5TZXJpZXNUZW1wbGF0ZS5MYWJlbC5WaXNpYmxlID0gRmFsc2UNC" +
                        "iAgRUxTRQ0KICAgICBHcmFmaWNhMS5TZXJpZXNUZW1wbGF0ZS5MYWJlbC5WaXNpYmxlID0gVHJ1ZQ0KI" +
                        "CBFTkQgSUYNCg0KRW5kIFN1Yg0KDQpQcml2YXRlIFN1YiBjaGFydDJfQmVmb3JlUHJpbnQoQnlWYWwgc" +
                        "2VuZGVyIEFzIE9iamVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5QcmludGluZy5QcmludEV2Z" +
                        "W50QXJncykNCg0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIk1vbmVkYSIpIElTIE5PVEhJTkcgV" +
                        "EhFTg0KICAgICBlLkNhbmNlbCA9IFRydWUgICAgDQogICAgUkVUVVJODQogIEVORCBJRg0KDQogICdHZ" +
                        "W5lcmEgdW4gb2JqZXRvIHF1ZSByZXByZXNlbnRhIGEgbGEgZ3LDoWZpY2ENCiAgRGltIEdyYWZpY2ExI" +
                        "EFzIFhSQ2hhcnQgPSBDVHlwZShzZW5kZXIsWFJDaGFydCkNCg0KICdTaSBlbCB2YWxvciBkZWwgY2Ftc" +
                        "G8gVmVyR3JhZmljYURldGFsbGUgZXMgMCBubyBzZSBtdWVzdHJhIA0KICBJRiBHZXRDdXJyZW50Q29sd" +
                        "W1uVmFsdWUoIlZlckdyYWZpY2FEZXRhbGxlIikgPSAwIFRIRU4NCiAgICBHcmFmaWNhMS52aXNpYmxlI" +
                        "D0gRmFsc2UNCiAgICBlLkNhbmNlbCA9IFRydWUgICAgDQogICAgUkVUVVJODQogIEVORCBJRg0KDQogI" +
                        "CdHdWFyZGEgZWwgdmFsb3IgZGUgbGEgY29sdW1uYSBNb25lZGENCiAgRGltIE1vbmVkYSBBcyBTdHJpb" +
                        "mcgPSBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIk1vbmVkYSIpLlRvU3RyaW5nDQogIERpbSBDYXRlZ29ya" +
                        "WEgQXMgU3RyaW5nID0gR2V0Q3VycmVudENvbHVtblZhbHVlKCJDYXRlZ29yaWEiKS5Ub1N0cmluZw0KD" +
                        "QogICdHZW5lcmEgdW4gb2JqZXRvIHF1ZSByZXByZXNlbnRhIGEgbGEgcGxhbnRpbGxhIHNlIHNlcmllc" +
                        "yBhdXRvY3JlYWRhcw0KICBEaW0gUGxhbnRpbGxhIEFzIFNlcmllc0Jhc2UgPSBHcmFmaWNhMS5TZXJpZ" +
                        "XNUZW1wbGF0ZQ0KDQogICdHZW5lcmEgdW4gb2JqZXRvIHRpcG8gVMOtdHVsbw0KICBEaW0gVGl0dWxvM" +
                        "SBBcyBOZXcgQ2hhcnRUaXRsZSgpDQogIFRpdHVsbzEuVGV4dCA9ICJSZXN1bWVuICIgKyBNb25lZGEuV" +
                        "HJpbSArICAiIFBvciBDYXRlZ29yw61hIg0KICBUaXR1bG8xLkZvbnQgPSBOZXcgRm9udChUaXR1bG8xL" +
                        "kZvbnQuU2l6ZSwxMCkNCg0KICAnTGltcGlhIGxvcyB0w610dWxvcyBkZSBsYSBncsOhZmljYQ0KICBHc" +
                        "mFmaWNhMS5UaXRsZXMuQ2xlYXIoKQ0KDQogICdBZ3JlZ2EgZWwgVMOtdHVsbyBhIGxhIGdyw6FmaWNhD" +
                        "QogIEdyYWZpY2ExLlRpdGxlcy5BZGRSYW5nZShOZXcgQ2hhcnRUaXRsZSgpIHtUaXR1bG8xfSkNCg0KI" +
                        "CAnQ3JlYSBkb3Mgb2JqZXRvcyB0aXBvIGZpbHRybyB5IGxvcyBpbmljaWFsaXphIGNvbiBsb3MgZmlsd" +
                        "HJvcyBuZWNlc2FyaW9zDQogIERpbSBGaWx0cm8xIEFzIE5ldyBEYXRhRmlsdGVyKCJNb25lZGEyIiwiU" +
                        "3lzdGVtLlN0cmluZyIsRGF0YUZpbHRlckNvbmRpdGlvbi5FcXVhbCxNb25lZGEpDQogIERpbSBGaWx0c" +
                        "m8yIEFzIE5ldyBEYXRhRmlsdGVyKCJHcmFmaWNhMSIsIlN5c3RlbS5Cb29sZWFuIixEYXRhRmlsdGVyQ" +
                        "29uZGl0aW9uLkVxdWFsLFRydWUpDQogIERpbSBGaWx0cm8zIEFzIE5ldyBEYXRhRmlsdGVyKCJHcmFma" +
                        "WNhMiIsIlN5c3RlbS5Cb29sZWFuIixEYXRhRmlsdGVyQ29uZGl0aW9uLkVxdWFsLEZhbHNlKQ0KDQogI" +
                        "CdMaW1waWEgbG9zIGZpbHRyb3MgZGUgbGEgcGxhbnRpbGxhDQogIFBsYW50aWxsYS5EYXRhRmlsdGVyc" +
                        "y5DbGVhcigpDQoNCiAgJ1BvbmUgZWwgQ29uanVjdGlvbk1vZGUgYSBBbmQNCiAgUGxhbnRpbGxhLkRhd" +
                        "GFGaWx0ZXJzQ29uanVuY3Rpb25Nb2RlID0gQ29uanVuY3Rpb25UeXBlcy5BbmQNCg0KICAnQWdyZWdhI" +
                        "GxvcyBmaWx0cm9zIGEgbGEgcGxhbnRpbGxhDQogIFBsYW50aWxsYS5EYXRhRmlsdGVycy5BZGQoRmlsd" +
                        "HJvMSkNCiAgUGxhbnRpbGxhLkRhdGFGaWx0ZXJzLkFkZChGaWx0cm8yKQ0KICBQbGFudGlsbGEuRGF0Y" +
                        "UZpbHRlcnMuQWRkKEZpbHRybzMpDQoNCiAgJ09jdWx0YSBvIG11ZXN0cmEgbGFzIGV0aXF1ZXRhcyBkZ" +
                        "SBsYSBncmFmaWNhDQogIElGIEdldEN1cnJlbnRDb2x1bW5WYWx1ZSgiRXRpcXVldGEiKSA9IEZhbHNlI" +
                        "FRIRU4NCiAgICAgR3JhZmljYTEuU2VyaWVzVGVtcGxhdGUuTGFiZWwuVmlzaWJsZSA9IEZhbHNlDQogI" +
                        "EVMU0UNCiAgICAgR3JhZmljYTEuU2VyaWVzVGVtcGxhdGUuTGFiZWwuVmlzaWJsZSA9IFRydWUNCiAgR" +
                        "U5EIElGDQoNCkVuZCBTdWINCg0KUHJpdmF0ZSBTdWIgR3JvdXBIZWFkZXIzX0JlZm9yZVByaW50KEJ5V" +
                        "mFsIHNlbmRlciBBcyBPYmplY3QsIEJ5VmFsIGUgQXMgU3lzdGVtLkRyYXdpbmcuUHJpbnRpbmcuUHJpb" +
                        "nRFdmVudEFyZ3MpDQoNCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlKCJFbXByZXNhTm9tYnJlIikgS" +
                        "VMgTk9USElORyBUSEVODQogICAgUkVUVVJODQogIEVORCBJRg0KDQogIElGIEdldEN1cnJlbnRDb2x1b" +
                        "W5WYWx1ZSgiTW9uZWRhIikuVG9TdHJpbmcgPD4gTk9USElORyBUSEVODQogICAgIGUuQ2FuY2VsID0gR" +
                        "mFsc2UNCiAgRUxTRQ0KICAgICBlLkNhbmNlbCA9IFRydWUNCiAgRU5EIElGIA0KDQpFbmQgU3ViDQpAA" +
                        "AEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj0yLjAuMC4wLCBDdWx0d" +
                        "XJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0ZW0uRHJhd" +
                        "2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAWsEAAAL/2P/gABBKRklGAAEBAQCWAJYAA" +
                        "P/uAA5BZG9iZQBkAAAAAAH/4RGWRXhpZgAATU0AKgAAAAgABwESAAMAAAABAAEAAAEaAAUAAAABAAAAY" +
                        "gEbAAUAAAABAAAAagEoAAMAAAABAAIAAAExAAIAAAAcAAAAcgEyAAIAAAAUAAAAjodpAAQAAAABAAAAo" +
                        "gAAAMIAlgAAAAEAAACWAAAAAQAAQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzADIwMTE6MDE6MTggM" +
                        "Dk6NTE6MDYAAAKgAgAEAAAAAQAAAWKgAwAEAAAAAQAAAIEAAAAAAAAABgEDAAMAAAABAAYAAAEaAAUAA" +
                        "AABAAABEAEbAAUAAAABAAABGAEoAAMAAAABAAIAAAIBAAQAAAABAAABIAICAAQAAAABAAAQbgAAAAAAA" +
                        "ABIAAAAAQAAAEgAAAAB/9j/7QAMQWRvYmVfQ00AAf/uAA5BZG9iZQBkgAAAAAH/2wCEAAwICAgJCAwJC" +
                        "QwRCwoLERUPDAwPFRgTExUTExgRDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBDQsLD" +
                        "Q4NEA4OEBQODg4UFA4ODg4UEQwMDAwMEREMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD" +
                        "P/AABEIADoAoAMBIgACEQEDEQH/3QAEAAr/xAE/AAABBQEBAQEBAQAAAAAAAAADAAECBAUGBwgJCgsBA" +
                        "AEFAQEBAQEBAAAAAAAAAAEAAgMEBQYHCAkKCxAAAQQBAwIEAgUHBggFAwwzAQACEQMEIRIxBUFRYRMic" +
                        "YEyBhSRobFCIyQVUsFiMzRygtFDByWSU/Dh8WNzNRaisoMmRJNUZEXCo3Q2F9JV4mXys4TD03Xj80Ynl" +
                        "KSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3EQACAgECBAQDBAUGBwcGBTUBAAIRA" +
                        "yExEgRBUWFxIhMFMoGRFKGxQiPBUtHwMyRi4XKCkkNTFWNzNPElBhaisoMHJjXC0kSTVKMXZEVVNnRl4" +
                        "vKzhMPTdePzRpSkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2JzdHV2d3h5ent8f/2gAMAwEAAhEDEQA/A" +
                        "PVUkkklKWBhZH1nd9ZMirKqDekt3+m7a0N2iPQdVYD6r7bP8Mx//gf6NXfrD1Y9I6Tdmsa19rdraWOmC" +
                        "95DG7tv5rZ9RyH9WOq5fVukMzMuttdjnvaCyQ1wa7Z6jWuL3M/c+mn+1L2/d/Q4uD/CWe7H3Pb/AEq4v" +
                        "8F1kkkkxepJJJJSkkkklKSSSSUpJJJJSkkkklKSSSSUpJJJJT//0PVVn9a61idHxPXv99j5bRQ0+6x37" +
                        "rf3WN/wln+DTdb63idGxPXv99j5bRQ0+6x3gP3WN/wln+DXG9M6Z1H619Rfn57y3FadtljZAgH+h4f7r" +
                        "G/4W3/0f/NpSvrH1PKzfqv067KcHXZeTbc4NENaKzdVXUz+QxjmfSRerDqXS+ifV/qHTwWVYlO620agP" +
                        "vFT4yK/9Da71G/1/wDR2ekrX+MHBqo6V08Y7BVRj2mllbRAAcxxb/56XQ9AdTl/V3BBAsqfi11vY4AtM" +
                        "MFVrHNP0vouYtCOQY+WwT4eICc+OJ2PFxR/6DRljOTmc0b4SYQ4ZDcV6v8ApsPq99YcXreLvZ+jya4GR" +
                        "jk6tP7zf36n/mPWsvO+u9Czvqxmt6t0hzhiB2h1cai4/wAxf/pcWz6LHu/4uz9L6VtnXfV76w43W8Xew" +
                        "enk1QMigmS0n85v79T/AMx6h5jl4iPvYTxYZf42OX7smXBnkZHFlHDlj/i5I/vxS9d65idDwftuW176y" +
                        "8Vhte2ZILv8I6tn0WO/OV6q1l1TLqzLLGh7T5OG5qwfrx1HL6b0ivIw3NZf67Wtscxry2WWkurFoexr/" +
                        "bs+j9BZPU+s/WV/V8Lp3TcoVvysWqwNcyvaXltllri99T9vtrTcfKzyREhKMQeL5j/m/mtdk5mEJGJEp" +
                        "SHDpEfv/K9usrrv1gxeh10WZVdljL3lk1hp2wNxc4Pcz/orm8jrH106E4W9XY3Lw7Pa57AwbSf9HbSxn" +
                        "p2/uevT6T1l/Wh/V7sXHysrMbndLvcX4Nm1jLILd36ZlNde2xjf0Vn8v/RqbDyV5I8coSxy6wl8/wDVj" +
                        "/WYs3OVjkYxkJx6Sj8v9aX9V9NSXK1dT+sPQsPKzfrHbXks9jMSmvaHutO727666msr2/T3+p9D/tyjj" +
                        "2/4wuqY/wC0Me2vHqeN9NEMZub29Jt1dz9rvzPtNrP8xRDlJGz7mMQB4fcMvRKXaLIeZAocEzMji4APX" +
                        "GPeT3C5X6ofWHP6hjdSy+pWB7MYh7WsYGhjNr7Htbt97/o/no/1X+suT1G63pnU6vQ6jjCSAC0Pa0hr5" +
                        "YZ2Ws3N3fmP/nKli/UWw19I61YGteWM3BrxLTFdh2vb+cxPjgMcWeMwOMe1wy3+eW8Zf1lks4lkwGJPA" +
                        "Rk4h/cj+lH+q9Z0LreJ1zB+24jXsYHmtzbNu4ObB/wbrGfRc389aK4jp/1t6hjfVR/UckjKy3ZRxqJa1" +
                        "jB+jbY31GUCr2Ma2z+X+Yljs/xhZuK3qFOZUGvG6ukGqSDxtApsp/7cvTfucxfHOEAJcHFI6Sl/VXfe4" +
                        "GuGM5kjjqI1jHxevz82nAwr82+fSx2OseGiTDRu9swh9J6nR1bp9PUMcObVdMNdEgtc6p7TsL2fTZ+8s" +
                        "Kvq/Xbfq31O3qmGMfKw2OFdljPZYQP5z0LN7Hem78/+j2f4NVLPrdn4X1Wwcp8ZHUc51zRa9oDQK7Htd" +
                        "Y6ur02uds9NjGf9cTRymQmhwn1+3ob14fc4v7vCuPNYwLNj0+5qOnFwf43E9okuKbj/AOMZ1DcxmXVYX" +
                        "AEUNNJJB/6z9m/9mF0P1dz+pZ/TvW6ninEyWvcwtLXM3gRFoqs99f0tn9hNycuYR4hOEwDR4JahOPPxn" +
                        "hMJwsWOMaF//9Hs/rX9WT1VozcQxn0s2Bjj7bKwS/0fd7arNzv0Vn9i7/SU5n1T+s/oFnR+pfogw+lj2" +
                        "uGwtcDs+yZLfbssa72V2f8AW7f0v872q5v61fVVnVGOzMNrW57Ww9hgNvaBHp2T7W3Nb/NW/wDWrf0f8" +
                        "ylN760dMd1PomTj1t3XtAtoHJ31neGt/wCMbuq/64sT/F51dluLZ0mx36Skm7HB71vM2NH/ABVzv/BlH" +
                        "6qfWh7Ht6R1Vzg4O9LHuskODgdn2TJ3e71d3sqe/wD4qz9J/O5/1h6DcM5/Vfq6XZFT7HsubiOl9N+te" +
                        "Q1vpnfst3O9T/R/8SrnLShkxy5eZ4eI8eOR/Rm1OZjPHkjngOLhHBkiP0of+gtz63fWs3Of0XpM2OsPo" +
                        "5FrBuLi72HFx2j6b3/Qsf8A9br9/wDN6n1Q+q56PU7LyzOfkNDXMBltTJ3eiCPp2bv52z/tr/SWw+qf1" +
                        "SZ0ljc3Na1/UHNhrRBbS0j+br/etd/hbf8ArVX6P+e6ZDPmhGHsYPk/Tn1yy/71OHDKU/fzfP8AoQ6Yo" +
                        "/8AfPKf4yP+Qav/AAy3/wA93LPH/i06N/4Uq/8APWQul+suF07OwasbqIt9GzIqYx9OhbY8+jU5x/0bn" +
                        "Wel9H/CKi5n1ePUz1RgtOT0h9fTxUwy0uftoo2sd7rNrsp1O/f+ZZ/o0/DlAwiNSJrLHQaXl4YwWZcRO" +
                        "Yysb45eP6v1SdL6x1ss6B1FtjQ4DGtcAfFrTYx39l7dy4DPba76ldMfyxmTez4Fxtcwfg9ek3NxM+jJw" +
                        "y9tjHtdTkNY4bm7xtc123+bftcqGL0vomB0p/SLLGXYjQ59rch7CdrnEl9n0NrW2/Qf++mcvnGKIBBMh" +
                        "kE+H+rwygV/MYfckSCADAwv+txcTifXa/H6r0CrN6dc3Jpx7mvu2GdrXtfXutZ9Ova97PY9qz+mdJxOo" +
                        "YjL2/WO2l20Cyix+11ZAj09rr2+1v5jvoLp+m/V/oPSMm70D7+oN2Ci2wPBYNzjXVW/3WM93u3+qstn1" +
                        "Q+q/UrLLahdibbrccUte0NL6XOZYaWWet7PZu/qf4NTY8+OMDCMpxhE8UcnBGWk/wBGUZf9JiyYZynxk" +
                        "RlKQ4ZQ45R+X9KMopuh/VOvF6nX1dnVDnlm9rjAduJb6Xuu9Sz6Cx/qW9jekdcpLgLfSLvTPO0MsYXf5" +
                        "/tXWfV7pHS+lYttfTbDdXZYXWPLw/3ACvb+jDWN2bViiroJ6lX1Srp2ZZZ1Wl5pYzYK7PWr9bJe1nrsf" +
                        "Xd6Lv0m5zGf6P8AS/pE2OYz92MjKekOGXDGH80fc4ZR9P8AWTLCIDFKIEPn4o3KY/XDg4uL1OZ0O/o1P" +
                        "1Mt/bFbrcazNLGNrBL/AFCytzHVOBbscxrXu3b/AP0mpt+reNTU7P8Aq915tNZAJ9Sz04/O/T3Ulm3/A" +
                        "Iu7FXQ43TOhdMxv+b9jC/GyWPyLH5Dmlph9NMPf7Ntu+2n0fTZ/g/8ASqjb9Qfq07K9P17q7Xy5mOLWE" +
                        "7R+56tdl+z+2njmIcUzxTgJyM/lGTHOH9z9FaeXlwwHDCZjER+b28kJf33PxOvdQ6n9X+t4mc5t78Sgl" +
                        "uSwABwdvbDtgbW7+b/RPaz9JWnx7ugN+pvTKetNeWXW3Cl9QJfW4W3b7w5v5tbXe/8AnN/+hsXS0dG6D" +
                        "T0+/pGOGMqvrJvDXzYWuGz13vJdZ29r/oJUdE6I7pY6LtblY2Mfcx7tz2ucTb6jns2vqtd6jnez01GeY" +
                        "xa8MZwj7gyVD0ER4ODiH7vrXjBk0uUZy9s4/V6hxcfHX+K8s76vfYKjndB6/VXjkz+ktFbf+uWVF1Frv" +
                        "+Mxlu/Uvrub1jCu+2gOtxnhvrNG0PDhu9zR7PUZ+fs/kKkPqJ9V3N+1NyrTRq7cLayyGzv/AEvp7trNv" +
                        "u/SrpenYOBgYraOn1tqx/pN2Gd27/CF5LnWbv33OS5jNjljMbOSd6TlAY5QroZfpJ5fDkjkB0xwrWEZm" +
                        "cZ32H6L/9L1VJJJJTzn1p+qzepsdm4TQ3qDW+5mgbe0D+bfPtbc3/A3f9at/R/zM/qn9XH9IpdkZLj9s" +
                        "yWgWVNcfTraPo17Wn07bm/n3/8AW6f0f870CSSlJJJJKafWMSzM6bfRV/PFu+iTA9Wsi7H93/H11rHo6" +
                        "BnDMwbrCzaazdn8GMppvvpNbfz2faepZFv/AKDUrpElYxe77Z4a4bld9+H+X+GwZfa4xxXxUNu3E899W" +
                        "+j5ODZWcqqxluPj/ZjZuoNL/c1+6r7PXVlWbnM9Vr839Kz1rvz7LLE1f1enJw7bcWl2zMzb8lxDSSy52" +
                        "Q7GLtP0n08b2/4P/rS6JJSS97jntdHi4eL93Jt/z/8ADWR9rgjd8NiuKv3oPHv6F1r7BjYYq91NNLa3t" +
                        "dVDH1Xvvc22+xpytldLcf7E3F/P9X1kZ/QOrF2dt2OGeM2qtz3a44ufZdTbRtH81my1mb/h/U9D/B1em" +
                        "zqklIff1/m/mldfvLB7Onz/ACx3/dcfoGBZjOvutptx7LW1MLLDj7f0QcB6Tensqr2s3+l6lrfVfWyr/" +
                        "RoOH0rOqZ9XxYwA9OqczK9wO0mj0Pb+/wDpFvJKA+5xT+XbWrqvan8v/U2UcHBC+KrFXXFfuw+b/Dcrq" +
                        "PSvtvUWW201347MS+oCwBwFljqdvsd+9Wyz3rJb0frTn4DbqgTinBcbWuqiKQxuX69rmOzbsrd67K/Ts" +
                        "+y/Z3/6T1K7erSTsXu8IrhqvTx33/RRk9viN8V3rw08Z0fDdbg4uRXhsrqxrM2+3Olm6xrhlY/oNa39M" +
                        "5z32Mdd6v6HZjV/zns9JYfRczN6Vj/ZcWvBA6YKDaHNH2g2nHv2fo2vf6Hp0W+o/Jbv9TLf+gtr9X1ez" +
                        "SUx93iNCPFxaaz/AHsn73p/fYo+3wizLh4ddI/uw/d9X/dvOYvQ3vsx7bsezb9t+0ZFWUaHCG4tuNXdX" +
                        "VhNbjfzz6Wf6X9F6q0OkUZWExuEcZteMHZNjbGvbtYHZD34uO2kfmuxrd//AAXp+ktNJV83uUePh4dKr" +
                        "i4f0+HhZ8XBpw8V678N/o8Vv//Z/+0Y0FBob3Rvc2hvcCAzLjAAOEJJTQQlAAAAAAAQAAAAAAAAAAAAA" +
                        "AAAAAAAADhCSU0EOgAAAAAAkwAAABAAAAABAAAAAAALcHJpbnRPdXRwdXQAAAAFAAAAAENsclNlbnVtA" +
                        "AAAAENsclMAAAAAUkdCQwAAAABJbnRlZW51bQAAAABJbnRlAAAAAENscm0AAAAATXBCbGJvb2wBAAAAD" +
                        "3ByaW50U2l4dGVlbkJpdGJvb2wAAAAAC3ByaW50ZXJOYW1lVEVYVAAAAAEAAAA4QklNBDsAAAAAAbIAA" +
                        "AAQAAAAAQAAAAAAEnByaW50T3V0cHV0T3B0aW9ucwAAABIAAAAAQ3B0bmJvb2wAAAAAAENsYnJib29sA" +
                        "AAAAABSZ3NNYm9vbAAAAAAAQ3JuQ2Jvb2wAAAAAAENudENib29sAAAAAABMYmxzYm9vbAAAAAAATmd0d" +
                        "mJvb2wAAAAAAEVtbERib29sAAAAAABJbnRyYm9vbAAAAAAAQmNrZ09iamMAAAABAAAAAAAAUkdCQwAAA" +
                        "AMAAAAAUmQgIGRvdWJAb+AAAAAAAAAAAABHcm4gZG91YkBv4AAAAAAAAAAAAEJsICBkb3ViQG/gAAAAA" +
                        "AAAAAAAQnJkVFVudEYjUmx0AAAAAAAAAAAAAAAAQmxkIFVudEYjUmx0AAAAAAAAAAAAAAAAUnNsdFVud" +
                        "EYjUHhsQGLAAAAAAAAAAAAKdmVjdG9yRGF0YWJvb2wBAAAAAFBnUHNlbnVtAAAAAFBnUHMAAAAAUGdQQ" +
                        "wAAAABMZWZ0VW50RiNSbHQAAAAAAAAAAAAAAABUb3AgVW50RiNSbHQAAAAAAAAAAAAAAABTY2wgVW50R" +
                        "iNQcmNAWQAAAAAAADhCSU0D7QAAAAAAEACWAAAAAQACAJYAAAABAAI4QklNBCYAAAAAAA4AAAAAAAAAA" +
                        "AAAP4AAADhCSU0EDQAAAAAABAAAAHg4QklNBBkAAAAAAAQAAAAeOEJJTQPzAAAAAAAJAAAAAAAAAAABA" +
                        "DhCSU0nEAAAAAAACgABAAAAAAAAAAI4QklNA/UAAAAAAEgAL2ZmAAEAbGZmAAYAAAAAAAEAL2ZmAAEAo" +
                        "ZmaAAYAAAAAAAEAMgAAAAEAWgAAAAYAAAAAAAEANQAAAAEALQAAAAYAAAAAAAE4QklNA/gAAAAAAHAAA" +
                        "P////////////////////////////8D6AAAAAD/////////////////////////////A+gAAAAA/////" +
                        "////////////////////////wPoAAAAAP////////////////////////////8D6AAAOEJJTQQAAAAAA" +
                        "AACAAE4QklNBAIAAAAAAAQAAAAAOEJJTQQwAAAAAAACAQE4QklNBC0AAAAAAAYAAQAAAAM4QklNBAgAA" +
                        "AAAABAAAAABAAACQAAAAkAAAAAAOEJJTQQeAAAAAAAEAAAAADhCSU0EGgAAAAADSQAAAAYAAAAAAAAAA" +
                        "AAAAIEAAAFiAAAACgBVAG4AdABpAHQAbABlAGQALQAxAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA" +
                        "AAAAAAAAAFiAAAAgQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABAAAAAAAAb" +
                        "nVsbAAAAAIAAAAGYm91bmRzT2JqYwAAAAEAAAAAAABSY3QxAAAABAAAAABUb3AgbG9uZwAAAAAAAAAAT" +
                        "GVmdGxvbmcAAAAAAAAAAEJ0b21sb25nAAAAgQAAAABSZ2h0bG9uZwAAAWIAAAAGc2xpY2VzVmxMcwAAA" +
                        "AFPYmpjAAAAAQAAAAAABXNsaWNlAAAAEgAAAAdzbGljZUlEbG9uZwAAAAAAAAAHZ3JvdXBJRGxvbmcAA" +
                        "AAAAAAABm9yaWdpbmVudW0AAAAMRVNsaWNlT3JpZ2luAAAADWF1dG9HZW5lcmF0ZWQAAAAAVHlwZWVud" +
                        "W0AAAAKRVNsaWNlVHlwZQAAAABJbWcgAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQAAAAAV" +
                        "G9wIGxvbmcAAAAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAAAIEAAAAAUmdodGxvbmcAAAFiA" +
                        "AAAA3VybFRFWFQAAAABAAAAAAAAbnVsbFRFWFQAAAABAAAAAAAATXNnZVRFWFQAAAABAAAAAAAGYWx0V" +
                        "GFnVEVYVAAAAAEAAAAAAA5jZWxsVGV4dElzSFRNTGJvb2wBAAAACGNlbGxUZXh0VEVYVAAAAAEAAAAAA" +
                        "Alob3J6QWxpZ25lbnVtAAAAD0VTbGljZUhvcnpBbGlnbgAAAAdkZWZhdWx0AAAACXZlcnRBbGlnbmVud" +
                        "W0AAAAPRVNsaWNlVmVydEFsaWduAAAAB2RlZmF1bHQAAAALYmdDb2xvclR5cGVlbnVtAAAAEUVTbGljZ" +
                        "UJHQ29sb3JUeXBlAAAAAE5vbmUAAAAJdG9wT3V0c2V0bG9uZwAAAAAAAAAKbGVmdE91dHNldGxvbmcAA" +
                        "AAAAAAADGJvdHRvbU91dHNldGxvbmcAAAAAAAAAC3JpZ2h0T3V0c2V0bG9uZwAAAAAAOEJJTQQoAAAAA" +
                        "AAMAAAAAj/wAAAAAAAAOEJJTQQUAAAAAAAEAAAABDhCSU0EDAAAAAAQigAAAAEAAACgAAAAOgAAAeAAA" +
                        "GzAAAAQbgAYAAH/2P/tAAxBZG9iZV9DTQAB/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBELC" +
                        "gsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsNDg0QD" +
                        "g4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAE" +
                        "QgAOgCgAwEiAAIRAQMRAf/dAAQACv/EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYHCAkKCwEAAQUBA" +
                        "QEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQhEjEFQVFhEyJxgTIGF" +
                        "JGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXiZfKzhMPTdePzRieUpIW0l" +
                        "cTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIEBAMEBQYHBwYFNQEAAhEDITESB" +
                        "EFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKygwcmNcLSRJNUoxdkRVU2dGXi8rOEw" +
                        "9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dXZ3eHl6e3x//aAAwDAQACEQMRAD8A9VSSS" +
                        "SUpYGFkfWd31kyKsqoN6S3f6btrQ3aI9B1VgPqvts/wzH/+B/o1d+sPVj0jpN2axrX2t2tpY6YL3kMbu" +
                        "2/mtn1HIf1Y6rl9W6QzMy6212Oe9oLJDXBrtnqNa4vcz9z6af7Uvb939Di4P8JZ7sfc9v8ASri/wXWSS" +
                        "STF6kkkklKSSSSUpJJJJSkkkklKSSSSUpJJJJSkkkklP//Q9VWf1rrWJ0fE9e/32PltFDT7rHfut/dY3" +
                        "/CWf4NN1vreJ0bE9e/32PltFDT7rHeA/dY3/CWf4Ncb0zpnUfrX1F+fnvLcVp22WNkCAf6Hh/usb/hbf" +
                        "/R/82lK+sfU8rN+q/Trspwddl5Ntzg0Q1orN1VdTP5DGOZ9JF6sOpdL6J9X+odPBZViU7rbRqA+8VPjI" +
                        "r/0NrvUb/X/ANHZ6Stf4wcGqjpXTxjsFVGPaaWVtEABzHFv/npdD0B1OX9XcEECyp+LXW9jgC0wwVWsc" +
                        "0/S+i5i0I5Bj5bBPh4gJz44nY8XFH/oNGWM5OZzRvhJhDhkNxXq/wCmw+r31hxet4u9n6PJrgZGOTq0/" +
                        "vN/fqf+Y9ay87670LO+rGa3q3SHOGIHaHVxqLj/ADF/+lxbPose7/i7P0vpW2dd9XvrDjdbxd7B6eTVA" +
                        "yKCZLSfzm/v1P8AzHqHmOXiI+9hPFhl/jY5fuyZcGeRkcWUcOWP+Lkj+/FL13rmJ0PB+25bXvrLxWG17" +
                        "Zkgu/wjq2fRY785XqrWXVMurMssaHtPk4bmrB+vHUcvpvSK8jDc1l/rta2xzGvLZZaS6sWh7Gv9uz6P0" +
                        "Fk9T6z9ZX9XwundNyhW/KxarA1zK9peW2WWuL31P2+2tNx8rPJESEoxB4vmP+b+a12TmYQkYkSlIcOkR" +
                        "+/8r26yuu/WDF6HXRZlV2WMveWTWGnbA3Fzg9zP+iubyOsfXToThb1djcvDs9rnsDBtJ/0dtLGenb+56" +
                        "9PpPWX9aH9XuxcfKysxud0u9xfg2bWMsgt3fpmU117bGN/RWfy/9GpsPJXkjxyhLHLrCXz/ANWP9Zizc" +
                        "5WORjGQnHpKPy/1pf1X01JcrV1P6w9Cw8rN+sdteSz2MxKa9oe607vbvrrqayvb9Pf6n0P+3KOPb/jC6" +
                        "pj/ALQx7a8ep4300Qxm5vb0m3V3P2u/M+02s/zFEOUkbPuYxAHh9wy9Epdosh5kChwTMyOLgA9cY95Pc" +
                        "Llfqh9Yc/qGN1LL6lYHsxiHtaxgaGM2vse1u33v+j+ej/Vf6y5PUbremdTq9DqOMJIALQ9rSGvlhnZaz" +
                        "c3d+Y/+cqWL9RbDX0jrVga15YzcGvEtMV2Ha9v5zE+OAxxZ4zA4x7XDLf55bxl/WWSziWTAYk8BGTiH9" +
                        "yP6Uf6r1nQut4nXMH7biNexgea3Ns27g5sH/BusZ9Fzfz1oriOn/W3qGN9VH9RySMrLdlHGolrWMH6Nt" +
                        "jfUZQKvYxrbP5f5iWOz/GFm4reoU5lQa8bq6QapIPG0Cmyn/ty9N+5zF8c4QAlwcUjpKX9Vd97ga4Yzm" +
                        "SOOojWMfF6/PzacDCvzb59LHY6x4aJMNG72zCH0nqdHVun09Qxw5tV0w10SC1zqntOwvZ9Nn7ywq+r9d" +
                        "t+rfU7eqYYx8rDY4V2WM9lhA/nPQs3sd6bvz/6PZ/g1Us+t2fhfVbBynxkdRznXNFr2gNArse11jq6vT" +
                        "a52z02MZ/1xNHKZCaHCfX7ehvXh9zi/u8K481jAs2PT7mo6cXB/jcT2iS4puP8A4xnUNzGZdVhcARQ00" +
                        "kkH/rP2b/2YXQ/V3P6ln9O9bqeKcTJa9zC0tczeBEWiqz31/S2f2E3Jy5hHiE4TANHglqE48/GeEwnCx" +
                        "Y4xoX//0ez+tf1ZPVWjNxDGfSzYGOPtsrBL/R93tqs3O/RWf2Lv9JTmfVP6z+gWdH6l+iDD6WPa4bC1w" +
                        "Oz7Jkt9uyxrvZXZ/wBbt/S/zvarm/rV9VWdUY7Mw2tbntbD2GA29oEenZPtbc1v81b/ANat/R/zKU3vr" +
                        "R0x3U+iZOPW3de0C2gcnfWd4a3/AIxu6r/rixP8XnV2W4tnSbHfpKSbscHvW8zY0f8AFXO/8GUfqp9aH" +
                        "se3pHVXODg70se6yQ4OB2fZMnd7vV3eyp7/APirP0n87n/WHoNwzn9V+rpdkVPsey5uI6X03615DW+md" +
                        "+y3c71P9H/xKuctKGTHLl5nh4jx45H9GbU5mM8eSOeA4uEcGSI/Sh/6C3Prd9azc5/RekzY6w+jkWsG4" +
                        "uLvYcXHaPpvf9Cx/wD1uv3/AM3qfVD6rno9TsvLM5+Q0NcwGW1Mnd6II+nZu/nbP+2v9JbD6p/VJnSWN" +
                        "zc1rX9Qc2GtEFtLSP5uv9613+Ft/wCtVfo/57pkM+aEYexg+T9OfXLL/vU4cMpT9/N8/wChDpij/wB88" +
                        "p/jI/5Bq/8ADLf/AD3cs8f+LTo3/hSr/wA9ZC6X6y4XTs7Bqxuoi30bMipjH06Ftjz6NTnH/RudZ6X0f" +
                        "8IqLmfV49TPVGC05PSH19PFTDLS5+2ijax3us2uynU79/5ln+jT8OUDCI1ImssdBpeXhjBZlxE5jKxvj" +
                        "l4/q/VJ0vrHWyzoHUW2NDgMa1wB8WtNjHf2Xt3LgM9trvqV0x/LGZN7PgXG1zB+D16Tc3Ez6MnDL22Me" +
                        "11OQ1jhubvG1zXbf5t+1yoYvS+iYHSn9IssZdiNDn2tyHsJ2ucSX2fQ2tbb9B/76Zy+cYogEEyGQT4f6" +
                        "vDKBX8xh9yRIIAMDC/63FxOJ9dr8fqvQKs3p1zcmnHua+7YZ2te19e61n069r3s9j2rP6Z0nE6hiMvb9" +
                        "Y7aXbQLKLH7XVkCPT2uvb7W/mO+gun6b9X+g9IybvQPv6g3YKLbA8Fg3ONdVb/dYz3e7f6qy2fVD6r9S" +
                        "sstqF2JtutxxS17Q0vpc5lhpZZ63s9m7+p/g1Njz44wMIynGETxRycEZaT/AEZRl/0mLJhnKfGRGUpDh" +
                        "lDjlH5f0oyim6H9U68XqdfV2dUOeWb2uMB24lvpe671LPoLH+pb2N6R1ykuAt9Iu9M87Qyxhd/n+1dZ9" +
                        "XukdL6Vi219NsN1dlhdY8vD/cAK9v6MNY3ZtWKKugnqVfVKunZllnVaXmljNgrs9av1sl7Weux9d3ou/" +
                        "SbnMZ/o/wBL+kTY5jP3YyMp6Q4ZcMYfzR9zhlH0/wBZMsIgMUogQ+fijcpj9cODi4vU5nQ7+jU/Uy39s" +
                        "VutxrM0sY2sEv8AULK3MdU4FuxzGte7dv8A/Sam36t41NTs/wCr3Xm01kAn1LPTj879PdSWbf8Ai7sVd" +
                        "DjdM6F0zG/5v2ML8bJY/IsfkOaWmH00w9/s2277afR9Nn+D/wBKqNv1B+rTsr0/XurtfLmY4tYTtH7nq" +
                        "12X7P7aeOYhxTPFOAnIz+UZMc4f3P0Vp5eXDAcMJmMRH5vbyQl/fc/E691Dqf1f63iZzm3vxKCW5LAAH" +
                        "B29sO2Btbv5v9E9rP0lafHu6A36m9Mp6015ZdbcKX1Al9bhbdvvDm/m1td7/wCc3/6GxdLR0boNPT7+k" +
                        "Y4Yyq+sm8NfNha4bPXe8l1nb2v+glR0Tojuljou1uVjYx9zHu3Pa5xNvqOeza+q13qOd7PTUZ5jFrwxn" +
                        "CPuDJUPQRHg4OIfu+teMGTS5RnL2zj9XqHFx8df4ryzvq99gqOd0Hr9VeOTP6S0Vt/65ZUXUWu/4zGW7" +
                        "9S+u5vWMK77aA63GeG+s0bQ8OG73NHs9Rn5+z+QqQ+on1Xc37U3KtNGrtwtrLIbO/8AS+nu2s2+79Kul" +
                        "6dg4GBito6fW2rH+k3YZ3bv8IXkudZu/fc5LmM2OWMxs5J3pOUBjlCuhl+knl8OSOQHTHCtYRmZxnfYf" +
                        "ov/0vVUkkklPOfWn6rN6mx2bhNDeoNb7maBt7QP5t8+1tzf8Dd/1q39H/Mz+qf1cf0il2RkuP2zJaBZU" +
                        "1x9Oto+jXtafTtub+ff/wBbp/R/zvQJJKUkkkkpp9YxLMzpt9FX88W76JMD1ayLsf3f8fXWsejoGcMzB" +
                        "usLNprN2fwYymm++k1t/PZ9p6lkW/8AoNSukSVjF7vtnhrhuV334f5f4bBl9rjHFfFQ27cTz31b6Pk4N" +
                        "lZyqrGW4+P9mNm6g0v9zX7qvs9dWVZucz1Wvzf0rPWu/PsssTV/V6cnDttxaXbMzNvyXENJLLnZDsYu0" +
                        "/SfTxvb/g/+tLoklJL3uOe10eLh4v3cm3/P/wANZH2uCN3w2K4q/eg8e/oXWvsGNhir3U00tre11UMfV" +
                        "e+9zbb7GnK2V0tx/sTcX8/1fWRn9A6sXZ23Y4Z4zaq3Pdrji59l1NtG0fzWbLWZv+H9T0P8HV6bOqSUh" +
                        "9/X+b+aV1+8sHs6fP8ALHf91x+gYFmM6+62m3HstbUwssOPt/RBwHpN6eyqvazf6XqWt9V9bKv9Gg4fS" +
                        "s6pn1fFjAD06pzMr3A7SaPQ9v7/AOkW8koD7nFP5dtauq9qfy/9TZRwcEL4qsVdcV+7D5v8Nyuo9K+29" +
                        "RZbbTXfjsxL6gLAHAWWOp2+x371bLPeslvR+tOfgNuqBOKcFxta6qIpDG5fr2uY7Nuyt3rsr9Oz7L9nf" +
                        "/pPUrt6tJOxe7wiuGq9PHff9FGT2+I3xXevDTxnR8N1uDi5FeGyurGszb7c6WbrGuGVj+g1rf0znPfYx" +
                        "13q/odmNX/Oez0lh9FzM3pWP9lxa8EDpgoNoc0faDace/Z+ja9/oenRb6j8lu/1Mt/6C2v1fV7NJTH3e" +
                        "I0I8XFprP8Aeyfven99ij7fCLMuHh10j+7D931f9285i9De+zHtux7Nv237RkVZRocIbi241d1dWE1uN" +
                        "/PPpZ/pf0XqrQ6RRlYTG4Rxm14wdk2Nsa9u1gdkPfi47aR+a7Gt3/8ABen6S00lXze5R4+Hh0quLh/T4" +
                        "eFnxcGnDxXrvw3+jxW//9k4QklNBCEAAAAAAFUAAAABAQAAAA8AQQBkAG8AYgBlACAAUABoAG8AdABvA" +
                        "HMAaABvAHAAAAATAEEAZABvAGIAZQAgAFAAaABvAHQAbwBzAGgAbwBwACAAQwBTADUAAAABADhCSU0EB" +
                        "gAAAAAABwAHAAAAAQEA/+EN0Gh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ" +
                        "2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4NCjx4OnhtcG1ldGEgeG1sbnM6e" +
                        "D0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3N" +
                        "ywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4NCgk8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6L" +
                        "y93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPg0KCQk8cmRmOkRlc2NyaXB0aW9uI" +
                        "HJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zO" +
                        "nhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL" +
                        "25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpkYz0iaHR0cDovL" +
                        "3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlL" +
                        "mNvbS9waG90b3Nob3AvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdpb" +
                        "mRvd3MiIHhtcDpDcmVhdGVEYXRlPSIyMDExLTAxLTE4VDA5OjUxOjA2LTA2OjAwIiB4bXA6TWV0YWRhd" +
                        "GFEYXRlPSIyMDExLTAxLTE4VDA5OjUxOjA2LTA2OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAxMS0wMS0xO" +
                        "FQwOTo1MTowNi0wNjowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDozNDRDMDlBQjFBMjNFMDExO" +
                        "DIwMUIyQTAyRTQ3QzE5OCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDozMzRDMDlBQjFBMjNFMDExO" +
                        "DIwMUIyQTAyRTQ3QzE5OCIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjMzNEMwOUFCM" +
                        "UEyM0UwMTE4MjAxQjJBMDJFNDdDMTk4IiBkYzpmb3JtYXQ9ImltYWdlL2pwZWciIHBob3Rvc2hvcDpDb" +
                        "2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSI+DQoJCQk8e" +
                        "G1wTU06SGlzdG9yeT4NCgkJCQk8cmRmOlNlcT4NCgkJCQkJPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZ" +
                        "WF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MzM0QzA5QUIxQTIzRTAxMTgyMDFCMkEwMkU0N" +
                        "0MxOTgiIHN0RXZ0OndoZW49IjIwMTEtMDEtMThUMDk6NTE6MDYtMDY6MDAiIHN0RXZ0OnNvZnR3YXJlQ" +
                        "WdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDUzUgV2luZG93cyIvPg0KCQkJCQk8cmRmOmxpIHN0RXZ0OmFjd" +
                        "Glvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MzQ0QzA5QUIxQTIzRTAxMTgyMDFCM" +
                        "kEwMkU0N0MxOTgiIHN0RXZ0OndoZW49IjIwMTEtMDEtMThUMDk6NTE6MDYtMDY6MDAiIHN0RXZ0OnNvZ" +
                        "nR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDUzUgV2luZG93cyIgc3RFdnQ6Y2hhbmdlZD0iLyIvP" +
                        "g0KCQkJCTwvcmRmOlNlcT4NCgkJCTwveG1wTU06SGlzdG9yeT4NCgkJPC9yZGY6RGVzY3JpcHRpb24+D" +
                        "QoJPC9yZGY6UkRGPg0KPC94OnhtcG1ldGE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD94cGFja" +
                        "2V0IGVuZD0ndyc/Pv/iDFhJQ0NfUFJPRklMRQABAQAADEhMaW5vAhAAAG1udHJSR0IgWFlaIAfOAAIAC" +
                        "QAGADEAAGFjc3BNU0ZUAAAAAElFQyBzUkdCAAAAAAAAAAAAAAABAAD21gABAAAAANMtSFAgIAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWNwcnQAAAFQAAAAM2Rlc2MAA" +
                        "AGEAAAAbHd0cHQAAAHwAAAAFGJrcHQAAAIEAAAAFHJYWVoAAAIYAAAAFGdYWVoAAAIsAAAAFGJYWVoAA" +
                        "AJAAAAAFGRtbmQAAAJUAAAAcGRtZGQAAALEAAAAiHZ1ZWQAAANMAAAAhnZpZXcAAAPUAAAAJGx1bWkAA" +
                        "AP4AAAAFG1lYXMAAAQMAAAAJHRlY2gAAAQwAAAADHJUUkMAAAQ8AAAIDGdUUkMAAAQ8AAAIDGJUUkMAA" +
                        "AQ8AAAIDHRleHQAAAAAQ29weXJpZ2h0IChjKSAxOTk4IEhld2xldHQtUGFja2FyZCBDb21wYW55AABkZ" +
                        "XNjAAAAAAAAABJzUkdCIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAA81EAA" +
                        "QAAAAEWzFhZWiAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAG+iAAA49QAAA5BYWVogAAAAAAAAYpkAA" +
                        "LeFAAAY2lhZWiAAAAAAAAAkoAAAD4QAALbPZGVzYwAAAAAAAAAWSUVDIGh0dHA6Ly93d3cuaWVjLmNoA" +
                        "AAAAAAAAAAAAAAWSUVDIGh0dHA6Ly93d3cuaWVjLmNoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALklFQyA2MTk2Ni0yLjEgRGVmYXVsdCBSR0IgY29sb" +
                        "3VyIHNwYWNlIC0gc1JHQgAAAAAAAAAAAAAALklFQyA2MTk2Ni0yLjEgRGVmYXVsdCBSR0IgY29sb3VyI" +
                        "HNwYWNlIC0gc1JHQgAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZXNjAAAAAAAAACxSZWZlcmVuY2UgVmlld" +
                        "2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAsUmVmZXJlbmNlIFZpZXdpbmcgQ" +
                        "29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdmlldwAAAAAAE" +
                        "6T+ABRfLgAQzxQAA+3MAAQTCwADXJ4AAAABWFlaIAAAAAAATAlWAFAAAABXH+dtZWFzAAAAAAAAAAEAA" +
                        "AAAAAAAAAAAAAAAAAAAAAACjwAAAAJzaWcgAAAAAENSVCBjdXJ2AAAAAAAABAAAAAAFAAoADwAUABkAH" +
                        "gAjACgALQAyADcAOwBAAEUASgBPAFQAWQBeAGMAaABtAHIAdwB8AIEAhgCLAJAAlQCaAJ8ApACpAK4As" +
                        "gC3ALwAwQDGAMsA0ADVANsA4ADlAOsA8AD2APsBAQEHAQ0BEwEZAR8BJQErATIBOAE+AUUBTAFSAVkBY" +
                        "AFnAW4BdQF8AYMBiwGSAZoBoQGpAbEBuQHBAckB0QHZAeEB6QHyAfoCAwIMAhQCHQImAi8COAJBAksCV" +
                        "AJdAmcCcQJ6AoQCjgKYAqICrAK2AsECywLVAuAC6wL1AwADCwMWAyEDLQM4A0MDTwNaA2YDcgN+A4oDl" +
                        "gOiA64DugPHA9MD4APsA/kEBgQTBCAELQQ7BEgEVQRjBHEEfgSMBJoEqAS2BMQE0wThBPAE/gUNBRwFK" +
                        "wU6BUkFWAVnBXcFhgWWBaYFtQXFBdUF5QX2BgYGFgYnBjcGSAZZBmoGewaMBp0GrwbABtEG4wb1BwcHG" +
                        "QcrBz0HTwdhB3QHhgeZB6wHvwfSB+UH+AgLCB8IMghGCFoIbgiCCJYIqgi+CNII5wj7CRAJJQk6CU8JZ" +
                        "Al5CY8JpAm6Cc8J5Qn7ChEKJwo9ClQKagqBCpgKrgrFCtwK8wsLCyILOQtRC2kLgAuYC7ALyAvhC/kME" +
                        "gwqDEMMXAx1DI4MpwzADNkM8w0NDSYNQA1aDXQNjg2pDcMN3g34DhMOLg5JDmQOfw6bDrYO0g7uDwkP";
                    resourceString += "JQ9BD14Peg+WD7MPzw/sEAkQJhBDEGEQfhCbELkQ1xD1ERMRMRFPEW0RjBGqEckR6BIHEiYSRRJkEoQSo" +
                        "xLDEuMTAxMjE0MTYxODE6QTxRPlFAYUJxRJFGoUixStFM4U8BUSFTQVVhV4FZsVvRXgFgMWJhZJFmwWj" +
                        "xayFtYW+hcdF0EXZReJF64X0hf3GBsYQBhlGIoYrxjVGPoZIBlFGWsZkRm3Gd0aBBoqGlEadxqeGsUa7" +
                        "BsUGzsbYxuKG7Ib2hwCHCocUhx7HKMczBz1HR4dRx1wHZkdwx3sHhYeQB5qHpQevh7pHxMfPh9pH5Qfv" +
                        "x/qIBUgQSBsIJggxCDwIRwhSCF1IaEhziH7IiciVSKCIq8i3SMKIzgjZiOUI8Ij8CQfJE0kfCSrJNolC" +
                        "SU4JWgllyXHJfcmJyZXJocmtyboJxgnSSd6J6sn3CgNKD8ocSiiKNQpBik4KWspnSnQKgIqNSpoKpsqz" +
                        "ysCKzYraSudK9EsBSw5LG4soizXLQwtQS12Last4S4WLkwugi63Lu4vJC9aL5Evxy/+MDUwbDCkMNsxE" +
                        "jFKMYIxujHyMioyYzKbMtQzDTNGM38zuDPxNCs0ZTSeNNg1EzVNNYc1wjX9Njc2cjauNuk3JDdgN5w31" +
                        "zgUOFA4jDjIOQU5Qjl/Obw5+To2OnQ6sjrvOy07azuqO+g8JzxlPKQ84z0iPWE9oT3gPiA+YD6gPuA/I" +
                        "T9hP6I/4kAjQGRApkDnQSlBakGsQe5CMEJyQrVC90M6Q31DwEQDREdEikTORRJFVUWaRd5GIkZnRqtG8" +
                        "Ec1R3tHwEgFSEtIkUjXSR1JY0mpSfBKN0p9SsRLDEtTS5pL4kwqTHJMuk0CTUpNk03cTiVObk63TwBPS" +
                        "U+TT91QJ1BxULtRBlFQUZtR5lIxUnxSx1MTU19TqlP2VEJUj1TbVShVdVXCVg9WXFapVvdXRFeSV+BYL" +
                        "1h9WMtZGllpWbhaB1pWWqZa9VtFW5Vb5Vw1XIZc1l0nXXhdyV4aXmxevV8PX2Ffs2AFYFdgqmD8YU9ho" +
                        "mH1YklinGLwY0Njl2PrZEBklGTpZT1lkmXnZj1mkmboZz1nk2fpaD9olmjsaUNpmmnxakhqn2r3a09rp" +
                        "2v/bFdsr20IbWBtuW4SbmtuxG8eb3hv0XArcIZw4HE6cZVx8HJLcqZzAXNdc7h0FHRwdMx1KHWFdeF2P" +
                        "nabdvh3VnezeBF4bnjMeSp5iXnnekZ6pXsEe2N7wnwhfIF84X1BfaF+AX5ifsJ/I3+Ef+WAR4CogQqBa" +
                        "4HNgjCCkoL0g1eDuoQdhICE44VHhauGDoZyhteHO4efiASIaYjOiTOJmYn+imSKyoswi5aL/IxjjMqNM" +
                        "Y2Yjf+OZo7OjzaPnpAGkG6Q1pE/kaiSEZJ6kuOTTZO2lCCUipT0lV+VyZY0lp+XCpd1l+CYTJi4mSSZk" +
                        "Jn8mmia1ZtCm6+cHJyJnPedZJ3SnkCerp8dn4uf+qBpoNihR6G2oiailqMGo3aj5qRWpMelOKWpphqmi" +
                        "6b9p26n4KhSqMSpN6mpqhyqj6sCq3Wr6axcrNCtRK24ri2uoa8Wr4uwALB1sOqxYLHWskuywrM4s660J" +
                        "bSctRO1irYBtnm28Ldot+C4WbjRuUq5wro7urW7LrunvCG8m70VvY++Cr6Evv+/er/1wHDA7MFnwePCX" +
                        "8Lbw1jD1MRRxM7FS8XIxkbGw8dBx7/IPci8yTrJuco4yrfLNsu2zDXMtc01zbXONs62zzfPuNA50LrRP" +
                        "NG+0j/SwdNE08bUSdTL1U7V0dZV1tjXXNfg2GTY6Nls2fHadtr724DcBdyK3RDdlt4c3qLfKd+v4Dbgv" +
                        "eFE4cziU+Lb42Pj6+Rz5PzlhOYN5pbnH+ep6DLovOlG6dDqW+rl63Dr++yG7RHtnO4o7rTvQO/M8Fjw5" +
                        "fFy8f/yjPMZ86f0NPTC9VD13vZt9vv3ivgZ+Kj5OPnH+lf65/t3/Af8mP0p/br+S/7c/23////bAEMAA" +
                        "QEBAQEBAQEBAQIBAQECAgEBAQECAgICAgICAgMCAwMDAwIDAwQEBAQEAwUFBQUFBQcHBwcHCAgICAgIC" +
                        "AgICP/bAEMBAQEBAgICBAMDBAcFBAUHCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC" +
                        "AgICAgICAgICAgICP/AABEIAIEBYgMBEQACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGB" +
                        "wgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzY" +
                        "nKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHi" +
                        "ImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8" +
                        "/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABA" +
                        "ncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q" +
                        "0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys" +
                        "7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP7+K" +
                        "ACgAoAKACgAoAa7pGjySOI44wXkkcgKqgZJJPQCgD8VvGX/AAXQ/ZW8L/Em78G6X4S8TeMvCOmXT6Vf/" +
                        "Enw/Dp32OUo5Qz2dvcXMcs0GeQ7bCRkqpGMxzo0VJn7B+CfGnhf4j+EPDXj3wTrEXiDwl4vsrfxD4d1q" +
                        "yJ8u4tLqMSxuAwDKcHlWAKnIIBBFWZtHUUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQBg+KtBh8VeGPEfhe4uXs7fxJYXmgz3" +
                        "drjzYkvLd7dnTdxuUPkZ70AfxE+M/8Aglx+294U+JN78ObL4Gar4v2XRsdI8aeGVil0G9gaQrFcC+kdI" +
                        "YEdRuKzsjJnDhTWPKzqVRH9gn7IXwV1T9nb9mn4PfBjXdTj1fXfA2kpZa9fWZLQG+uZ5L64SFmVC0Ucs" +
                        "7JGxUEqASAeK1SOeTuz6QpkhQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAU" +
                        "AFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAf56/wDwUQ/ax8Z/t" +
                        "U/tR/E/xbdeL73VPh34c1u+0D4QaIbiUWNho2n3BtLaa3gDFI5LhYhNK45LMecAY/2g8FfDrC8PcP4ei" +
                        "qSjXnBSqu2rlJXab3ajflS2SR/il43eI+K4i4hxFZ1XKhCbjSV9Iwi7JpbJytzN73Z/U/8A8EOPi58U/" +
                        "i9+xH9s+KmvXnii78EeLNW+H/g7X/EEs1xeT6Haadpt5Csk87M8ohmu5oUJPyoioOFr/Pn6WXDeX5bxX" +
                        "y4SCgqlKM5KNklNymnZLRXUU33bb6n+h30SOJcxzPhPmxc3N06soQlK7bgowau3q7OTS7JJdD9ia/mU/" +
                        "p8KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK" +
                        "ACgAoAKACgAoAKAILq6trK2uL29uEtLO0R7q7u7p1jiiijUuzuzkBVUAkknAFAHyx+118bNP+GP7G3xy" +
                        "+OHhrWIbmHTvBWo6/4I12ylVoJ7vUrAwaXLHIpwyyTXERUjqDxX3vhbw8s24jwWEavGdWPN/hTvL/yVM" +
                        "+A8VeInlPDeOxadpU6UuX/E1aP/AJM0f5ytf7gn+GJ/dv8AA/VbP/gnx/wSQ8I+O30aG41n4e+AF+J11" +
                        "o2ob40uvEniY/2rHbXLrh8fbdRSBiDkKMLwBX+RfFmHlxn4kVcPzNRq1/Z3XSnT91tdPhi5Lz3P9f8Ah" +
                        "LEQ4K8NaWI5E50qHtLPrUqe8k+vxzUX5bH09+xV+2r8Jv23vhNafEX4dXY03X9NEWn/ABE+HeoSo+o6B" +
                        "qLoT5cmAvmQSbWME4ULIoPCurovwPin4WZjwpmLw2JV4O7hNL3Zx7rs19qO6fdNN/oHhT4rZbxblqxOG" +
                        "dpqynBv3oS7Pun9mWzXZppfYdfmZ+nBQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAQXV1bWVtcXt7cJaWdoj3V3d3TrHFFFGpdndnICqoB" +
                        "JJOAKAP5SP+CnP/AAU61L9oDVdQ/Zr/AGb9XeH4StcDQ/F/jTT5PJl8W3JkEX2aByV26cG4JJHnnk/u/" +
                        "v5SkbwhbVn6Sf8ABa7VYfhn/wAE1fEHgbS5jBZa/qXg/wCGtsMHc9vY3sWphc7WxldMGeRkcZOcH+nPo" +
                        "k5YsRxpRm1/ChUl/wCS8n/t39bn8u/S7zR4fgqtBO3tZ04/+Tc//tv9bH8Wnw48JS+PviH4D8Cws6zeN" +
                        "dZ0vwlE0GN4bUr6KzBXIIzmTjiv9U88zJYPBVsQ9qcJS/8AAU3+h/lDkeWvG42jh1vUnGP/AIE0v1P7Q" +
                        "f8Agu3rWo+FP+Ce+peHtA0+4Oj+J/E/hfwhrQ02OV4LXTraSbVY2nKBgkXn2EKBmIG9kGckA/5c/RFws" +
                        "MRxpGpUkuaFOpJX3cnaLt3dpSenRN7H+qH0v8XUw3BUqdOL5Z1acXbZRV5K/ZXjFa9WlvY/kR/Zh/ae+" +
                        "LP7I/xZ0P4v/CDXDput6afsms6Nd7307WdOd1aaxvoVZfMhk2juGVgHQq6qw/0m4+4By7iTLp4PGQvB6" +
                        "pr4oy6Si+jX3NaO6bR/mj4f+IGZcNZlDG4KdprRp/DOPWMl1T+9OzTTSZ/ef+xV+2r8Jv23vhNafEX4d" +
                        "XY03X9NEWn/ABE+HeoSo+o6BqLoT5cmAvmQSbWME4ULIoPCurov+QPin4WZjwpmLw2JV4O7hNL3Zx7rs" +
                        "19qO6fdNN/7E+FPitlvFuWrE4Z2mrKcG/ehLs+6f2ZbNdmml9h1+Zn6cFABQAUAcp448c+D/hp4T1zx3" +
                        "4+8R2nhLwf4ah/tDXfEWuSrBbW0W4Rgszd2ZgqqOWYgAEkCgEjyP4DftX/s8/tOQa5N8DPihZePX8Nsi" +
                        "a7YW8N7Y3tssjMiSPa6nBbTeWxUhZAm044NJO43Fo+h6YgoAKACgAoA+BvEf/BUL9hDwf8AFXXPgr4s/" +
                        "aBtPDXxG8NapN4M1/Sde0bxLaWlpqNvMYJI5dRn05bJVVxgyGfZ33Yr9iwPgDxficuhjqOCc6E4qcWpU" +
                        "23Fq6aip8+3Tlv5H41jvpBcH4XMZ4GtjVCvCThJOFRJSTs05uHJv15reZ96xSxTxRTwSrNBMqywzRMGR" +
                        "0YZDKRwQR0Nfj8otOz3P2OMk1dapklSUFABQAUAFAHxT/wUY+KvjL4J/sSftE/Er4fao+h+M9A0NbXQN" +
                        "btiVmsptSv7fSjcQsPuyxLcl427MAe1fqngjw9hc14rwWFxMealKd5Lo1FOVn5O1n5H5T448RYrKeE8d" +
                        "isNLlqxhaL6pyko3Xmr3XmfyE/8ErfiF4+8Wf8ABR79nC68U+ONY8S3Oq6tqkuqXHiDU728kuW/4RzUD" +
                        "mVrmRy54HLZr/Sj6QmTYPDcD45UqUIKMY25YpW9+O1lof5nfR3zrGYnjrAutWnNynK/NJu/7uW93qf3c" +
                        "a3rejeGtG1XxF4i1W20LQNCtptY1vW9YmjtrSztLaMzSzTSzFUSNEUszMQABk1/kGf7Dnzx8Ef2y/2Y/" +
                        "wBo7X9b8K/Bb4vad448SeHo2vNT0S3ivrO58hHWNpoU1GC3M8SsyhpItygkZPIpJplOLR9N0yQoAKACg" +
                        "AoA+XfjN+2p+y3+z34s0jwN8YvjLpngvxbrSR3NpoVxHe3c8UMudklz/Z8E4to22na85RT2NJtFKLZ9L" +
                        "6fqFhq1hZarpV7Dqel6nDHqGm6lp8iTQXEEyCSOSOSMlXR1IKsCQQcimSW6ACgAoAKACgAoAKACgCC6u" +
                        "raytri9vbhLSztEe6u7u6dY4ooo1Ls7s5AVVAJJJwBQB/J//wAFRv8AgqNc/HC51v8AZ7/Z71t7T4NWj" +
                        "tp/jnxzp7NHL4rljbDQQMMFdOUjk9Zzyf3eA+UpHRTp2Pya/Zu8AeJ/id8ePhN4L8I+Gp/Fusarr2lud" +
                        "F0+LzS9rBeRz3DyZwqxRxIzyOxCqoJJAFSi5PQ/pI/4OHp54f2J/hvHFM8Ud18T9EguUjYqJEHhbxFKF" +
                        "YDqNyK2D3APav7E+hXBPiqvdbYaf/pykfxj9NqbXClBJ74mH/puqfy0fsTW0F5+2Z+yPaXUK3FrdfE7w" +
                        "FbXMEoDI8b+KrFWVgeoIODX+gnirNx4XzJp2aw1b/03I/z08J4KXFOWJq6eJo/+nIn+iv4w8H+FviB4W" +
                        "1/wT420C18U+EfFNrNoniHw9rcKT2t5azoUeORHBBBB/DqOa/xMyzM8RgsRCvQm4VINOMk7NNbNM/3Az" +
                        "PLMPjcPOhXgp0ppqUWrpp7po/iJ/wCCof8AwS88U/sWeKbj4kfDe3uvFP7NHim68vR9Yk3z3Xhi6nf5N" +
                        "O1F+SYyTi3uD9/7j/vMF/8AVvwB8fsPxTh1hsS1DHwWq2VRL7UfP+aPTdabf5NfSC+j7iOFMQ8VhU54C" +
                        "b0e7pt/Yn5fyy67PXf4H/Zh/ae+LP7I/wAWdD+L/wAINcOm63pp+yazo13vfTtZ053VprG+hVl8yGTaO" +
                        "4ZWAdCrqrD9h4+4By7iTLp4PGQvB6pr4oy6Si+jX3NaO6bR+N+H/iBmXDWZQxuCnaa0afwzj1jJdU/vT" +
                        "s000mf3n/sVftq/Cb9t74TWnxF+HV2NN1/TRFp/xE+HeoSo+o6BqLoT5cmAvmQSbWME4ULIoPCurov+Q" +
                        "Pin4WZjwpmLw2JV4O7hNL3Zx7rs19qO6fdNN/7E+FPitlvFuWrE4Z2mrKcG/ehLs+6f2ZbNdmml9h1+Z" +
                        "n6cFABQB+X3/BXfwN42+Jf7IU/gP4eeHL3xd4u8T+KfDun6T4c8PwvPc3TCeSYgIn8KhC7MeFALEgDNT" +
                        "PYum9T4A/4JOfsJftc/s0/tMap8QvjJ8LpPAvgfVPCeqeGn1Ia94dvvNurm+sLqGF7fStQuZufILfMmA" +
                        "V5IOKmMWmXUmmj+kCtDEKACgAoAKAP87T/gol/yfX+1p/2PviP/ANOMlf7XeCn/ACSOW/8AXin/AOko/" +
                        "wARPG7/AJK/Mv8Ar/U/9KZ/dd+xNc3F5+xl+yPeXk73V3dfDHwDc3V1cuzySSP4VsWZmZiSWJOST1r/A" +
                        "CO8VYRjxRmSSslia3/pyR/r54UVJS4WyyUndvDUf/TcT6dr4I+/CgAoAKACgD84v+CuP/KOj9p7/sFaX" +
                        "/6kenV+4fRu/wCS3wH+KX/puZ+GfSV/5IfMP8Mf/TkD+SH/AIJHf8pF/wBmH/sK6p/6jmo1/o99JH/ki" +
                        "Mf/AIY/+nIH+bH0av8AkuMv/wAUv/Tcz+xT/gpXoniHxL+xB8efDnhPS7vW/Emv2ek6Joui6FFLPeXk9" +
                        "14hsIFgijgBd2k3bdoHOcV/jfLY/wBnIbn4mf8ABNX/AIJ6ftnfA79sD4NfF/4mfB+bwb8ONHi18+I9Z" +
                        "n13w3LJFFqHhfUbK3WWzs9RluTuuJogV8olTgsAASIjF3NZzTR/U1WpgFABQAUAFAH8j/7b37DX7Wv7T" +
                        "X7bf7S3jL4O/B+/8Y+F7XVtN0xfEl/faVpNnM9v4e0+Ix282u3dms3l4CsIi23GDjGKylFtnRGSSP6P/" +
                        "wBir4f+OfhT+yn8C/hx8StMbRfHPgzQbfQfEWkS3Vtem2lgd1WLzrOWeJwqbQNjkAcDpWkdjGT1PqGmS" +
                        "FABQAUAFABQAUAQXV1bWVtcXt7cJaWdoj3V3d3TrHFFFGpdndnICqoBJJOAKAP5P/8AgqN/wVGufjhc6" +
                        "3+z3+z3rb2nwatHbT/HPjnT2aOXxXLG2GggYYK6cpHJ6znk/u8B8pSOinTsfjZ8Lvhd48+NHjzw38M/h" +
                        "n4bn8V+NPFc40/R9H08DLHG55JHbCxxRqC8kjkKigsxAFQkaN2P7Uf2Af2AfAf7FPgPe/keK/jV4rgjX" +
                        "4g/EFYzhRkSf2fp/mANHaRsBk4DSsA7gYRE2jGxzTnc+Pf+DgvQ5tW/Ya8MX8W7Z4Y+Iega5c7FBGyTR" +
                        "tZ00biSMDddjn1wK/rb6GeLVPi2pF/boTX/AJNTl/7afyH9NPCOpwjTkvsYiD/8kqR/9uP5Lv2VPEcXg" +
                        "/8Aah/Zu8WzukUHhbx94P8AEc0lyGaNUsfENpckuEIJUBOcHNf6NeIeBeJ4fx1FbzoVY/fCSP8AN3w6x" +
                        "ywvEGArPaFelL7pxZ/pOV/hif7tnN+MPB/hb4geFtf8E+NtAtfFPhHxTazaJ4h8Pa3Ck9reWs6FHjkRw" +
                        "QQQfw6jmu7LMzxGCxEK9CbhUg04yTs01s0zhzPLMPjcPOhXgp0ppqUWrpp7po/iJ/4Kh/8ABLzxT+xZ4" +
                        "puPiR8N7e68U/s0eKbry9H1iTfPdeGLqd/k07UX5JjJOLe4P3/uP+8wX/1b8AfH7D8U4dYbEtQx8Fqtl" +
                        "US+1Hz/AJo9N1pt/k19IL6PuI4UxDxWFTngJvR7um39ifl/LLrs9d/gf9mH9p74s/sj/FnQ/i/8INcOm" +
                        "63pp+yazo13vfTtZ053VprG+hVl8yGTaO4ZWAdCrqrD9h4+4By7iTLp4PGQvB6pr4oy6Si+jX3NaO6bR" +
                        "+N+H/iBmXDWZQxuCnaa0afwzj1jJdU/vTs000mf3n/sVftq/Cb9t74TWnxF+HV2NN1/TRFp/wARPh3qE" +
                        "qPqOgai6E+XJgL5kEm1jBOFCyKDwrq6L/kD4p+FmY8KZi8NiVeDu4TS92ce67Nfajun3TTf+xPhT4rZb" +
                        "xblqxOGdpqynBv3oS7Pun9mWzXZppfYdfmZ+nBQB+e3/BUH9pzx/wDslfsgeN/iv8LVtovH0t7pfg/w5" +
                        "q2qwpcw6dLqdz5b3XkShkleONW8tXBTeQWDKCrftHgDwFg+I+JaWExd/Y2lKSTs5cq+G61SbtdrW17NP" +
                        "Vfin0geP8bw3wzWxmEt7a8YxbV1HmfxWejaV7J6XtdNaP8AGv8A4I3ft5ftb/tI/tcaj8PPjd8aL7x94" +
                        "Nh8H6z4ii0LULLSLeMXtte6fFFLusbSB8qszjG7HPSv6d+k74QcN5Fw3HE4HCqlVdWMbpyejUrrWTXRH" +
                        "8u/Rd8YuJc94llhsfipVaSozlZqK1Tik9Ip9WeAf8FIf+CkP7bXwW/ba+Pnww+GHx81Dwl4D8Jahp9n4" +
                        "d8O2en6HNHaxzaHZXTqr3VlLIcySs3zMetfZeB3gdwpmvCmDxWKwcalapGTlJymr2nJdJJbJdD4zx08d" +
                        "OLMq4sxmEwmMlTo05RUYqMHa8IvrFvdvqfEH/D3H/gov/0c9qv/AIK/Dn/yur9X/wCJbuCP+gCP/gVT/" +
                        "wCTPyX/AImV44/6GEv/AAGn/wDIHoHw/wD+C1v/AAUP8DatDf6h8YbT4jacj+dP4b+IHh/RZrSY8DDS6" +
                        "Zb2N0o46JOv514+c/RX4KxdNxjhnSl/NCc018pOUfviz2cl+lbxvg6ilLFKtH+WcINP5xUZfdJH7sfsy" +
                        "/8ABVTwL/wUE8K3XwEvPHGo/sZ/tRa3GF8C+J/DsthqGmajqMaEILJtWgeOQu337GdA7KcRTM43L/I3H" +
                        "n0esXwZiFmEaUcwy+PxxknGUY9ebld1bpOLsnrKKWj/AK/4B+kTg+NMO8ulWll+YSXuSi4yjKXTl5lZ3" +
                        "605K7WkZN6r8bv2o/21f+Cs37I3xj8SfBj4rftGanba1oxF5o+tWWleHjYazpcrstvf2bvpoLQyhD1AZ" +
                        "WDIwDKwH9O+H/hX4c8SZZTxuEwMXCWjTlO8ZLeMvf3X3NWa0aP5d8QvFbxI4azSpgcZjpKcdU1GFpRe0" +
                        "o+5s/vTunqmfkR488deLPid4z8T/EPx3rL+IfGXjO9uPEfifXblIY5Lu9upDLLKywJGgLMScKoHtX9JZ" +
                        "RlGGwGFp4bDx5KVNKMVrolstbs/mjOM3xOYYqpicRLnq1JOUnpq3q3pZfcfZvg7/gqH+3p8P/CHhXwH4" +
                        "P8A2itS0Twj4J02x8I+FtFg03QJEs9O021SztoFaawd2EcUaqCzEnHJJr8vzPwA4PxuJqYitgYyqVJOU" +
                        "nzT1lJ3b0lbVu+h+pZX9ILjHBYanh6GOlGlTioxXLDSMVZLWN9Eran9bn/BI79qr4s/tb/slH4hfGwx3" +
                        "fjPwn4j1P4dzeLIbWOyGt2tjY2N8l88UCRwh83jQuYlCFoycA5Ff5w/SQ8PMu4b4j+rYG6pTpxny3vyN" +
                        "uS5bu7t7t1fWz9D/Sf6NXiLmXEvDf1nH2dWnUlDmtbnSUXzWVlf3nF2Vrx73Pz2/bz/AOC8Gn/DzxDrn" +
                        "wo/Y70jT/Gmt6O8ml6/8afE6vc6PDcKpR00q0idPtLRsf8Aj4lYRblIWOVCHr9o8IPohzxtGGLzqUqcJ" +
                        "axpR0k1/flry3/lXvWesovQ/FPGL6YMMDXng8ljGpOOkqstYp/3I6c1v5n7t1pGS1Pwl8Vf8FP/ANv7x" +
                        "jqcurar+1R4qsbmUs5g8K3UOh2o3Y4W30aK1iAGOPl/rX9c5d4B8G4WnyQy+k1/eTm/vk2/xP5AzH6QH" +
                        "GeKqc88xqp/3WoL7oKK/A9++A3/AAWv/bo+DmrWJ8VePYfjn4RidBfeF/ihawSzvF91/K1KzSG7SQj7r" +
                        "SPIoIBKHkH47jD6K3CWZ037Ki8NU6Spt2+cHeNvRJ+aPtODvpXcX5XUXtqyxNLrGolf5TVpJ+ra8mf1j" +
                        "fsO/t7/AAZ/bq8AXPib4fSv4c8a+HBFD4/+F+uTRvqWkyyj5ZFZAouLWQgiOdVAOCGVGBUf50+LHg9mn" +
                        "COMVLE+/Sn8FRL3ZeXlJdYv5NrU/wBHfCTxkyvi/BOrhvcqwtz02/ei+/8Aei+kkvVJ6HB/8Fcf+UdH7" +
                        "T3/AGCtL/8AUj06vY+jd/yW+A/xS/8ATczx/pK/8kPmH+GP/pyB/JD/AMEjv+Ui/wCzD/2FdU/9RzUa/" +
                        "wBHvpI/8kRj/wDDH/05A/zY+jV/yXGX/wCKX/puZ/ab+3J8dPEn7NX7Jvxv+N3g6xt9Q8V+BdJW58OQa" +
                        "srPbLe3t7BpsMsqKQXWJrgSFMjdtxkZzX+WvhNwlQz3iPCYGs2qdWXvW3sk5NLte1r9L3P9VPFzi+vkP" +
                        "DeLx9FJ1KUPdvtdtRTfezd7dbWP5tv+CYH/AAUa/bS+P37eXwS+GPxb+Ol74v8AAHjB/FE3iHwvNpuh2" +
                        "tvObPwhq2pwDNjZQugjngRwFYfdA6cV/cvj74IcLZNwhi8Vg8Iqdan7PllzTbV6sIveTTum1r3P4T+j9" +
                        "45cVZzxjhMJjMY6lGp7TmjywSdqU5LaKas0np2P6Pv2zP2z/hF+xH8KZPiX8UbmS/vtSkbSfA3gXRmj/" +
                        "tPXdQVQ5igEhCpHGpDTTN8qLjqzIrfw94X+F2ZcV5j9VwislrOb+GEe77t7JLVvyTa/ujxS8U8s4Ty76" +
                        "1i2227QgvinLsuyW8m9Eu7aT/kp+PX/AAXC/bh+Lup3qeBvFVl8BfCMjsLLw/8ADuzt5r0RchfP1LUo5" +
                        "p2kAPLQ+Sp/uiv9HeD/AKJ/CeW017em8VV6ym2lfyhFpW8nzPzP82uMfpa8W5nUf1eosLS6Rgk3bznJN" +
                        "381yryPjiH/AIKDftzQakdVT9rf4hNdFBD5U3ivWJLbCsG/495JzDnjk7MkcZwTX6bLwZ4SdPk/s2hb/" +
                        "r3G/wB9r/ifl8fGri5VOf8AtLEX/wCvkrfde34H3p+zt/wXe/bE+FWp6dZ/F6fTv2hPBMbpFf2fiS1tt" +
                        "K1uO3HX7NqOlQxqX77riGbPTjqPyDjb6InDOY05SwalhavRxblC/nGTen+GUT9i4I+mDxRl1SMca44ul" +
                        "1Ukozt5Tilr/ijI/rI/ZO/a0+EP7Zfwns/i18H9Snl0wTtoniPw7rcSwano2pxxJM9pdRozruCyKyujM" +
                        "jKQQx5A/wA6PEXw5zLhfMXg8ZFc1rxktYyjspRfyas0mnuj/R/w48SMs4py1YzBSfLe0ovSUZbuMlqtm" +
                        "ndNprZn82f/AAVJ/wCCpP7YXwy/bC+JHwY+DHxIPwr8CfCs6foVpaaFp+l3NxqNxc6XbajNdXU2o21w2" +
                        "7dcFERCqhVHBYkn+5vo/fR+4Zx/DNDG42h7etX5m25SSilJxSSi12u27tt9rI/hL6Qv0heJ8v4nr4HA1" +
                        "/YUaHKklGLcm4qTbck+9klZJLvdn9Ef7BPxL8X/ABU/Yx/Z/wDih8TPETeIfGHirw7HrnirxLfrbwNcT" +
                        "edKGlcQJFGvyqM4UDiv4p8YMiw2X8UYzC4WHJShUtGKu7Ky01uz+3PBzPsVmPCuCxeKnz1Z07yk7K7u9" +
                        "dLI/ED9uH/gvhqWg+Ktc+G37GOj6bqlhoksmmah8b/FkLXsF5NGSrtpFnuRGiVh8txPuEnJWPbtdv6v8" +
                        "J/oe062Hhis7lKLkrqlF2aX9+W9+8Y2a6yvdL+TPFv6ZFSjiJ4XI4xlGLs60ldN/wByO1u0pXT6RtZv8" +
                        "SfGP/BSr9vbxzdXV5rX7V/jOylvNvnJ4O1aTw7ENrBhsi8PiySPkc7FGRweK/qvLPAvg/CRUYZdRaX80" +
                        "ef8Z8zfzP5OzTx44yxknKpmVZN/yy5F8lDlS+R2fw0/4Kwf8FAfhfqEF5pn7SGs+K7VGV7rSPiWLbxHb" +
                        "3CKANjNq0c0yA7eTFIjdeck15ee/R14NzCDjLAwg+9O8Gv/AAFpP5pryPVyH6R3GmXzUo46dRdqlqif/" +
                        "gSbXyafmf0W/wDBPT/gtV4L/aj8U+Hvgp8dfC9v8LPjT4jkXTPCes+HWmk8N6/dlSRAgunkmsrhyMRxS" +
                        "PIrngSBiqH+JvGn6LGK4fw88dgKjrYWCvJSt7SC76WUorq0k1/LZNn9weCf0rMLxDiIYHMKaoYubtFxv" +
                        "7Ob7a3cJPom5J/zXaR+7FfyMf18FAEF1dW1lbXF7e3CWlnaI91d3d06xxRRRqXZ3ZyAqqASSTgCgD+T/" +
                        "wD4Kjf8FRrn44XOt/s9/s9629p8GrR20/xz4509mjl8VyxthoIGGCunKRyes55P7vAfKUjop07H42fC7" +
                        "4XePPjR488N/DP4Z+G5/FfjTxXONP0fR9PAyxxueSR2wscUagvJI5CooLMQBUJGjdj+1H9gH9gHwH+xT" +
                        "4D3v5Hiv41eK4I1+IPxBWM4UZEn9n6f5gDR2kbAZOA0rAO4GERNoxsc053P0JqiD83f+CuXw5m+Jf8Aw" +
                        "T0/aN0yzg87UfDGm2XxGs2AJMaeHdVttWumwP8Ap1gmHtnNfuX0bs7WA40wMpP3ZycH/wBvxcV/5M0fh" +
                        "X0lcjeP4Jx0Yq8oRU1/25JSf/kqZ/AhbXM9ncW93azNb3Vq6XNtPESrpIjBlZSOhBGRX+xM4KUWmrpn+" +
                        "NNObjJNOzR/pe/Az4lWPxk+C/wn+LOnSJJafEjw7o3jVPJ6I2pafFdOmMDBRnKkEZBGDX+EvFuRTyvNM" +
                        "Tg5b0akof8AgMmr/Pc/3p4Rz6GaZVhsZHatTjP/AMCinb5bHqlfPH0RzfjDwf4W+IHhbX/BPjbQLXxT4" +
                        "R8U2s2ieIfD2twpPa3lrOhR45EcEEEH8Oo5ruyzM8RgsRCvQm4VINOMk7NNbNM4czyzD43DzoV4KdKaa" +
                        "lFq6ae6aP4if+Cof/BLzxT+xZ4puPiR8N7e68U/s0eKbry9H1iTfPdeGLqd/k07UX5JjJOLe4P3/uP+8" +
                        "wX/ANW/AHx+w/FOHWGxLUMfBarZVEvtR8/5o9N1pt/k19IL6PuI4UxDxWFTngJvR7um39ifl/LLrs9d/" +
                        "gf9mH9p74s/sj/FnQ/i/wDCDXDput6afsms6Nd7307WdOd1aaxvoVZfMhk2juGVgHQq6qw/YePuAcu4k" +
                        "y6eDxkLweqa+KMukovo19zWjum0fjfh/wCIGZcNZlDG4KdprRp/DOPWMl1T+9OzTTSZ/fZ+xv8AtX+BP" +
                        "2zvgP4Z+N3gS2l0hNQkm0HxZ4Wv3WS40bWrMIbm0eRAFkAEiSRyADdG6MQpJUf47eJ3h3jOF83qYHENS" +
                        "tZxktpQe0rdNmmujTV2tX/sp4XeI2D4qyenj8OnG94yi94zW8b9d00+qadk9F9TV+fH6GfjP/wXi/5R/" +
                        "eIf+xp8M/8ApTJX9P8A0Q/+Syh/16qfkj+W/phf8kXP/r7T/Nn4f/8ABv8Af8n16t/2IXiD/wBOOl1/W" +
                        "H0yf+SRj/1/h/6TM/kr6GH/ACV8v+vE/wD0qB8uf8Fcf+Ui/wC09/2FdL/9RzTq+/8Ao3f8kRgP8Mv/A" +
                        "E5M/PvpK/8AJcZh/ij/AOm4H9D/APwTT/YD/Y2+Lf7Dn7P/AMRfiT+z34f8YeN/E+najda/4k1eGdrm6" +
                        "ki12+tkZykqjISNVHHQV/Ffjt4xcT5bxZjcNhcbUp0oSjyxTVleEX27s/trwG8GuF8y4RwWJxWCp1K04" +
                        "y5pNO7tOS79kj1z4+/8ERv2H/i74dv4PAfgqb4EeNTG39k+LPAF3eS2yzADYLjTr+eW3kjBHzCMRuc/f" +
                        "HFfN8HfSt4sy2uniKqxNLrGaV7eU0lJP15l5H0vGX0TeEszoNYek8LV6Sg3a/nCTcWvTlfmfx9/tO/s3" +
                        "fFf9jH46a38JPiEDp3inwtJBr3hjxTobyx2+pWEkhez1Kxl+VtjGM4IwySKyHDIQP8AS7gLjnLuKMohj" +
                        "MNrTndSi7Xi/tQkvn6NNNaNH+ZHH/AmZcK5vPB4nSpCzjJXtKP2ZxfbT1TTT1TP61P2ENd+Av8AwVV/Z" +
                        "d8B+Kv2ovhhovxW+MfwKmufhn4s1HxHATcNK8cE8d6pidG23sCxtJ/D5yybQBxX+cni7g848POIK1LKs" +
                        "ROhhcSlUiovTqnH/tx3S68rjc/0k8H8Zk3iLw9RrZth4V8Vhm6cnJa9GpafzqzfTmUrH8nv7b/g3wv8O" +
                        "/2v/wBpLwL4J0WHw34R8JeMdd0Hw3oOnArBZ2dtfPHFFGGJIVVGBk1/op4UZpiMbw1gcRXm51Z0YOTe7" +
                        "bSu2f5xeLWV4fA8TY/D0IKFKnWnGMVskm7JH9fP7I//AATl/Ye8cfspfsx+NfFv7NfhvXfFXi/4e+C/F" +
                        "HibXL6G4M95qGoeG7O7uJ5CswBeSSRmbA6mv81fEjxu4swnEWPoUcdUjTp16sYpNWUY1JJJadErH+mfh" +
                        "r4G8JYvhzL69bAU5VKmHpSk2ndylTi23ru27ngn/BZ7476N+xz+yJ4I/Zi+AWkWXwyPxra/8KwaV4Kgi" +
                        "0+LTPClgscuqLDHahQjXkl3HE7EZdXmOSxJH2P0XeEKvE/EtXNMwk631e0rzbk5VHfku3vyqLaXRqPQ+" +
                        "N+lPxhS4X4Zo5Vl0Y0frPNG0EoqNONnOyW3M5JN9U5ddT+dX/gnh+wj4u/bx+NEngix1OTwp8OPB0MXi" +
                        "D4q+O4YRM9jZSuyQW9ujkI11dujLEGOFVXkIYIVb+2PGrxdw3CGV+3lHnr1Hy04Xtd9W+vLHd23bS0vd" +
                        "fxB4JeD+J4xzX2EZclCmuapO17Lol05pPRX2Sb1tZ/2P/C7/glx+wV8KPDkHh7S/wBmvw34vZYfsl7r/" +
                        "wAUbGHxNqN05Xa8rS6ws4jdjz+5WNVP3VUcV/mPxB9IDjDMa7qTx1SnrdRpt04rytG11/ibb6tn+oXD3" +
                        "0e+DstoKlDAU6mlnKolUk/O8r2f+FJLokfnz+3v/wAEP/gx8QfA3iP4g/sk+Gk+F/xd0SGXWIPh7ps8p" +
                        "8P+IREpke2jhuGcWdy4GIWiKxFsK6Dd5i/s3g99K/NMFi4YfOKntsNJ252vfh5tr4or7V7ytqm7Wf4t4" +
                        "x/RLyrG4Spicnp+xxMVfkT9yduiT+GT+za0b6NK/Mv5iP2Sv2j/ABr+x9+0R4D+M3htrmCfwlfLYeNfD" +
                        "aMYTqmiSyrFqOnTJJgZkjB2bx8kqo+NyDH97+I/A+F4myStgqtmpxvCW/LNfDJej3tvFtbM/gDw246xf" +
                        "DGd0cdSunTlacduaD+OL9VtfaST3R/aP/wVQ1/SfFf/AATI/aB8UaBeLqOheJPD2g6/ouoRAhZ7S813T" +
                        "LiGQbgDhkcEZr/Lf6PmDqYfj3BUqitOFScWuzUJpr7z/VL6RGMpYngDG1abvCdOEk+6c4NP7j+Tn/gkd" +
                        "/ykX/Zh/wCwrqn/AKjmo1/or9JH/kiMf/hj/wCnIH+cX0av+S4y/wDxS/8ATcz+t7/grj/yjo/ae/7BW" +
                        "l/+pHp1f5w/Ru/5LfAf4pf+m5n+k/0lf+SHzD/DH/05A/lK/wCCLv8Aykt/Zs/7nH/1Adcr/Q76Uf8Ay" +
                        "QmO/wC4X/p6mf50fRX/AOS9wH/cX/0zUPqP/g4X1/xNefti/Dzw5qU8o8M6F4C07UPDFi4YQCS/1nUxd" +
                        "TpngvI1uiMR2jUdq+A+hdg6EeGK9WKXtJV5KT66Rhyr5XbXqz9C+mxja8uKKFKTfs40IuK6e9OfM/V2S" +
                        "fojzD/glZ4Q/wCCX+v3Or3X7ani8RfFBb5U8H+FfiVJdaR4LWyRUKzNe2cqxSzFywdLySOMLjCPyw9/6" +
                        "QmZcf0YxWR0v9n5felTtKrftytXSts4Ju/VbHz/ANHfLPD+tKTz2r/tHN7sal40rd+ZOzd91NqNuj3P6" +
                        "sNL/Yl/YB8aeE7aTw9+zB8LPEHhfVYVWw8QeGPC3hqXz4geHi1Cxg8wnj76y5PrX+eWI8VeMsLiWqmYY" +
                        "mFSL1jKpU0fnFu3yaP9FcP4T8GYvDJ08vws6clpKNOnqvKSV/mmflD+2F/wQE+GnjwL4n/Y98QW/wAIf" +
                        "E0sxbU/APj681K78MzxuSxe3uUivby1dST8pEqEYCiPHP8ARPhn9MbH4P8AdZzB16dtJwUVUXqrxjJef" +
                        "uvu2fzl4nfQzwGM/e5LNYepfWE3J036O0pRfl7y7JH37/wS9/YM1n9gz4LeJvCPjLxjaeMviD8QdWXxV" +
                        "4ruPDCzjSbMQWqWkFtavdxwyyhQGZpXjTJbGwbct+OeP3i/S4wzSnWo0nTo0o8sea3M7u7bs2l0SSb23" +
                        "10/Zvo++DtXg7KqlGvVVSvVlzS5b8qsrJRuk31bbSve1tNf5M/+CuP/ACkX/ae/7Cul/wDqOadX+i/0b" +
                        "v8AkiMB/hl/6cmf5v8A0lf+S4zD/FH/ANNwP6Ef7e8TeGv+Df8Ah1TwjczWesH4ZRaW9xYgmVbG/wBXW" +
                        "wvsbeQDazShm7DJ7V/GP1OhX8ZHCsk4/Wb691G8f/Jkj+1PrmIoeDCnRbUvq1tO0pWl/wCStn8kHwXsf" +
                        "hNqXxV8C2Px217VvDPwhuL+JfH2ueB7SK91WCwALN9nimZVyzAKz4YopLhJCoRv9H+Ka2ZU8urSwEIzx" +
                        "Kj7im7Rb82vvtpd6NpO6/zY4Vo5bUzGjHMJyhhnL33BXko+Sf3X1stUpNWf9sP7Jf7O/wDwSA8e+FrSx" +
                        "/Z28A/DL4xiKAS3cXi63s/E/iIKAu6W6tvFSz3sBYjOGiRRyFAHFf5W+I3GviXg8Q5ZlWxOH105W6cPR" +
                        "OnaD+9vuz/Vzw24I8MsZh1HLaOGxGmvMlUn6yVS819yXZHZ/Hn/AIJD/sJ/HPRL+0i+DFh8IfEkyMul+" +
                        "L/gxFHoEtpIRw32K1UWMq5xlZIDx0KnmvL4Q+knxdlNVSeKlXh1jV99P/t5++vlL1uepxj9Gfg/N6Uor" +
                        "Cxw9TpKl7jX/bq9x/OPpY/Lr9l3/ggv8Vfg3+1X8PPir4++M3h3W/hZ8JPENh8RPDQ8KJqi6/qtzot7H" +
                        "qFjHc2t3bLb2qNLEpm2XMx2gqv3ty/v/iB9L/Ls04er4TD4WpHEV6bhLm5eSKmnGTTT5paN2vGOur2s/" +
                        "wCffD76HWY5XxFQxeIxVOWHoVFOPLzc8nBqUU01yxV0r2lLTRb3X9PVfwOf3+FAHin7RXwS0f8AaM+C3" +
                        "j/4L674g1HwtpvjuyOly694YneC6t3WRZkJCsoliLIBLCx2yISpxnITQ4uzP4W/2oP2X/il+yZ8UtU+F" +
                        "3xR0vybmHde+G/ElkrnTta04uVju7SRgMqcYZT8yNlWAIrFqx1Rlc9v/wCCeH7abfsU/GibxdqnhaDxT" +
                        "4E8a28Phfx/HDbQNrFrYrP5on0+4kAZXjb5nh3BJgAGwyo6OLsKcbo/ts+HfxE8FfFjwV4c+Ivw68R23" +
                        "ivwZ4rtk1TQtd0t90U0TZBBBAZHRgVdGAZGBVgGBFbHK0dpQBzfjHwpovjzwh4q8D+JLb7Z4d8Z6bfeF" +
                        "Nfs/l/e2Wo2r2c6fMGHzRyEcg13ZZmNXB4mnXpO06clJPs4u6/FHDmmXUsZhqmHqq8KkXGS7qSs/wAGf" +
                        "5p3xa+G3iD4OfFH4h/CjxVEYvEXw51nUvBer7kaMSTaddvamRA2fkk2b0OSCpBBIOa/3W4cz2jmeX0MX" +
                        "S+CtCM16SV7eq2fmf4NcSZFWyvMK+DrL36M5QfrFtX9HuvI/sE/4IIftF2vxP8A2TdS+CWqagJfF37Pm" +
                        "qTadb2spzI/h7XJpdTspcsctsnNzDgDCqiDuBX+aP0wuCZYDiOOOhH93iop3/vwSjJfNcr822f6cfQ44" +
                        "4jmHDcsBOX73CSat/cm3KL+UuZeSSP3Rr+ST+uwoA/lQ/4LD/8ABV7S/F9j4u/ZB/Zu1W31fwxdb9A+N" +
                        "PxQtPLuIL7Y+JNK0xzuUxBlxPcL94jZGduWb/Q36M30dqmGnTznM4uNRa0qb0a7Tn5/yx6bvWyX+dX0n" +
                        "fpG08VCrkuWSUqb92rUWqfeEPL+aXXZaXb/AJuvB/g/xT8QPFOgeCfBOgXXinxd4puodE8PeHtEhee6v" +
                        "LqdwiRxogJJJP4dTxX9x5nmeHwWHnXrzUKcE3KTdkkt22fwrlmWYjG4iFChBzqzaUYpXbb2SR/fF/wS+" +
                        "/Y71/8AYn/Za0z4Y+M9Th1Dx/4s1a7+J/j2DTH820sdS1GztLEWkMg4kEMFlEruPlZ9xXK4J/x68ffE2" +
                        "jxVxBLFUItUYRVOF9G4xcnzNdLuTaW6Vr6n+yP0fvDCtwnw9HC15J1qk3UnbVKUlFcqfWyik3s3e2h+i" +
                        "Vfih+3H4z/8F4v+Uf3iH/safDP/AKUyV/T/ANEP/ksof9eqn5I/lv6YX/JFz/6+0/zZ+H//AAb/AH/J9" +
                        "erf9iF4g/8ATjpdf1h9Mn/kkY/9f4f+kzP5K+hh/wAlfL/rxP8A9KgfLn/BXH/lIv8AtPf9hXS//Uc06" +
                        "vv/AKN3/JEYD/DL/wBOTPz76Sv/ACXGYf4o/wDpuB/W9/wSO/5R0fsw/wDYK1T/ANSPUa/zh+kj/wAlv" +
                        "j/8Uf8A03A/0n+jV/yQ+X/4Zf8ApyZ+jtfh5+5n81X/AAcb/DrRLj4cfs5fFpLWOLxHpOt6n8Op71FAm" +
                        "nstQsP7TjRyB8yxSWTlAT8pkbH3jX91fQhzurHHY7B3fJKEZ26JxfK381JX72XY/g76cmR0pYHA4yy9p" +
                        "Gcqd+rUlzJfJxdu133PFP8Ag3B8RanB8RP2oPCSzE6Nqei+HfEU9uxJAubG+u7ZGUdBlLtgfXA9K+p+n" +
                        "DgqbwWX1re8pzj8mov/ANtR8p9BjHVFjswo392UIS+ackvwkz8Zf+CgWoQan+3J+1xc2wYRx/ETxbp7e" +
                        "aAD5lprVxaP0J43RnHtX9Q+DVF0+E8tT/6B6b++Cf6n8teNFZVOLsza/wCgiqvum0/yP7t/2Hf+TKv2P" +
                        "/8Asl3w/wD/AFE7Cv8AIvxY/wCSqzP/ALCa3/pyR/r/AOEn/JKZZ/2DUf8A03E/mm/4OMHvD+0l8B43M" +
                        "n9nr4Hke1DbvK85tevBLt7btoTdjtj2r+6/oSKP9hYx/a9t+HJG36/ifwb9OFy/t7Br7Psfx55X/T8D8" +
                        "Ovhv/wvHyNW/wCFQ/8ACV/Zt8P9u/8ACt/7X2b8P5Xn/wBl8Zxu27vfHev6xzz+ybx+ueyvrb2nL87c3" +
                        "42P5IyL+17S+pe1tpf2fN8r8v4XPTP+M1f+qo/+XZXg/wDGK/8AUN/5TPf/AOMr/wCon/yoH/Gav/VUf" +
                        "/Lso/4xX/qG/wDKYf8AGV/9RP8A5UPNLn4L/HO8uJ7y8+E/iy6u7p3ubq6udC1h5JJHYszMzQEliTkk9" +
                        "a96HFOUxiksTSSX9+P+Z4NThXN5ScpYaq2/7kv8j+u74+R63b/8EErOz8R21xZ61p3wt8CaXfWWqxPBc" +
                        "wm1vtItljkjkVWVkVApDDPHPNf5s8HSpPxgcqTTg8TWaa1Tupu6fmf6XcZxqx8HFGqmprDUU01Zqzpqz" +
                        "Xkfzrf8Ejv+Ui/7MP8A2FdU/wDUc1Gv7Y+kj/yRGP8A8Mf/AE5A/iH6NX/JcZf/AIpf+m5n9b3/AAVx/" +
                        "wCUdH7T3/YK0v8A9SPTq/zh+jd/yW+A/wAUv/Tcz/Sf6Sv/ACQ+Yf4Y/wDpyB/KV/wRd/5SW/s2f9zj/" +
                        "wCoDrlf6HfSj/5ITHf9wv8A09TP86Por/8AJe4D/uL/AOmah/WR/wAFA/8Agnf8L/29fA2laf4g1F/BH" +
                        "xQ8FLcN8PviVpsCzvbC4AMlpeQFk+0WjsqsV3KyMMowy4f/ADp8GvGrMOD8XKVOPtMPUtz027XttKL+z" +
                        "JbXs01o07K3+j/jR4I5fxjg4xqS9niKd+Sole194yWnNF72umnqmrtP+Sn9oT/gkN+3N+z7NqN5P8J5v" +
                        "iv4QsS8kfjL4NM+uRPEg3F3sokW/iCryxe3CjnDEAmv9HOC/pKcJZyoxWJVCq/s1fc1/wAXwPytK/kf5" +
                        "tca/Rn4uyVyk8M69Jfbpe/p/hXvrzvG3mfFHw7+Mnx2/Z58RXlx8MviN4l+EPiO3lEWsW3hrUNQ0mR5I" +
                        "Tjy7uCN4xIAeCkqkeor9UzvhjKM6oJYqhTrwa05oxlv1i9beqZ+U5HxRnGSV28LXqYeaevLKUduklpf0" +
                        "aP2B/Z2/wCC/P7VHw5u9O0v47aFpPx98JoUhvtRaCHQPESRj5d0dzpsYtXKjkiS1LOQMuuSa/mnjX6HP" +
                        "D2OjKeAnLC1Oiu5w+ak+ZfKVl2ex/TfBH0y+IsDKMMwhHFU+rsoT+TiuV/ON33W5/Uv+yd+158F/wBs3" +
                        "4Yw/E/4Na1JcWtvINM8UeFdcSODWNEviu/7PewRvIqll+ZHRmRx91jggf59+IvhrmnC+PeFxsEm1eMlr" +
                        "Ga7xdl800muq2P9C/DfxMyrinL1i8FNtJ2lF6Sg+0ld/JptPo9z+KP/AIK4/wDKRf8Aae/7Cul/+o5p1" +
                        "f6ofRu/5IjAf4Zf+nJn+Uv0lf8AkuMw/wAUf/TcD+uz/gnF4b0Hxj/wTc/Zz8JeKdJg17wz4n8FN4f8Q" +
                        "6HqcYltryyvHuLeeGVG4ZJEcqw9DX+bfjhjq2F45x1alJxqQrc0Wt01ZprzTP8ASzwMwNHFcCYGjWipU" +
                        "50eWSezTumn5NH4U/tg/wDBAX4r+GNd1vxd+yBq9t8RPBF3JJfWfwt8V3sNhr+nK7bvs9vd3pS2u4052" +
                        "tLJFJjAIkbLH+uPDP6Y2XYijCjnMXSqrR1IpuEvNxV5Rb7JSXXRaH8heJ30M8xw9adbJZKtReqpyajOP" +
                        "kpO0ZJd24vpq9T8MfiZ8EPjx+zx4ggs/in8NPEfwn12znH9m3niPT73Tg80ZLK9rcsqpLjaSrxORxkGv" +
                        "61yHizKM6ouWEr068GtVGSlp/eW69Gj+Rc/4SzjJK6ji8PUoTT0couOv917P1TZ9d/Az/grN+3h8BmsL" +
                        "XR/jfe/EHw5Y4X/AIRT4wr/AMJJbSRrwsf2i9b7bGigYVYrlABwOK/NeLfo58IZxdzwipTf2qXuP1svc" +
                        "b9Ys/TOEfpIcYZPyqGLdWmvs1f3i9Lv30vSSP6LP2D/APgtt8K/2nPFPh34QfGjwsnwX+LniSRNK8N6n" +
                        "a3X2jwzrV65wkEUtxtltJ5SdsUUu9XbCiUuyof4m8XvoqZhkGHnjMDU+sYaCvJWtUgu7S0klu2rNLXls" +
                        "mz+4PB76WOXZ/iIYLHU/q+Jm7Rd705vok3rFvZJ3TenNdpH7mV/JZ/XIUAFAHzH+1h+yf8AC39r/wCFt" +
                        "/8ADb4k2Hk3MPmX3gzxnYxodR0LUSm1bi3ZsZU4AliJ2yLwcEKypq5UZWP4jP2oP2X/AIpfsmfFLVPhd" +
                        "8UdL8m5h3XvhvxJZK507WtOLlY7u0kYDKnGGU/MjZVgCKxasdMZXPpj/gnn/wAFDPGv7F3jUaRq5ufFf" +
                        "wH8V3KSeN/BEb7pbOVsRnUdOEhCpcIoG9MhZlAViCEdHGViZwuf2h/Dv4ieCvix4K8OfEX4deI7bxX4M" +
                        "8V2yapoWu6W+6KaJsggggMjowKujAMjAqwDAitjmaO0oA/j3/4L/fsq3Hw/+OXhf9qDw1pZXwh8a7ePw" +
                        "942ubZP3Vt4o0m2WJGfaoC/a7ONCvUs8MrHrX+mH0OPEKOMymplVWX73Dvmh505O/8A5LJu/ZSij/Mb6" +
                        "Zvh3LBZvTzWlH91iVyz8qkVb/yaKVu7jJn5wf8ABOD9rq4/Yy/ak8F/E6/mmb4ea2G8DfFjTrTcxl0HU" +
                        "JE8yZUH3pLWVI7hAOW2bMgMa/cPHDw2jxRw/VwsUvbx9+m3/PHZekleL7Xv0PwzwM8S5cLcQ0sVJv2Ev" +
                        "cqJfyS3du8XaS72t1P9BjStV0zXdL03W9F1CHVtG1m3h1XSdV02VJre5triMTRSxSRkq6OjBlYHBByK/" +
                        "wAZcRh6lGpKnOLjKLaaejTWjTXRpn+02HxFOtTjUpyUoySaa1TT1TT6prY/lu/4K5/8Fc/7U/4Sf9lX9" +
                        "lXxP/xK/wB9oHxg+MGgTf8AH11im0rSpoj/AKrqtxcKfn5RDs3M/wDoD9G76N3s/Z5tm1P3tHSpNbdpz" +
                        "XfrGL23etkv89vpLfSW9p7TKMoqe7rGrVi9+8IPt0lJb7LS7f8ANX4P8H+KfiB4p0DwT4J0C68U+LvFN" +
                        "1Donh7w9okLz3V5dTuESONEBJJJ/DqeK/unM8zw+Cw869eahTgm5Sbsklu2z+D8syzEY3EQoUIOdWbSj" +
                        "FK7beySP7dv+CXn/BLzwt+xZ4Wt/iR8SLe18U/tL+KbXy9Y1iPZPa+GLWdPn07Tn5BkIOLi4H3/ALifu" +
                        "8l/8pPH7x+xHFOIeGwzcMBB6LZ1GvtS8v5Y9N3rt/rL9H36PuH4Uw6xWKSnj5rV7qmn9iHn/NLrstN/1" +
                        "+r+aj+mgoA/Gf8A4Lxf8o/vEP8A2NPhn/0pkr+n/oh/8llD/r1U/JH8t/TC/wCSLn/19p/mz8P/APg3+" +
                        "/5Pr1b/ALELxB/6cdLr+sPpk/8AJIx/6/w/9JmfyV9DD/kr5f8AXif/AKVA+XP+CuP/ACkX/ae/7Cul/" +
                        "wDqOadX3/0bv+SIwH+GX/pyZ+ffSV/5LjMP8Uf/AE3A/re/4JHf8o6P2Yf+wVqn/qR6jX+cP0kf+S3x/" +
                        "wDij/6bgf6T/Rq/5IfL/wDDL/05M/R2vw8/cz+e3/g4t/5Ng+B//Y+r/wCo9qNf2f8AQl/5H+L/AOvH/" +
                        "t8D+Kvpwf8AJP4T/r//AO2TPjT/AINx/wDktf7R/wD2K2lf+nY1+ofTe/5FWB/6+y/9JPyz6DX/ACNsd" +
                        "/16j/6Ufml/wVa+HOufDX9v79pGw1q2kij8Va43xG0O6lUqlzY6/Cmpo8ZIAZUaV4iR0ZGHUGv3X6PGd" +
                        "0cdwbgZQfwQ5Guzg+XX1sn6NM/BvpF5HWwHGePjUXxz9on3U1zaejbXqmj+jX/glz/wVG/Zo8Y/s/fBz" +
                        "4CfE3x/Y/Cb4ufC3Q9M+GcWn+OZU0/TNXtNGto9Ns57O/m225d4Y4w0MjrJv3bVZfmr+IvpAfR/z7C5z" +
                        "iswwtGVfDVpyqXh70ouTcpKUV71k27NJq1rtPQ/uT6Pn0g8hxWS4XL8VWjQxNCEadpvljJRSjFxk/du0" +
                        "ldNp3vZNanNf8F7P2Y9R+M37O/gb9orwJbHXNS+A0l3deI00oCb7R4U1tIGmuwYtxdbWW3ikyOBG8jk4" +
                        "Fd/0P8Aj2GV53Wy3EPljibct9LVIXtHy5k2vOSiupwfTG4AnmuSUcyw65pYVtytrenO15efK0n5Rcn0P" +
                        "59/+Can7eOrfsI/HCfxTf6dN4j+FHxAht/DfxW8MaeUFy1tDMZLe+td+Abi0MjlEYhXV3QlSwdf7L8df" +
                        "CGnxflKpRkoYmk3KnJ7Xa1i/wC7Kyu900nraz/i7wG8YanB+butKLnhqqUakVvZPSS/vRu7LZptaXuv7" +
                        "YPhT+2t+yd8avDVn4q+Hf7QPhbVrC7jW5l0+/1iz07U7Tf/AA3VjqDw3MDZ7SRrntkc1/lbxF4V8R5VX" +
                        "dLE4KrFrqouUX6SinF/Js/1c4c8V+G81w6rYbG0pRa2clGS/wAUZNSXzSPUP+F4/BT/AKLB4W/8KDSf/" +
                        "j9eB/qnmv8A0DVf/AJf5H0H+t2U/wDQVS/8Dj/meh6Xqul65p9pq2i6lb6xpV+nn2Op6XNHcW8yE43Ry" +
                        "RFlYcdQa8XEYepSm4Ti4yW6as16pnt4fE060FOnJSi9mndP0aPgz/gqloV74i/4J7/tS6fYKXnt/Dq67" +
                        "IFBb9zpepWupzHA9I7djntX6/8AR7xkKHGmXyls6lvnKLivxZ+O/SIwc6/BWYxjuqd/lGUZP8Ez+N7/A" +
                        "IJg/FDwz8HP28/2cPH3jLXYfDPhmy1e80DVte1Ioltaprui3ugq8zyELHHuvAHkYgIuWJAGa/058fMgr" +
                        "5nwfjsPRg51HBSSW75JRnp3fu6Lq9D/AC8+j/xBh8r4xwOIrzUKam4uT2XPCUNX0Xvavoteh/YF/wAFb" +
                        "JYp/wDgnH+01PBKs0E2k6TLDNEwZHRvEWnEMpHBBHQ1/ml9HCLXHGAT35pf+kTP9NvpJyT4Gx7WqcI/+" +
                        "nIH8p3/AARd/wCUlv7Nn/c4/wDqA65X+hv0o/8AkhMd/wBwv/T1M/zq+iv/AMl7gP8AuL/6ZqH75f8AB" +
                        "Wr/AIKofFf9ib4j/D74M/Bbwhot94m8SaDH8SfEXirx5BdXsEVldaleaZb29rb2lza4k32ErSO7MNpUB" +
                        "c5I/j36OX0e8u4rwNbG46rNU4T9nGMGk7qMZNttPS0lZK2t7vof2T9JL6RGZcJ46hgcDSg6k4e0lKabV" +
                        "nKUUkk463i7t30tZdT0P9hf/gsz+z/+0j4Z0vw98cvEej/AT44xH7FqWk69ctY+HNVfICzadfag5SPzC" +
                        "QPs88vmBuFMg+avE8W/ov5zkdeVTAQnisJumlecfKcYq7t/NFWtq1HY9vwh+lLkue4eNPH1IYXF7NSdo" +
                        "S84Sk7K/wDLJ3vonLc/Q74v/Az9lf8AaF8MHWPjL8PfCHxK8OLFm38X+IrfT5mt4mxHug1NSskIOQN0c" +
                        "q9ua/FuGuLeIclxHJgq9WjO/wAMXJXfnDZ/NM/beJuEeHc7w/PjqFKtC3xSUXZeU918mj+PH/gqV8BP+" +
                        "Cd/wR1vRLP9j34tXHiTx5d3rReMvhroWpR+JvDmk6eIZDvTVizyJcLKFQ27TTtgksYyoD/6ZfR+4w41z" +
                        "alOWc4ZQope7UcfZzlK6+xs4215lGK2tzX0/wAw/pC8G8EZTVhHJcS51nL36al7SnGNntPVqV7LlcpPe" +
                        "/LbX6W/4N0rvxQn7UPxusbRp/8AhCrnwC934gWMH7MdUh8Q6amnmQ/3/Klu9ntur4T6bVPDvh/CSdvaq" +
                        "vaPflcJ81vK6hf5H3v0H6mIXEGLjG/snQvLtzKcOW/nZzt8z4L/AOCuP/KRf9p7/sK6X/6jmnV+v/Ru/" +
                        "wCSIwH+GX/pyZ+O/SV/5LjMP8Uf/TcD+pT9lb41W37Of/BID4YfHG60V/Ea/DP4eSeJ4NAhlEH2y4inm" +
                        "WCFpSG2I8jKHfaSq5IBIwf8/vELhaWd+JeIwCnye2xHLzb2TSu7dbK9l1fVH+hPh3xXHI/DLD49w5/Y4" +
                        "fm5drtN2V+ibtd62XRn5W/sz/8ABwl4/uPilHp37V3gTQrT4T687Qf8JF8KdP1KLUNAdz8krwXV7dm7t" +
                        "16SKoEoGWXeR5bf0Hx59DDBxy/myitN4mP2ako8s/K6jHll2b93o7br+eOAfpq42WY8ub0YLDS+1TjLm" +
                        "h2bTlLmj3S97qr7P+kH4f8Axp/Zx/ac8KFvh/8AEHwt8ZPC+tRbb3RrK6sNS3Iy7jHdWM26SNgOWjmjD" +
                        "DuK/h7OeFs8yHEf7RRq4epF6Npx+cZLR+qdj+6Ml4qyLP8ADf7NXpYinJapNS+UovVejSZ+Tf7eX7Dn/" +
                        "BIfQfDfiDxR8WNT0T9mLxXHFLd2tz8I9St9P1SeVQSI7fw5CLiG4y33lhtA2P41HI/ovwg8WfEmtXhSw" +
                        "kZ4yndL95FyivN1XZx9XO3k9j+b/GLwj8M6NCdXGShgqlm17KSjJ+SpK6l6KF/Nbn8bF01tZa3ct4bvr" +
                        "meztLp20HU54haXjxxzHyJWjhllEchADFVkbaeAxxmv9PKalKkvapJtardbaq7Suvkr9j/Lqo4wqv2Tb" +
                        "SfuvZ76Oybs/Ru3c/00fh1J4gl+H3gSXxYsieKZdG0uTxKl4u2Yag1lEbgSDs3mbsj1r/BzO1RWNrKjb" +
                        "2fPLltty3drfI/3xyOVZ4Ki61/ackea+/NZXv8AM7KvMPUCgAoA+Y/2sP2T/hb+1/8AC2/+G3xJsPJuY" +
                        "fMvvBnjOxjQ6joWolNq3FuzYypwBLETtkXg4IVlTVyoysfxGftQfsv/ABS/ZM+KWqfC74o6X5NzDuvfD" +
                        "fiSyVzp2tacXKx3dpIwGVOMMp+ZGyrAEVi1Y6YyufTH/BPP/goZ41/Yu8ajSNXNz4r+A/iu5STxv4Ijf" +
                        "dLZytiM6jpwkIVLhFA3pkLMoCsQQjo4ysTOFz+0P4d/ETwV8WPBXhz4i/DrxHbeK/Bniu2TVNC13S33R" +
                        "TRNkEEEBkdGBV0YBkYFWAYEVsczR5V+1d+zf4N/ay+AvxA+Bfjb/RrDxfa50fXI0DzaVq1swnsr2IZUk" +
                        "wzKpZQRvTchOGNfbeHfHGK4czijj6GrpvVdJRekov1XXo7PdHxHiNwLheJMmrZfX0VRaPrGS1jJej6dV" +
                        "dbM/wA7/wCNHwf8d/AL4peNvg98S9HfQ/GvgK+k0TWbJwdj7QHinhYgb4Z42WWJxwyMrDg1/tTwtxLg8" +
                        "4y+ljcLLmpVY3T/ADT7NO6a6NNH+JPFXDGMybMauCxUeWrSlZr8mu6as0+qaZ9i+Hf+Cnn7T/hX9j6f9" +
                        "jrQfEv9n+FpJpbC28dwyTDXbbw3PGRJosEwPyW7OT84+cITECE4r8yxvgJkGI4mWdVKd6lr8mnI5rao1" +
                        "1lbptf3nqfp+B8f+IMNww8lp1LU7tc+vOqb3pp9I367291aHwf4P8H+KfiB4p0DwT4J0C68U+LvFN1Do" +
                        "nh7w9okLz3V5dTuESONEBJJJ/DqeK/XszzPD4LDzr15qFOCblJuySW7bPx7LMsxGNxEKFCDnVm0oxSu2" +
                        "3skj+3b/gl5/wAEvPC37Fnha3+JHxIt7XxT+0v4ptfL1jWI9k9r4YtZ0+fTtOfkGQg4uLgff+4n7vJf/" +
                        "KTx+8fsRxTiHhsM3DAQei2dRr7UvL+WPTd67f6y/R9+j7h+FMOsVikp4+a1e6pp/Yh5/wA0uuy03/X6v" +
                        "5qP6aCgAoA/MH/gsB8EPiX8fP2H/Hfg/wCE3hi48Z+L9H1LR/GcfhXR0Mt/e2um3Je4S1iX5pplRy6xL" +
                        "lnwVQMxCn99+jTxXgMn4so1sZUVOlKMocz2TktLvor6Xei3dldn8/8A0m+EsfnPCVajg6bqVYyjPlWsm" +
                        "ovXlXV21stXayu7I/Gz/gg9+yn+0B4L/aZ8a/GP4gfCrXPh34D0PwpqHg+PVPHemXmkve6nqV/Yyxw20" +
                        "V/HE8oWO3keR1UquACQWFf079LzxDybFZDSwWHxEKtaVWMrQkpWjFSTbabS1aST1ettmfy79D3w6zrCZ" +
                        "/VxuJw06VGNKUbzi43lKUWklJJvRNtrRaX3R89f8Fev2Mv2k7r9uv4nePfB3wb8SfEPwX8XW0nxB4P8Q" +
                        "eA9F1HV4Xkj0ez064tpjp8MoimjuIHARiCUKsOvH2n0a/FDIo8I4fD1sVTpVaHNGUZzjF/FKSa5mrppr" +
                        "VdbrofE/SY8LM+lxfiMRQwtSrSr8soyhCUl8MYtPlTs1JPR7qz6n9RP/BPP4ReMvgR+xb+z38LPiFYjS" +
                        "/GvhrQzP4j0jIZ7K51K+uNVNtIVJHmQi5EcmCRuU4JHNfwD408S4XN+Kcbi8M+alOfuvuopRuvJ2uvJn" +
                        "+gvgnwzisn4VwWExK5asIe8uzk3Kz81ez80fZtfl5+pn4p/8F0v2f8A4s/Hb9lXwdL8I/Bt74+1P4b+K" +
                        "7fxf4i8N+GYJbzU202TS7zT3mt7aBWkm8uSdN6oCwUlsbVYj+p/ok8ZZblHENVYyqqUa1JxjKTtHm5oy" +
                        "s29FdJ2b0vpu0fyn9LzgzMs44dpPB0nVlRqqUoxV5cvLKN0lq7Nq6Wttdkz4S/4N/PhB8Wvhr8Yf2gr7" +
                        "4i/C7xF4BstT8NaZaadeeNdE1PSoriVNULskb30MQdgOSAScV+u/TJ4ly3HZZgo4bEU6rVSTahOMre71" +
                        "s3Y/H/oYcMZlgM0xssTh6lJSpxSc4Sim+bpdK5+vP8AwUL/AOCbvwu/b18J6bPqWonwF8Y/BtvLZ+BPi" +
                        "ZZQC4Agd/ONjfwbkM9qzksoDBomJZDhnR/5s8FvHLMOD8TJRj7XC1HedNu2u3NF9JW30tJKz2TX9MeNn" +
                        "gVl/GOGi5S9liqatColfTflkusb7a3i3dbtP+Rb9oX/AIJY/tt/s6a3PY658F9S+Inh4yeRpvjn4O211" +
                        "4j0y5UnAdlsYjc2+Txi5hjOemcjP+kfBf0g+FM7pKVPFRpTtrCq1CS+98sv+3ZM/wA0+Nvo8cWZHVcam" +
                        "ElWhfSdJOpF/cuaP/b0Uf1Mf8EZ/hJ8bfhx+w9D4L/aM8P3+lPrevazqPgrwL49iYXVh4UvbKzhS1ns7" +
                        "td8KSXKXUohkUHbJkgBsV/n39KDiTKsdxY6+WzjLlhFTnDZ1E5PmUlo2o8q5l1Xkf6F/Ra4azbA8JKhm" +
                        "cJR5qknCE91TaiuVxeqTlzvlfR7an5i/t2f8EF/FMev618Sv2KJLfV9C1SWXUr74F+IbyKzurCSRt5TS" +
                        "by8ZIZIOTtiuJEZAMB5M4H734R/S/w7owwueXjONkq0VdP/ABxWqfnFNPsuv4B4v/Q7xCrTxWRWlCTbd" +
                        "GTSa/wSejXlJpru+n4V+JP2Lv2vfCOqT6N4h/Zg8faff25KlR4S1yaKQA7d0U0Fs8ciZHDIxB9a/rfA+" +
                        "KXDWJpqdPMKDT/6eQT+abuvRq5/IeO8K+JsNUcKmX101/06m18mlZrzTsYH/DK37T//AEbh49/8I/xD/" +
                        "wDIldn/ABELIP8AoOof+DYf/JHH/wAQ74g/6AK//gqf/wAif1S/8EC/g3+0b8JvhF8b5vjL4Z1rwN4D8" +
                        "Vato918LfB/ji3udPuUura3vE1W8js7xI5Y4rgSWqhyAHMZI6En/Pf6YnE+R5jmWEWCqQqVoRl7SUGpK" +
                        "zceSLkrptWm7dL6n+iH0NeF88y3LMW8dTnSoznF04zTi7pS55KLs0pXgr9eXQ/d7xL4c0Pxj4c8QeEfE" +
                        "+mR614a8VWV34c8Q6PeAmG7sb6BrWeFwCDtkjdlPPQ1/IeAx1XC14VqUuWpBqUWt007pr0Z/YOPwNHFU" +
                        "J0asVKnOLjJPZpqzT9Vofwt/tvf8Em/2kP2X/iRqUfgDwDrXxl+DOu3c8ngDxl4G0+51e8gtmYvHaap";
                    resourceString += "b6fE8kFzEmFMhQRS/eQ53In+tvhR9IvI8/wMXiK0MPiopc8ZyUU31lBydnF9r80dn0b/AMiPFn6OGe8P4" +
                        "+Sw1GeIwsm+ScIuTS6Rmoq6kl1tyy3T3S/br4O/swftVeI/+CJXjz4B+N9Dv5Pi94hsb7Ufht8O/FbPD" +
                        "qtlotprFrqVnpki3ZBildbWQwQuRsEiRnZghf5S4m4+4eoeK1HMKE4/VoSSqTjrFzcXGU1bdLmXM1vZt" +
                        "X3f9ZcL+H/EVfwnrZdXhL6zOLdOEtJKClGUYO+zfK+VPa6TtsvzK/4I1fseftK6F+3b8Pvif4y+DHiP4" +
                        "f8Agn4RW/iK88V654+0e/0aLztR8OahoMFtAdRih82Yy3isUTJVVJOBiv3n6T3iZkVbhGthaOKp1atdw" +
                        "UVCSk7RnGbb5W7K0d3u2kj8C+i54Y59R4woYuvhalKlQU3JzjKCvKEoJLmSu7y2WyTbP6Kv+Cgv/BOr4" +
                        "Xft6eCNOttavj4H+LHg6OZPh/8AE2wgE7wJL872d7DuTz7R3w23cGRvmRhl1f8AifwZ8bMw4PxcnBe0w" +
                        "1S3PTbtf+9F9JJfJrRrZr+3/GnwPy/jHCRVR+yxNO/JUSva/wBmS6xb17p6p7p/yEftD/8ABK/9tv8AZ" +
                        "y1PUI9e+DOo/EDwtZlmt/H/AMIYLjxDpc0Iz+9dbOL7Tbrxz9phj/Ign/Sjgr6QfCmeU4unio0qj+xVa" +
                        "hJPtq+WX/bsmf5ncbfR44syOpJVMLKrTX26Sc4td9FzR/7eij4f/wCFd/ED7V9h/wCEG1j7b5n2T7H/A" +
                        "GZe+b5u7Zs2eXndnjGM5r9Y/trB8vN7aFt78y/zPyT+xMbzcvsZ32tyu9/uPtL9n3/gl7+2z+0bqWnR+" +
                        "F/gnqngzwzfMpl8ffFa3uPD2kRQt/y2Vr6NZ7hO3+jRSnPbg4/LeM/H7hTJISdXFxqVF9im1OV+2jtF/" +
                        "wCJxP1Xgv6PvFmeVIqlhJU6b+3UThG3fVXkv8Kkf2Sf8E//ANg74f8A7BvwluvBfh3UT4t8eeLpoda+J" +
                        "vxDubdLeTUrqGMxwwwxgsY7S3Dt5UbMxyzsTliB/mJ4yeL2N4vzJV6kfZ0aaapwvflT3bfWUtLuy2S6H" +
                        "+ongx4PYLg7LXQpS9pWqNOpO1uZrZJdIx1srvdvqfzJf8Fbf2NP2ntS/bv+Kfjbwp8EvEnj7wj8W59K1" +
                        "rwR4h8A6NqGs21xjSbPTpIJG0+KURTpNCymOTBIwwyrA1/ef0cPE/IKfCGHoVsXTpVKCkpxnKMWvelJN" +
                        "czV00915rdH8C/ST8LeIKnGGIr0cJUq0q7i4ShGUk/djFp8qdmmno/J7M/qR/ZB+Al54L/Yb+DX7PXxs" +
                        "8NWt/cxeDYvB3xJ8G6j5d1bFdRgkN3YzbCyPtWcxPtJUkHBIwa/z+8SuMI4ri3FZjgajS9s5U5LR+61y" +
                        "yXVbXXXuf6EeGXBssLwjhctx1NN+xUakHqveT5ovo97O2nY/nP/AG1P+CDHxe8B63rfjf8AZElX4qfDu" +
                        "6ke+g+GOq3UVt4m0lHYsYYJbtkhvoYx91jIk2MLskYFz/bfhZ9L7LcZShQzj9xXWntEr05ebSu4N9dHH" +
                        "reK0X8PeK30O8zwdadfJv39Bu/s20qkfJN2U0ujupdLSer/AA+8Z/AT45fDrU30Xx98HPFPgvVoyUOn+" +
                        "KNA1WxlOO6i5gTcO4IyCORX9YZXxhlOOp8+HxVKpHvGcX+TP5KzXg7N8DU5MRhatOXaUJL80anw/wD2a" +
                        "f2hvitqMOlfDf4H+K/Gt7M/k48PaBqdxHGcgEyypD5cajIyzsAO5rnznjrJcug54nF0qa/vTivuV7v5H" +
                        "RkvAed5jNQwuEq1H/dhJ/e7WXzP6Kv+Cb3/AARD8X+DvHfhT47/ALYUVnp8nhG4t/Efg74H2E1vqLyX8" +
                        "DCWGbWJ4TJb+XE4DrbxM+848xgoaN/4n8cfpXYbFYSpl+TXftE4yqtOOj0app2d2tOZpW6JuzX9v+Bf0" +
                        "TMThcZTzDOrL2bUo0U1L3lqnUavGyevKm79WldP+oCv4EP9AgoAKACgAoA+Y/2sP2T/AIW/tf8Awtv/A" +
                        "IbfEmw8m5h8y+8GeM7GNDqOhaiU2rcW7NjKnAEsRO2ReDghWVNXKjKx/EZ+1B+y/wDFL9kz4pap8Lvij" +
                        "pfk3MO698N+JLJXOna1pxcrHd2kjAZU4wyn5kbKsARWLVjpjK59Tf8ABOX/AIKF+J/2MPHEmheJTdeJv" +
                        "gL4ymU+MPCkLl5NMuW2oNTsEbgSqoAljGBKgwfmVCrjKxM4XP7QPBHjfwl8SfCXh/x54D8QW3inwf4pt" +
                        "o9X0DX9IkElvc28g4ZTwQQQVZWAZWBVgCCK2OZo/Iz/AIKlf8E7fDP7d/wxsfjP8EbrT7z47+CdPlbwp" +
                        "rGkzwS2fi7SYDJL/Zb3MT+V5gcsbWYnarko5CsWT+mvo6eOs+F8Z9VxTbwNV6/9O5PTnS7fzJbpXWqs/" +
                        "wCYfpH+A0OKcH9awqSx1GOn/TyK15G+j/kb0TdnZO6/jI0/4Q/FPVPiTD8HLH4d6zN8Vp74eGl+HTadd" +
                        "JrK3+dpge0kRZEcdWDKMDk4HNf6k1uJcvp4F42VeH1dR5ufmXLbvzbP5H+VdHhnMamPWCjQn9ZcuXk5X" +
                        "z83bl3T9dj+1X/gl5/wS88LfsWeFrf4kfEi3tfFP7S/im18vWNYj2T2vhi1nT59O05+QZCDi4uB9/7if" +
                        "u8l/wDLHx+8fsRxTiHhsM3DAQei2dRr7UvL+WPTd67f6sfR9+j7h+FMOsVikp4+a1e6pp/Yh5/zS67LT" +
                        "f8AX6v5qP6aCgAoAKAPCf2mfjvpP7MnwO8ffHbX/DGo+MdC+HcFtqms6B4T+znUJLae+gsnkiF3JFGRC" +
                        "JvNfc4+RWxk4B+u4D4QqZ9m1HAU6kac6raUpX5bpN2dk3ray03aPj+PuMKWQZRWzCpTlUhSSbjG3NZtK" +
                        "6u0tL3euyZo+Efjn4H8XfADQP2kIJ5NO+HeueE4PjFJLehPPtNKk0oavIJVRiokijyHAOAwIzWGZcJYv" +
                        "DZzPLGr141XS02cublVvJvbyOjLOLsJicmhmabVCVJVdd1Hl5nfzS38zxb9iD9t34bft2fDTxL8Svhvo" +
                        "GqeFbXwprcvgjVtA8ZCzF6ssdlbXyTAWM86eVItztUlgdysMcc/VeK/hTjuEcfTwuJnGbnDnTje1rtW1" +
                        "Sd1bXyaPlPCXxZwHGGAqYrCwlBQm4OM7XvZO+jas76eaZs/Bj9r7wT8dPj/APtFfATwX4Z1Q3X7NNxYa" +
                        "J438c3n2MaTPqN95ii1tvKmeUuj286vvRcGM+orl4o8NcXlGTYLMK9SNsYm4QV+ZRVtXpazTi1Zvc6uF" +
                        "vE3CZvnWOy6hTlfBtKc3blcnfRa3umpJ3S2Z9a1+cH6SFABQAUAFABQB8I/8FEf2x9S/Yb+AVn8aNK8B" +
                        "wfEW6uvEGneCT4f1C/k02NUvra7uDL5scFwcr9mxt28568V+u+CnhjT4tzh4GdZ0kqcp8yjzbOKta679" +
                        "z8f8bvFCpwjkyx0KKrN1Iw5XLl3Une9n27H3dX5EfsAUAFAHz1+1V+0X4X/AGTfgL48/aB8Z6Hf+JPDX" +
                        "gD+y/7S0XwwLc3039q6zaaJH5X2uSKP5ZLxWbLD5Qcc4FfaeHvBOI4jzijl1CcYVKvNZyvZcsZTd7Jva" +
                        "Nttz4rxE44w/DeTVsxrwlOnS5bqNrvmnGCtdpbyT32Plb4h/wDBRjVvBtx4Ofwt+xJ8aPjFoPjXw3oPx" +
                        "J0zxd8JvCMusaUsOvaemoJatc27lDPCsgWVVJAPc1+hZL4JU8Uqvtc1weHnTqTpuNSpyyvCTjez1s7aH" +
                        "51nfjjUwrpeyynGYiFSnCopUqXNG04qVrrS6vZ+Z4N8P/8AgszpnxZ0J/FPwr/YS+OXxL8Mx3EmlSeI/" +
                        "h/4Tj1mwW6hVXkhNxp080YkUOpZd2QCMjkV9fnP0X6mXVvZYvN8FRqWvyzqcrs9naSTtpufH5L9KWnmV" +
                        "H2uEyfG1qd7c0KXOrrdXi2r6rQ/ZvT7pr6wsb5rWSya8hiumsrxdk0JkQPskXsy5wR61/L1anyTcb3s7" +
                        "XWz9D+paNTngpWaur2e69T4y/4J/wD7Wuo/trfs7ab8ctU8EQ/D67v9W1Tw2fDthfPqMarp0qxiTzpIY" +
                        "CS+7pt4r9R8ZPDiHCudywEKrqpRjLma5fi6Wu/zPy3wY8SZ8V5JHHzoqk3OUeVPm+Hrey39D7Zr8qP1c" +
                        "KACgAoAKACgAoAKACgAoAKACgAoAKACgAoA+Y/2sP2T/hb+1/8AC2/+G3xJsPJuYfMvvBnjOxjQ6joWo" +
                        "lNq3FuzYypwBLETtkXg4IVlTVyoysfxGftQfsv/ABS/ZM+KWqfC74o6X5NzDuvfDfiSyVzp2tacXKx3d" +
                        "pIwGVOMMp+ZGyrAEVi1Y6YyuXfht+2B+0N8I/hB8QPgX4A+I13oPw5+JGP7c0mA5lt9/wAtx9imPz232" +
                        "lPkn8sjevBouDij7U/4Jmf8FC/i3+zV4o0z4JW3grUPjX8NvH2pRQ6T8O9AYvrWn6lduI2k0kSZRvN+9" +
                        "JbuVRmG4NGS7M4ysTOFz+x2zhguDb6zNpP9n6rc20cMwu1tzdwxn975EkkDSKdjE5Cuy5yQT1rp9rLl5" +
                        "bu29ul+5xeyjzc1lzWtfrbsaNQaBQAUAFABQB5n8afhtp/xj+D/AMUvhLqpRdP+Jfh7WPAtzNMCRENV0" +
                        "+WyEnAJBQyBgRyCARzXvcLZ5PLMzw+Mh8VGpGf/AIDJO3ztY8DirIoZplmIwc/hrU5Q/wDAotX+V7n81" +
                        "ngX9ozxJpv/AAQz8V/CYNJH8XrLxTe/sRWeiXBC3b3mt60L17NlJ5I0y7mhXH9zHYmv7pzfgihU8WqeM" +
                        "/5hnSWLb6WhC3N/4MipfP0P4QyjjivT8IqmD1+tKq8Il1vOd3H/AMFycfl5M+k/2LrDw9/wT5/bR/bN/" +
                        "Z21S6Fn8N7L4XeFP2hdAmYeWk8Hg/QIbLVp4y+MvLLPOzk8t5e49DXwvilWrcZ8LZXmUFeu8TUoy8nVm" +
                        "3BPySUUu17H3fhXRocFcVZrlk3agsNTrx81SglNrzbcm+9rnhv7Pn7Qni39jT/gmx4y/a5XTbK+/aH/A" +
                        "G8Pidqup+CT4nfy7WG81W7ureK5u/NZM29v9iu7pWYhWMqBiFavrOM+C8NxRx1SyfmawWWYaKny7tRSb" +
                        "Uf70uaEdNVyuyuj5HgrjXE8LcB1c55YvHZniZOHNsnJtJy/ux5Zy10fMruzO3+NPxs/aK/ZD+G+i/tMa" +
                        "J/wU48M/tXeKvDl7pMnxk/Z6nk8InS9VstSvYbSePRotJma4iMDzKN0aK2wNKdoUxnyuFuFck4lx08rq" +
                        "ZBUwNOal7Kv+95ouKbTqOS5XdJ6NtXtHVtSPW4q4szzhnAwzSnxBTx1SDj7Wh+65ZKTSapqL5lZtapJ2" +
                        "vLRJxf9Efg7xTpfjnwh4V8a6G5k0Xxhptj4p0eSTG5rXULVLuInaSMlJB0NfxTmeX1MJialCp8dOTi/W" +
                        "Ls/xR/buV5jTxeGp16fwVIqS9JK6/Bn4OfDfxl+35+11+1H+2/8B/Av7Tr/AAP+EXwP8aX9ifiBa+H9N" +
                        "1bWoILme5tdN0bT1kFqqwqLSWaeYyGUYRdwDc/17nmV8HcN8P5TmGIwH1nE4minyc8owbSTnUlvr7yUV" +
                        "bl3dtD+PMizTjPibiHN8vw+YfVsNhqzXOoRlNJtqFOO2nutyd+bZX1OX/Z2+IH/AAUk/aK+I3xx/Yb1n" +
                        "9pvTvh1f/su6rdW3xA/ab0TQLO/8U6/YXM5g0m0gtXeCCIOIZJpbgETBdiMSwYv6HG2TcDZJgcJn0MBK" +
                        "qsbFcmHc3GnBpXnJvVu10lHWN7taWt5/BGdcd55jsXkE8wjReCk+fEKClUmm7Qio6JXs25aStZPW9/rn" +
                        "/gnH+0B+0Be/GX9qr9jH9pnxvD8VfHv7NF7p1z4V+KsNpHZ3Ws6LqSuV+1R242B0QwOuS0n7xlZm2bj+" +
                        "beN/BuTQyvLs7yuk6FHGKXNTvdRnH+VvXV8y6L3U0lex+leBnGmdTzTMcjzWsq9bBuPLUtZzhL+ZLS6X" +
                        "K+r95pt2ufLH7V3if4//s7+H/HvjvVv+CxOiTftCeBba78XaT+z5Po/g3TbG/hs42uBpX9lxzzTedNGu" +
                        "yGSWImR+MAncv6F4d4DJs7rUcPDhmf1Kq1F1uarJpvTn57JWT1aT0XpZ/nniNmGdZJRrYifFEPrtJOSo" +
                        "ctKKklrycl27taJtavTrdcP/wAFPfjtdftNf8Ed/gF8dNR0yHRtX+IXiTw1qWvaZp3mfZotRt7PWLG7E" +
                        "ImJYRGeBygYkhcAlup9bwD4RjkPibjMBGTlGlTqJN7uLdNxvbrZq/n0R5H0gOMJZ/4YYLMJRUZValNtL" +
                        "ZSSqKVr62unby6vc+xdL/aG+O37eX7Uk/g/9lP4hXXwu/Y6/Z+vpNK+Mnx48OW2nXF14z15ArtpOkSaj" +
                        "Fcp5KoV/fInCsZCSGgD/mOI4LyjhDh9Vs2oqtmeKjelRk5JUofzzUWne/2W91y6Wm1+oYfjbOOMeIXQy" +
                        "iu6GV4WVqtaKi3Vn/JTck1a32ktnza3gnxXx0/an+I3x1/bK+JP7LfgP9qzRP2NPgx+z9Y2J+J/xR1Cb" +
                        "Qo/EPiLX9ShE66fpra9KixxQAkSPGAysjbiwdBXq8I+HuByjhihmuIy6eYYrFSfs6aU+SEIu3NPkWrfR" +
                        "PRpq1rM8ni/xEx2ccU18pw+Ywy/C4WK9pUbhzznJX5Yc70S6tapp3vdHXfsOftP/E6w/a1+J/7E/wATP" +
                        "j9pX7WHh7TPDUXxe+Dfx98N/wBkm7ksFuYLO50zUjosksLzRtPkMzb/AJCWJWRFTzfFngHAT4cw+eYXB" +
                        "ywM3U9lVoy5rXs2pw50mk7bLTVW1Tb9Pwj8QMwhxJiMixWNhjoRp+1pVo8t+W6ThPkbTavu9dG27SSXq" +
                        "P8AwWi/5RpftJ/9yd/6n2h18/8ARc/5LvA/9xf/AEzUPofpUf8AJBY//uF/6epn2Z+yt/ybB+zh/wBiF" +
                        "4P/APUetK/MPEL/AJH+O/6/1f8A0uR+peHf/JP4D/rxS/8ASIn5c/8ABv8Af8mKat/2PviD/wBN2l1+/" +
                        "wD0yf8Akro/9eIf+lTP57+hh/ySEv8Ar/P/ANJgfuBX8oH9an8rn/BLH4Kftt/HT9jVrL4RftSRfst/C" +
                        "/wtretweD4/Dfh+31fVvEetyPHczz311cTRtbWkRZIUSHJY7yykBc/6EfSD4q4UyjifmxmXvG4icIc3N" +
                        "NxjCGqSiknzSerbe2iT3t/nf9HjhTizN+F+XB5gsFh4Tny8sFKVSejbk21yxWiSW+ra2v8AqF/wTh/aZ" +
                        "+Pv7UH7O3xz8D/E7xBZaV+018C9b134KX/xCtrCCW0k1KG0ZLLUprWJIoJGiuN4kjRVVxGDtG81+A+OH" +
                        "AeT5BneEr4WDlgMTCFVQu78rfvQTd2rxtZttq++h/QXgZx9nPEGR4zD4qcY5hhpzpOdlbmS92bSsnaV7" +
                        "pJJ22Vz4B/am+O3xz/Y70S6+K3hr/grRoP7RPxj8D6jYf8ACf8A7Nerad4ShtdWtrnUIbS4trfT9Innk" +
                        "tHh8zfIgCSCIM6uhUbv2Tw+4RyniaqsJV4cnhMLUjLkrqVRuLUW03KSSknayeq5rJp30/GPEPi/N+GKT" +
                        "xdLiSGLxVKUeeg40kpJySaUYtuLV7taPlu01bX6d/4KMftiftEeB7D/AIJ4+Kf2WdTGmax+0rqaLB4G1" +
                        "aO2ms9al1m00d9Msrx5ohIIxLfgOY2jYgnkcEfA+CPhlkmLnnVLNo80cHH41dOCi6nPKNna9o6XuvJn3" +
                        "/jj4n53hIZJVymXLLGS+B2am5KnyRldXteWtrPzRxX7Tegf8FMP2KPhuP2vW/bLj/aEh8E3Gn6p8bPgj" +
                        "rXhbTtL0B9OvLqK1lTTmtS0gihkmVS6rDJszJkYKH1eA8ZwJxVjv7G/sv6q6ikqVVVJSnzJNrnvpdpXs" +
                        "3JX93szyuPsFx7wpgP7Z/tVYtU3F1aLpxjDlbSfJbWybtdKLt73Sx0/7b/7ZH7RFr4w/wCCZ+v/ALH+v" +
                        "rbxftiWOty2fgjxZDbPpN1Jqmm6E+lT6gwgedFsW1hpphG4yI8Eda8/wo8Mcklhs+p5zC7wEoXnFvmXL" +
                        "KpzqOtnz8lldPe56Hi14o53HFZBUyWdlmEZ2hJLlfNGnyOWl1ye0cpWa2scX+06/wDwUa/4J5eF9F/av" +
                        "1D9rlv2qvh5o+paXYfHj4WeLPDOm6LZx2mo3SWYl09rMzGCMzSrErRmNkdkLLIpZB6vAS4I41xE8ojlv" +
                        "1KvKMnRqRqSm7xV7Sva7sm2ndNJpOLszyuP3xzwTh4ZxLM/r1CMoqtTlTjBWk7Xja9ldpK1mm02pK6PZ" +
                        "f2uv22/F3in41fAH9l39n/42aH+zlYfF3wpB8e/iJ+0f8QBpTf2R4Xv0k+xWunxatKlu15ceWSQxyNyF" +
                        "WA3sPl/Dbwpw2HyrGZrmOEni5UKrowoQ5veqK3M5OK5uWN/wd09EfU+JfixicRmuCynLsXDCRxFJVp15" +
                        "8vu03flUVJ8vNK34qzWrPP/AITftKfE39nb9tX4I/s9a7+2Jpv7bXwK/aVttT0vQ/Egl0C68Q+E/EenQ" +
                        "+cqTy6DLKXguC0ar5pAIdioHlMX9niPgXAZ3wri8xp5ZLLsXg3FuPvqFSEnbRTSs46vTsrt8yt4vDfHm" +
                        "PyTivCZbUzSOZYPGKSUvcc6c4q+rg3dS0Wvd2S5Xfj/AIZfET9vz9rX9rP9uH9nbwH+0rH8GvhD8FfGV" +
                        "xFffEKDQtN1TxDp1jcXV7Z6do2mJIIEWOX7HLJJOzeYvlgBvmKt6efZJwdw5w5lOZYjAfWMTiKKtDnlG" +
                        "EmlFzqT3d1zJKK91320uvMyDPOM+JOJM3y3D4/6vhsNWd58kZTim5KFOC0VnytuT95WWutn9GfsAfHH9" +
                        "pfQ/wBpv9pb9hb9qLx2vxj8TfBKx0zx14C+Ly2Vvp8+oaJfrbsFuY4B8zMt9AylmZkYSIzuApHxHjJwn" +
                        "kVXIcBn2VUfq9PEylCdK7kozV9m/wDDJdE1ytJan3Hgxxdn1HP8fkGbVvrFTDRjOFWyi5Qdt0t/ii+rT" +
                        "5k29D9g6/mg/pwKACgAoAKACgAoA+Y/2sP2T/hb+1/8Lb/4bfEmw8m5h8y+8GeM7GNDqOhaiU2rcW7Nj" +
                        "KnAEsRO2ReDghWVNXKjKx/FZ8dP2NPjv8Bvjvb/ALPuv+D7nX/GWv3KWnw8m8NQS3Fv4lt7iXyoJ7AgZ" +
                        "YMeHU/NG2Q+CDWLR0qSaP6lv+Cbf/BNvw1+yB4ag+IPxBgtvEv7RHiW28vVdVj2z23hy2nX5rCwbkFyD" +
                        "iecff8Aur8mS+kY2MJzufqzVmYUAFABQAUAFABQB/MPpX7J3xdT/grrq3wxfwNqo/ZeX4mR/tuHxYNOv" +
                        "V0MaxD4fl1WNEuCn2ct/aF0Lcx5yApwMV/e+I8RctfhtHFe2j/aH1b6py8y5+VzUXpfm+Bc1/M/gHD+H" +
                        "GZrxLlhfYy/s/6z9b5uV8nMoOS1+H45ctt9D03/AILbfBv413PxJ+B/xg+AHgjV/GniLx54V8X/ALMfx" +
                        "EtvCWnXl+66Nq8WLZZ/scb7I2OpXR3PhQwHXJx4P0VOJ8qjgcXg8xqwpwpVaWIhzSS96L1tdq79yGi1s" +
                        "e99LHhbNZY/CY3LqM6k6tKrh58sXL3ZLS9k7L356vS6R9F/8FBP2EvGHiv9gj4FfCX4HeG7Xx14v/ZPu" +
                        "vC3iPRfA12kbxeJbXQtKk0m9t/Km2JK84l89lYgybWUZZwD8T4M+LuGw/GGLxmPqOlSxyqRc1vTc5KUX" +
                        "dbJW5U1tdPZH3HjT4P4rE8G4PB4CmqtXAunJQe1RQi4yVna7d+Zp72a3Z8y+D/jP/wTE8QWui6Fq/8Aw" +
                        "S38SaX8Xro22n6/8JdK+EKX9/ZX0v7uRVcLD5kKSK4DlVcqpPlg5UfeZnwtx9RlOpDiCnLDK7VR4mya6" +
                        "d7Nq2l2rv4up8FlfFXh/XjCnPh6pHFOylSWF5pJ9e10nfWybS+FPQ/oo0bR9K8PaRpWgaFp0Oj6HodtB" +
                        "o+jaTpsaw29raW0SwQwxRoAqoiKFVQMADFfxPisTUr1ZVKknKcm229W29W2+7Z/b2FwtOhSjTpxUYRSS" +
                        "S0SS0SS7JbH5Qf8E6/BXjLwv+1J/wAFQtY8S+EtT8O6T4u+JVtqvhTVNdsLq0t9UtRLqxM1pJcIizxje" +
                        "vzRkjkc81/RXjZmuFxHD/D8KVSM5U8O1JJpuLtDSST0fkz+cfA/KsVh+IeIJ1aUoRqYhOLcWlJXnrFta" +
                        "rzRzP7C3gXxv4e/4KNf8FOPFHiDwdquh+GfFupeHZfCviLWNPu7ax1NImvd7WlxPGscwXcMlGOM13eLe" +
                        "b4SvwRkFKnVjKpTjPmipJuPw/Ek7r5nB4Q5Pi6HHGf1alKUadSUOWTi0pfF8Las/keZ/DX4dfHS1/b6/" +
                        "wCCtfiPwH4X1Xw74g8aeBrfTvgn421OxuLTTbvxCPD0EVk1teXKRwSGO5C7tr4GDnGK97Pc7yiXB3DlL" +
                        "EVIzhTrN1YJpyUOd814q7V436Hg5Dkebx4y4kq4enKE6lBKlNpqLnyLltJ2TtK3XQ/P/wCBWsfCTwx+x" +
                        "N8T/wBm63/YY8Y+Nv8AgoN4w0fxp4P8cazrvgU3WqWuo61HqFtHqs2taonmWsFtbSgqi7WMqEAEuZT+y" +
                        "cXYbMsRxVh8zeb0qeS050pQSrWi4x5W4KnHSTlJbu65X5cp+L8IYrLcPwniMrWUVqmdVIVYzbo3kpT5k" +
                        "pupLWKjF7Kz5ltrzP0r9oH4RfFjVf8AghZ+y58PdL+GHiLUvH2j+JbW51bwPYaLqU2sWsaaj4iLNNZxw" +
                        "mZFAkXJZB94eorw+DeJcup+LeYYmeIpqjKm7Tc4qL92ltK9ns+vQ97jThnMqnhDl+Ghh6jrRqK8FCTkv" +
                        "eq7xtdbrp1Pqbxl8FfGX/BLP9qXwl8av2Y/hzrfjH9jj45/YvAPx7+Cnw/s9R1u88OX9nAUt9XtLeETz" +
                        "uAoaUEhsnzYmZfNiK/nuWcVYXxB4fqYHNK8KeZ4a86NWbjBTTesJN2S1sun2ZJPllf9DzThTFeHnENLH" +
                        "ZVQnUyvE2hWpQUpuEktJxSu3pd9ftRbXNG3kXxs+EvgL9mz9uX42/Hb9o/9kq6/al/ZS/ahg0rxh4a+I" +
                        "+i+F4vE154O1mK3CzQz20qq0EUpkctnaXQRFd7o6j6XhXiPGZ7wlhMBlmZLBZjgnKMoOp7NVY30aa3as" +
                        "rb2fNeyaZ8zxXw3g8h4uxeYZnlrxuXY1RlGoqftHSklqmnsnd32uuW12mj9B/2F9e/Yn8ffEHxXr/7L/" +
                        "wCyFqXwav8Aw7pMUcnxZ1jwAPCtjqNvqEyNJZWl23zSOPLR5EIXIwRuAyPxjxbwfFWDwVOnmuZRxCnL+" +
                        "Gq3tHFxWkpR6btJ69nY/a/CLGcKY3G1KmVZZLDuEf4jo+zUlJ6xjLq9E2tO6udF/wAFe/Cvijxt/wAE7" +
                        "v2hfDHgzw3f+LvEup/8In/Zvh7wxZ3F/fXHk+OdGuJPKgtEkkfZHGzthThQSeAa4vo15jh8JxrgqtepG" +
                        "nTXtLyk1FK9GolduyV27ep2/SYy7EYvgjG0qFOVSpL2doxTk3atTbslduyTfofXP7M2n3+k/s3/ALPul" +
                        "arZTaZqemeCPCmn6lpuoRvDPbzw6DaxyRyRyAMjowIZSAQRg1+bceVoVM8xs4NOLrVGmtU05uzT6pn6V" +
                        "wDRnTyLBQmnGUaNNNPRpqEbpro0fmv/AMELvAvjf4efsVapoPj/AMHar4H11/G+u6gmi+MNPu9MuzBJp" +
                        "+mqkghvY432MUIDYwcH0r90+ltm+ExvFUamHqxqQ9jBXjJSV+ael02rn4R9EPJ8XguFJU8RSlSn7abtK" +
                        "Li7csNbNJ2P2Wr+YD+pD8jv+CJXgrxl4B/YW0Hw9478Jan4K1+PxL4iu5ND8W2F1pt4sUtxGUcw3kcbh" +
                        "WA4OMGv6Q+lXmuFxnF06mHqRqQ9nBXi1JbPqm0fzV9E/KsVguEIU8RSlTn7SbtKLi7XXRpM+DvhB8I/2" +
                        "mIP2XP+CxWhfDXwVr/hr4mePPH+s6h8P4bjTtQsbzWdJk1aV78aZ5iRvO1xYGaOExZ3MygZJFfr/EvEm" +
                        "QviDhipiqsJ0KVCKn70Woy5Vy8+9uWfK3fZJ3Px7hnhrP1w/wAUU8LSqQxFWvNw92Sc48z5uTa/NDmSt" +
                        "u2rHzb441f4IeOP+CcU/wCzd+y5+wv4tuP2iYdE8PR/Gjxq3gNo7/Rr7RtT0/VtXnudYmia5uZLqa12Q" +
                        "wRnJjkACoEEdfc5Ths2wnHCzPNc3pLBc8/ZQ9tpJSjKMEoJ8sVFO7k+q3d+Y+EzbE5Ti+BnlmU5RVeOU" +
                        "Ie1n7H3oOEoym3Ua5pOTVoxXR7JLlPov/golf8AjfwR4B/4Im6n4V8Gz+I/iR4Q1Hwtf+HPh9eBrO5v9" +
                        "b0+y8LyW+nOLgKYnlnjWI7wNpPPSvifBSjhMXjOKo1aqhQqRqKU1qlCTrXkrbpJ303PuPG6ti8Jg+E50" +
                        "aTnXpypuMHo3OKo2g77NyVtdj1v9r39uXxF+2z8Fdd/ZB/Ze/Zv+IrfGn4xNY+FPHNr8SvDM2iWXhCwF" +
                        "7FPeHUbiaR442/d+UXbCKGLbtwVT834a+EtDhXNYZzmuOw/1XD3lD2dRTdV2ajypK73vbd2ta12vpfEz" +
                        "xdr8WZVPJcpwGI+t4i0Z+0puCpK6cudt2W1r7K7d72T4f8A4KC+G/F37Kvj3/gi94S+FnhWf4s+K/gJH" +
                        "4g0HS/CmkBYrvxH/YGm+FYLyOAMDie6ihlKAKTvYYUnAPreDOOw3EOD4prYuoqFPFODcntDnlWcW/KLa" +
                        "v5LVrc8nxpwGJ4dxnCtHCU3XqYXnSit6nJGipJecknbzeiexv8A7Z/7XXiH/got8J4f2Lv2VfgD47bxf" +
                        "8V9U0OD4r+IPil4buND03wfp2m6nb6w326d2lVJFntoy5zt2Bghd2VTx+F3htR4JzF53m2MoeyoRn7ON" +
                        "OanKrKUXH3VpdWbt1vZuyTZ2eKfiXX44y1ZHlGCr+1ryh7SVSm4RpRjJS9562d0r9LXSu2kR/tq/snWf" +
                        "7Pv7SH7Pn7Sur/s3S/tcfsy+FvAWmfs+fGPwLp+jx65q+mHQraS2s9Zjs5CQf3SxDe3yrsdHdPMRg/Cz" +
                        "xFlnWR43LIY5YHHzryrUpuXJGXO05U3L1vpu7ppPlaJ8VfDiOS57gs0ngHj8BChGhVgo88o8iajUUfS2" +
                        "uys02uZM+jP2TfGP/BOn4p/G3wbZfs7/sPan4T8XaXHd+J7P4t3nwzTQ9L0CaxikG2XUX5indgY49qkF" +
                        "sruzgH4jxGyzjbL8qqyzLNozpStF01X55TTttHqlu+ttbH3PhvmnA+Y5tSjluUSp1Y3kqrw/JGDV959G" +
                        "3oul9Lln/gnB4F8b+Fv21f+Cr+veJ/B2q+HNC8ZeN9A1DwhrWvafd2dpqsEeoeJ2eSzmuI0SdFEyEtGS" +
                        "BuX1FR44ZvhMRwrw7TpVYznTozUkpJuL5aOkkndPR79mX4F5Pi8PxXxHUq0pQhUrQcW4tKS5q2sW1ZrV" +
                        "bX3R0vwe8FeMrH/AILG/tbeOb3wlqdn4K1r4a+GtK0bxhdWF1Hpd3dRLou+GG7dBDJIvltuVWJGDkcGu" +
                        "HibNcLPwxy2hGpF1Y4io3G65kn7TVxvdLVa2O/hjKsVDxQzLESpSVKWHppScXytr2d0pWs3o9Ez6T/Ya" +
                        "/bA1/8AbG8EePvGGv8AwF1v4CzeCvENx4HttH8ZTSXDX6QQRymZXls7IrIhfZLEFYI2BvbPHwviz4aUe" +
                        "GMXRo08ZDFKpTU7xVrXbVvilo907q66I+88I/E2txRhK1apg54V06jhaTveyTv8MdVs1Z2fVn29X5Qfr" +
                        "IUAFABQAUAFABQBkXnh/QdR1XRtd1DRLS+1zw79o/4R/Wby2hlu7D7ZGIZ/s8zqXi81AFfYRuHByKANe" +
                        "gAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgD89f20v2QPG/wC0v" +
                        "8Xv2JfiJ4U8TaVoOmfsxePbT4r+LbHxCbsT6hZ2+qaVfNDafZoZV80rYOB5hUZI564/aPC3xLwmQ5Zmu" +
                        "GrU5SljKDpxcbWi3GavK7WnvLa7PxTxV8MsXn2Z5TiaNSMY4KuqklK95JSg7Rsnr7r3stj9Cq/Fz9rPg" +
                        "39qD9lHxl8c/wBpj9iD43eHvEemaRoH7L2seJfEfi7SdZN0LzUItai0uOJbPyIpE3IbFt3mMo5GM81+v" +
                        "8A+ImFynIc2wNSEpTxsKcYtWtHkc7812nrzK1kz8d8QPDnFZvn+UY+nUjGGCnUlJO95KahblsmtOV3u0" +
                        "feVfkB+xBQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQ" +
                        "AUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAH//ZC0AAAQAAAP////8BAAAAAAAAAAwCA" +
                        "AAAUVN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS" +
                        "2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYQUBAAAAFVN5c3RlbS5EcmF3aW5nLkJpdG1hcAEAAAAERGF0Y" +
                        "QcCAgAAAAkDAAAADwMAAABawQAAAv/Y/+AAEEpGSUYAAQEBAJYAlgAA/+4ADkFkb2JlAGQAAAAAAf/hE" +
                        "ZZFeGlmAABNTQAqAAAACAAHARIAAwAAAAEAAQAAARoABQAAAAEAAABiARsABQAAAAEAAABqASgAAwAAA" +
                        "AEAAgAAATEAAgAAABwAAAByATIAAgAAABQAAACOh2kABAAAAAEAAACiAAAAwgCWAAAAAQAAAJYAAAABA" +
                        "ABBZG9iZSBQaG90b3Nob3AgQ1M1IFdpbmRvd3MAMjAxMTowMToxOCAwOTo1MTowNgAAAqACAAQAAAABA" +
                        "AABYqADAAQAAAABAAAAgQAAAAAAAAAGAQMAAwAAAAEABgAAARoABQAAAAEAAAEQARsABQAAAAEAAAEYA" +
                        "SgAAwAAAAEAAgAAAgEABAAAAAEAAAEgAgIABAAAAAEAABBuAAAAAAAAAEgAAAABAAAASAAAAAH/2P/tA" +
                        "AxBZG9iZV9DTQAB/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBELCgsRFQ8MDA8VGBMTFRMTG" +
                        "BEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsNDg0QDg4QFA4ODhQUDg4ODhQRD" +
                        "AwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAEQgAOgCgAwEiAAIRAQMRA" +
                        "f/dAAQACv/EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYHCAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACA" +
                        "wQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQhEjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0" +
                        "UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXiZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGl" +
                        "qa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIEBAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI" +
                        "8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKygwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0p" +
                        "bXF1eX1VmZ2hpamtsbW5vYnN0dXZ3eHl6e3x//aAAwDAQACEQMRAD8A9VSSSSUpYGFkfWd31kyKsqoN6" +
                        "S3f6btrQ3aI9B1VgPqvts/wzH/+B/o1d+sPVj0jpN2axrX2t2tpY6YL3kMbu2/mtn1HIf1Y6rl9W6QzM" +
                        "y6212Oe9oLJDXBrtnqNa4vcz9z6af7Uvb939Di4P8JZ7sfc9v8ASri/wXWSSSTF6kkkklKSSSSUpJJJJ" +
                        "SkkkklKSSSSUpJJJJSkkkklP//Q9VWf1rrWJ0fE9e/32PltFDT7rHfut/dY3/CWf4NN1vreJ0bE9e/32" +
                        "PltFDT7rHeA/dY3/CWf4Ncb0zpnUfrX1F+fnvLcVp22WNkCAf6Hh/usb/hbf/R/82lK+sfU8rN+q/Trs" +
                        "pwddl5Ntzg0Q1orN1VdTP5DGOZ9JF6sOpdL6J9X+odPBZViU7rbRqA+8VPjIr/0NrvUb/X/ANHZ6Stf4" +
                        "wcGqjpXTxjsFVGPaaWVtEABzHFv/npdD0B1OX9XcEECyp+LXW9jgC0wwVWsc0/S+i5i0I5Bj5bBPh4gJ" +
                        "z44nY8XFH/oNGWM5OZzRvhJhDhkNxXq/wCmw+r31hxet4u9n6PJrgZGOTq0/vN/fqf+Y9ay87670LO+r" +
                        "Ga3q3SHOGIHaHVxqLj/ADF/+lxbPose7/i7P0vpW2dd9XvrDjdbxd7B6eTVAyKCZLSfzm/v1P8AzHqHm" +
                        "OXiI+9hPFhl/jY5fuyZcGeRkcWUcOWP+Lkj+/FL13rmJ0PB+25bXvrLxWG17Zkgu/wjq2fRY785XqrWX" +
                        "VMurMssaHtPk4bmrB+vHUcvpvSK8jDc1l/rta2xzGvLZZaS6sWh7Gv9uz6P0Fk9T6z9ZX9XwundNyhW/" +
                        "KxarA1zK9peW2WWuL31P2+2tNx8rPJESEoxB4vmP+b+a12TmYQkYkSlIcOkR+/8r26yuu/WDF6HXRZlV" +
                        "2WMveWTWGnbA3Fzg9zP+iubyOsfXToThb1djcvDs9rnsDBtJ/0dtLGenb+569PpPWX9aH9XuxcfKysxu" +
                        "d0u9xfg2bWMsgt3fpmU117bGN/RWfy/9GpsPJXkjxyhLHLrCXz/ANWP9Zizc5WORjGQnHpKPy/1pf1X0" +
                        "1JcrV1P6w9Cw8rN+sdteSz2MxKa9oe607vbvrrqayvb9Pf6n0P+3KOPb/jC6pj/ALQx7a8ep4300Qxm5" +
                        "vb0m3V3P2u/M+02s/zFEOUkbPuYxAHh9wy9Epdosh5kChwTMyOLgA9cY95PcLlfqh9Yc/qGN1LL6lYHs" +
                        "xiHtaxgaGM2vse1u33v+j+ej/Vf6y5PUbremdTq9DqOMJIALQ9rSGvlhnZazc3d+Y/+cqWL9RbDX0jrV" +
                        "ga15YzcGvEtMV2Ha9v5zE+OAxxZ4zA4x7XDLf55bxl/WWSziWTAYk8BGTiH9yP6Uf6r1nQut4nXMH7bi" +
                        "Nexgea3Ns27g5sH/BusZ9Fzfz1oriOn/W3qGN9VH9RySMrLdlHGolrWMH6NtjfUZQKvYxrbP5f5iWOz/" +
                        "GFm4reoU5lQa8bq6QapIPG0Cmyn/ty9N+5zF8c4QAlwcUjpKX9Vd97ga4YzmSOOojWMfF6/PzacDCvzb" +
                        "59LHY6x4aJMNG72zCH0nqdHVun09Qxw5tV0w10SC1zqntOwvZ9Nn7ywq+r9dt+rfU7eqYYx8rDY4V2WM" +
                        "9lhA/nPQs3sd6bvz/6PZ/g1Us+t2fhfVbBynxkdRznXNFr2gNArse11jq6vTa52z02MZ/1xNHKZCaHCf" +
                        "X7ehvXh9zi/u8K481jAs2PT7mo6cXB/jcT2iS4puP8A4xnUNzGZdVhcARQ00kkH/rP2b/2YXQ/V3P6ln" +
                        "9O9bqeKcTJa9zC0tczeBEWiqz31/S2f2E3Jy5hHiE4TANHglqE48/GeEwnCxY4xoX//0ez+tf1ZPVWjN" +
                        "xDGfSzYGOPtsrBL/R93tqs3O/RWf2Lv9JTmfVP6z+gWdH6l+iDD6WPa4bC1wOz7Jkt9uyxrvZXZ/wBbt" +
                        "/S/zvarm/rV9VWdUY7Mw2tbntbD2GA29oEenZPtbc1v81b/ANat/R/zKU3vrR0x3U+iZOPW3de0C2gcn" +
                        "fWd4a3/AIxu6r/rixP8XnV2W4tnSbHfpKSbscHvW8zY0f8AFXO/8GUfqp9aHse3pHVXODg70se6yQ4OB" +
                        "2fZMnd7vV3eyp7/APirP0n87n/WHoNwzn9V+rpdkVPsey5uI6X03615DW+md+y3c71P9H/xKuctKGTHL" +
                        "l5nh4jx45H9GbU5mM8eSOeA4uEcGSI/Sh/6C3Prd9azc5/RekzY6w+jkWsG4uLvYcXHaPpvf9Cx/wD1u" +
                        "v3/AM3qfVD6rno9TsvLM5+Q0NcwGW1Mnd6II+nZu/nbP+2v9JbD6p/VJnSWNzc1rX9Qc2GtEFtLSP5uv" +
                        "9613+Ft/wCtVfo/57pkM+aEYexg+T9OfXLL/vU4cMpT9/N8/wChDpij/wB88p/jI/5Bq/8ADLf/AD3cs" +
                        "8f+LTo3/hSr/wA9ZC6X6y4XTs7Bqxuoi30bMipjH06Ftjz6NTnH/RudZ6X0f8IqLmfV49TPVGC05PSH1" +
                        "9PFTDLS5+2ijax3us2uynU79/5ln+jT8OUDCI1ImssdBpeXhjBZlxE5jKxvjl4/q/VJ0vrHWyzoHUW2N" +
                        "DgMa1wB8WtNjHf2Xt3LgM9trvqV0x/LGZN7PgXG1zB+D16Tc3Ez6MnDL22Me11OQ1jhubvG1zXbf5t+1" +
                        "yoYvS+iYHSn9IssZdiNDn2tyHsJ2ucSX2fQ2tbb9B/76Zy+cYogEEyGQT4f6vDKBX8xh9yRIIAMDC/63" +
                        "FxOJ9dr8fqvQKs3p1zcmnHua+7YZ2te19e61n069r3s9j2rP6Z0nE6hiMvb9Y7aXbQLKLH7XVkCPT2uv" +
                        "b7W/mO+gun6b9X+g9IybvQPv6g3YKLbA8Fg3ONdVb/dYz3e7f6qy2fVD6r9SsstqF2JtutxxS17Q0vpc" +
                        "5lhpZZ63s9m7+p/g1Njz44wMIynGETxRycEZaT/AEZRl/0mLJhnKfGRGUpDhlDjlH5f0oyim6H9U68Xq" +
                        "dfV2dUOeWb2uMB24lvpe671LPoLH+pb2N6R1ykuAt9Iu9M87Qyxhd/n+1dZ9XukdL6Vi219NsN1dlhdY" +
                        "8vD/cAK9v6MNY3ZtWKKugnqVfVKunZllnVaXmljNgrs9av1sl7Weux9d3ou/SbnMZ/o/wBL+kTY5jP3Y" +
                        "yMp6Q4ZcMYfzR9zhlH0/wBZMsIgMUogQ+fijcpj9cODi4vU5nQ7+jU/Uy39sVutxrM0sY2sEv8AULK3M" +
                        "dU4FuxzGte7dv8A/Sam36t41NTs/wCr3Xm01kAn1LPTj879PdSWbf8Ai7sVdDjdM6F0zG/5v2ML8bJY/" +
                        "IsfkOaWmH00w9/s2277afR9Nn+D/wBKqNv1B+rTsr0/XurtfLmY4tYTtH7nq12X7P7aeOYhxTPFOAnIz" +
                        "+UZMc4f3P0Vp5eXDAcMJmMRH5vbyQl/fc/E691Dqf1f63iZzm3vxKCW5LAAHB29sO2Btbv5v9E9rP0la" +
                        "fHu6A36m9Mp6015ZdbcKX1Al9bhbdvvDm/m1td7/wCc3/6GxdLR0boNPT7+kY4Yyq+sm8NfNha4bPXe8" +
                        "l1nb2v+glR0Tojuljou1uVjYx9zHu3Pa5xNvqOeza+q13qOd7PTUZ5jFrwxnCPuDJUPQRHg4OIfu+teM" +
                        "GTS5RnL2zj9XqHFx8df4ryzvq99gqOd0Hr9VeOTP6S0Vt/65ZUXUWu/4zGW79S+u5vWMK77aA63GeG+s" +
                        "0bQ8OG73NHs9Rn5+z+QqQ+on1Xc37U3KtNGrtwtrLIbO/8AS+nu2s2+79Kul6dg4GBito6fW2rH+k3YZ" +
                        "3bv8IXkudZu/fc5LmM2OWMxs5J3pOUBjlCuhl+knl8OSOQHTHCtYRmZxnfYfov/0vVUkkklPOfWn6rN6" +
                        "mx2bhNDeoNb7maBt7QP5t8+1tzf8Dd/1q39H/Mz+qf1cf0il2RkuP2zJaBZU1x9Oto+jXtafTtub+ff/" +
                        "wBbp/R/zvQJJKUkkkkpp9YxLMzpt9FX88W76JMD1ayLsf3f8fXWsejoGcMzBusLNprN2fwYymm++k1t/" +
                        "PZ9p6lkW/8AoNSukSVjF7vtnhrhuV334f5f4bBl9rjHFfFQ27cTz31b6Pk4NlZyqrGW4+P9mNm6g0v9z" +
                        "X7qvs9dWVZucz1Wvzf0rPWu/PsssTV/V6cnDttxaXbMzNvyXENJLLnZDsYu0/SfTxvb/g/+tLoklJL3u" +
                        "Oe10eLh4v3cm3/P/wANZH2uCN3w2K4q/eg8e/oXWvsGNhir3U00tre11UMfVe+9zbb7GnK2V0tx/sTcX" +
                        "8/1fWRn9A6sXZ23Y4Z4zaq3Pdrji59l1NtG0fzWbLWZv+H9T0P8HV6bOqSUh9/X+b+aV1+8sHs6fP8AL" +
                        "Hf91x+gYFmM6+62m3HstbUwssOPt/RBwHpN6eyqvazf6XqWt9V9bKv9Gg4fSs6pn1fFjAD06pzMr3A7S" +
                        "aPQ9v7/AOkW8koD7nFP5dtauq9qfy/9TZRwcEL4qsVdcV+7D5v8Nyuo9K+29RZbbTXfjsxL6gLAHAWWO" +
                        "p2+x371bLPeslvR+tOfgNuqBOKcFxta6qIpDG5fr2uY7Nuyt3rsr9Oz7L9nf/pPUrt6tJOxe7wiuGq9P" +
                        "Hff9FGT2+I3xXevDTxnR8N1uDi5FeGyurGszb7c6WbrGuGVj+g1rf0znPfYx13q/odmNX/Oez0lh9FzM" +
                        "3pWP9lxa8EDpgoNoc0faDace/Z+ja9/oenRb6j8lu/1Mt/6C2v1fV7NJTH3eI0I8XFprP8Aeyfven99i" +
                        "j7fCLMuHh10j+7D931f9285i9De+zHtux7Nv237RkVZRocIbi241d1dWE1uN/PPpZ/pf0XqrQ6RRlYTG" +
                        "4Rxm14wdk2Nsa9u1gdkPfi47aR+a7Gt3/8ABen6S00lXze5R4+Hh0quLh/T4eFnxcGnDxXrvw3+jxW//" +
                        "9n/7RjQUGhvdG9zaG9wIDMuMAA4QklNBCUAAAAAABAAAAAAAAAAAAAAAAAAAAAAOEJJTQQ6AAAAAACTA" +
                        "AAAEAAAAAEAAAAAAAtwcmludE91dHB1dAAAAAUAAAAAQ2xyU2VudW0AAAAAQ2xyUwAAAABSR0JDAAAAA" +
                        "EludGVlbnVtAAAAAEludGUAAAAAQ2xybQAAAABNcEJsYm9vbAEAAAAPcHJpbnRTaXh0ZWVuQml0Ym9vb" +
                        "AAAAAALcHJpbnRlck5hbWVURVhUAAAAAQAAADhCSU0EOwAAAAABsgAAABAAAAABAAAAAAAScHJpbnRPd" +
                        "XRwdXRPcHRpb25zAAAAEgAAAABDcHRuYm9vbAAAAAAAQ2xicmJvb2wAAAAAAFJnc01ib29sAAAAAABDc" +
                        "m5DYm9vbAAAAAAAQ250Q2Jvb2wAAAAAAExibHNib29sAAAAAABOZ3R2Ym9vbAAAAAAARW1sRGJvb2wAA" +
                        "AAAAEludHJib29sAAAAAABCY2tnT2JqYwAAAAEAAAAAAABSR0JDAAAAAwAAAABSZCAgZG91YkBv4AAAA" +
                        "AAAAAAAAEdybiBkb3ViQG/gAAAAAAAAAAAAQmwgIGRvdWJAb+AAAAAAAAAAAABCcmRUVW50RiNSbHQAA" +
                        "AAAAAAAAAAAAABCbGQgVW50RiNSbHQAAAAAAAAAAAAAAABSc2x0VW50RiNQeGxAYsAAAAAAAAAAAAp2Z" +
                        "WN0b3JEYXRhYm9vbAEAAAAAUGdQc2VudW0AAAAAUGdQcwAAAABQZ1BDAAAAAExlZnRVbnRGI1JsdAAAA" +
                        "AAAAAAAAAAAAFRvcCBVbnRGI1JsdAAAAAAAAAAAAAAAAFNjbCBVbnRGI1ByY0BZAAAAAAAAOEJJTQPtA" +
                        "AAAAAAQAJYAAAABAAIAlgAAAAEAAjhCSU0EJgAAAAAADgAAAAAAAAAAAAA/gAAAOEJJTQQNAAAAAAAEA" +
                        "AAAeDhCSU0EGQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAAAAAAAAEAOEJJTScQAAAAAAAKAAEAAAAAA" +
                        "AAAAjhCSU0D9QAAAAAASAAvZmYAAQBsZmYABgAAAAAAAQAvZmYAAQChmZoABgAAAAAAAQAyAAAAAQBaA" +
                        "AAABgAAAAAAAQA1AAAAAQAtAAAABgAAAAAAAThCSU0D+AAAAAAAcAAA/////////////////////////" +
                        "////wPoAAAAAP////////////////////////////8D6AAAAAD/////////////////////////////A" +
                        "+gAAAAA/////////////////////////////wPoAAA4QklNBAAAAAAAAAIAAThCSU0EAgAAAAAABAAAA" +
                        "AA4QklNBDAAAAAAAAIBAThCSU0ELQAAAAAABgABAAAAAzhCSU0ECAAAAAAAEAAAAAEAAAJAAAACQAAAA" +
                        "AA4QklNBB4AAAAAAAQAAAAAOEJJTQQaAAAAAANJAAAABgAAAAAAAAAAAAAAgQAAAWIAAAAKAFUAbgB0A" +
                        "GkAdABsAGUAZAAtADEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAWIAAACBAAAAAAAAA" +
                        "AAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAABudWxsAAAAAgAAAAZib3VuZHNPY" +
                        "mpjAAAAAQAAAAAAAFJjdDEAAAAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0bG9uZwAAAAAAAAAAQnRvb" +
                        "WxvbmcAAACBAAAAAFJnaHRsb25nAAABYgAAAAZzbGljZXNWbExzAAAAAU9iamMAAAABAAAAAAAFc2xpY" +
                        "2UAAAASAAAAB3NsaWNlSURsb25nAAAAAAAAAAdncm91cElEbG9uZwAAAAAAAAAGb3JpZ2luZW51bQAAA" +
                        "AxFU2xpY2VPcmlnaW4AAAANYXV0b0dlbmVyYXRlZAAAAABUeXBlZW51bQAAAApFU2xpY2VUeXBlAAAAA" +
                        "EltZyAAAAAGYm91bmRzT2JqYwAAAAEAAAAAAABSY3QxAAAABAAAAABUb3AgbG9uZwAAAAAAAAAATGVmd" +
                        "GxvbmcAAAAAAAAAAEJ0b21sb25nAAAAgQAAAABSZ2h0bG9uZwAAAWIAAAADdXJsVEVYVAAAAAEAAAAAA" +
                        "ABudWxsVEVYVAAAAAEAAAAAAABNc2dlVEVYVAAAAAEAAAAAAAZhbHRUYWdURVhUAAAAAQAAAAAADmNlb" +
                        "GxUZXh0SXNIVE1MYm9vbAEAAAAIY2VsbFRleHRURVhUAAAAAQAAAAAACWhvcnpBbGlnbmVudW0AAAAPR" +
                        "VNsaWNlSG9yekFsaWduAAAAB2RlZmF1bHQAAAAJdmVydEFsaWduZW51bQAAAA9FU2xpY2VWZXJ0QWxpZ" +
                        "24AAAAHZGVmYXVsdAAAAAtiZ0NvbG9yVHlwZWVudW0AAAARRVNsaWNlQkdDb2xvclR5cGUAAAAATm9uZ" +
                        "QAAAAl0b3BPdXRzZXRsb25nAAAAAAAAAApsZWZ0T3V0c2V0bG9uZwAAAAAAAAAMYm90dG9tT3V0c2V0b" +
                        "G9uZwAAAAAAAAALcmlnaHRPdXRzZXRsb25nAAAAAAA4QklNBCgAAAAAAAwAAAACP/AAAAAAAAA4QklNB" +
                        "BQAAAAAAAQAAAAEOEJJTQQMAAAAABCKAAAAAQAAAKAAAAA6AAAB4AAAbMAAABBuABgAAf/Y/+0ADEFkb" +
                        "2JlX0NNAAH/7gAOQWRvYmUAZIAAAAAB/9sAhAAMCAgICQgMCQkMEQsKCxEVDwwMDxUYExMVExMYEQwMD" +
                        "AwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAQ0LCw0ODRAODhAUDg4OFBQODg4OFBEMDAwMD" +
                        "BERDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAA6AKADASIAAhEBAxEB/90AB" +
                        "AAK/8QBPwAAAQUBAQEBAQEAAAAAAAAAAwABAgQFBgcICQoLAQABBQEBAQEBAQAAAAAAAAABAAIDBAUGB" +
                        "wgJCgsQAAEEAQMCBAIFBwYIBQMMMwEAAhEDBCESMQVBUWETInGBMgYUkaGxQiMkFVLBYjM0coLRQwclk" +
                        "lPw4fFjczUWorKDJkSTVGRFwqN0NhfSVeJl8rOEw9N14/NGJ5SkhbSVxNTk9KW1xdXl9VZmdoaWprbG1" +
                        "ub2N0dXZ3eHl6e3x9fn9xEAAgIBAgQEAwQFBgcHBgU1AQACEQMhMRIEQVFhcSITBTKBkRShsUIjwVLR8" +
                        "DMkYuFygpJDUxVjczTxJQYWorKDByY1wtJEk1SjF2RFVTZ0ZeLys4TD03Xj80aUpIW0lcTU5PSltcXV5" +
                        "fVWZnaGlqa2xtbm9ic3R1dnd4eXp7fH/9oADAMBAAIRAxEAPwD1VJJJJSlgYWR9Z3fWTIqyqg3pLd/pu" +
                        "2tDdoj0HVWA+q+2z/DMf/4H+jV36w9WPSOk3ZrGtfa3a2ljpgveQxu7b+a2fUch/VjquX1bpDMzLrbXY" +
                        "572gskNcGu2eo1ri9zP3Ppp/tS9v3f0OLg/wlnux9z2/wBKuL/BdZJJJMXqSSSSUpJJJJSkkkklKSSSS" +
                        "UpJJJJSkkkklKSSSSU//9D1VZ/WutYnR8T17/fY+W0UNPusd+6391jf8JZ/g03W+t4nRsT17/fY+W0UN" +
                        "Pusd4D91jf8JZ/g1xvTOmdR+tfUX5+e8txWnbZY2QIB/oeH+6xv+Ft/9H/zaUr6x9Tys36r9OuynB12X" +
                        "k23ODRDWis3VV1M/kMY5n0kXqw6l0von1f6h08FlWJTuttGoD7xU+Miv/Q2u9Rv9f8A0dnpK1/jBwaqO" +
                        "ldPGOwVUY9ppZW0QAHMcW/+el0PQHU5f1dwQQLKn4tdb2OALTDBVaxzT9L6LmLQjkGPlsE+HiAnPjidj" +
                        "xcUf+g0ZYzk5nNG+EmEOGQ3Fer/AKbD6vfWHF63i72fo8muBkY5OrT+839+p/5j1rLzvrvQs76sZrerd" +
                        "Ic4YgdodXGouP8AMX/6XFs+ix7v+Ls/S+lbZ131e+sON1vF3sHp5NUDIoJktJ/Ob+/U/wDMeoeY5eIj7" +
                        "2E8WGX+Njl+7JlwZ5GRxZRw5Y/4uSP78UvXeuYnQ8H7blte+svFYbXtmSC7/COrZ9FjvzleqtZdUy6sy" +
                        "yxoe0+ThuasH68dRy+m9IryMNzWX+u1rbHMa8tllpLqxaHsa/27Po/QWT1PrP1lf1fC6d03KFb8rFqsD" +
                        "XMr2l5bZZa4vfU/b7a03Hys8kRISjEHi+Y/5v5rXZOZhCRiRKUhw6RH7/yvbrK679YMXoddFmVXZYy95" +
                        "ZNYadsDcXOD3M/6K5vI6x9dOhOFvV2Ny8Oz2uewMG0n/R20sZ6dv7nr0+k9Zf1of1e7Fx8rKzG53S73F" +
                        "+DZtYyyC3d+mZTXXtsY39FZ/L/0amw8leSPHKEscusJfP8A1Y/1mLNzlY5GMZCceko/L/Wl/VfTUlytX" +
                        "U/rD0LDys36x215LPYzEpr2h7rTu9u+uuprK9v09/qfQ/7co49v+MLqmP8AtDHtrx6njfTRDGbm9vSbd" +
                        "Xc/a78z7Taz/MUQ5SRs+5jEAeH3DL0Sl2iyHmQKHBMzI4uAD1xj3k9wuV+qH1hz+oY3UsvqVgezGIe1r" +
                        "GBoYza+x7W7fe/6P56P9V/rLk9Rut6Z1Or0Oo4wkgAtD2tIa+WGdlrNzd35j/5ypYv1FsNfSOtWBrXlj" +
                        "Nwa8S0xXYdr2/nMT44DHFnjMDjHtcMt/nlvGX9ZZLOJZMBiTwEZOIf3I/pR/qvWdC63idcwftuI17GB5" +
                        "rc2zbuDmwf8G6xn0XN/PWiuI6f9beoY31Uf1HJIyst2UcaiWtYwfo22N9RlAq9jGts/l/mJY7P8YWbit" +
                        "6hTmVBrxurpBqkg8bQKbKf+3L037nMXxzhACXBxSOkpf1V33uBrhjOZI46iNYx8Xr8/NpwMK/Nvn0sdj" +
                        "rHhokw0bvbMIfSep0dW6fT1DHDm1XTDXRILXOqe07C9n02fvLCr6v1236t9Tt6phjHysNjhXZYz2WED+" +
                        "c9Czex3pu/P/o9n+DVSz63Z+F9VsHKfGR1HOdc0WvaA0Cux7XWOrq9NrnbPTYxn/XE0cpkJocJ9ft6G9" +
                        "eH3OL+7wrjzWMCzY9PuajpxcH+NxPaJLim4/wDjGdQ3MZl1WFwBFDTSSQf+s/Zv/ZhdD9Xc/qWf071up" +
                        "4pxMlr3MLS1zN4ERaKrPfX9LZ/YTcnLmEeIThMA0eCWoTjz8Z4TCcLFjjGhf//R7P61/Vk9VaM3EMZ9L" +
                        "NgY4+2ysEv9H3e2qzc79FZ/Yu/0lOZ9U/rP6BZ0fqX6IMPpY9rhsLXA7PsmS327LGu9ldn/AFu39L/O9" +
                        "qub+tX1VZ1RjszDa1ue1sPYYDb2gR6dk+1tzW/zVv8A1q39H/MpTe+tHTHdT6Jk49bd17QLaByd9Z3hr" +
                        "f8AjG7qv+uLE/xedXZbi2dJsd+kpJuxwe9bzNjR/wAVc7/wZR+qn1oex7ekdVc4ODvSx7rJDg4HZ9kyd" +
                        "3u9Xd7Knv8A+Ks/Sfzuf9Yeg3DOf1X6ul2RU+x7Lm4jpfTfrXkNb6Z37LdzvU/0f/Eq5y0oZMcuXmeHi" +
                        "PHjkf0ZtTmYzx5I54Di4RwZIj9KH/oLc+t31rNzn9F6TNjrD6ORawbi4u9hxcdo+m9/0LH/APW6/f8Az" +
                        "ep9UPquej1Oy8szn5DQ1zAZbUyd3ogj6dm7+ds/7a/0lsPqn9UmdJY3NzWtf1BzYa0QW0tI/m6/3rXf4" +
                        "W3/AK1V+j/numQz5oRh7GD5P059csv+9ThwylP383z/AKEOmKP/AHzyn+Mj/kGr/wAMt/8APdyzx/4tO" +
                        "jf+FKv/AD1kLpfrLhdOzsGrG6iLfRsyKmMfToW2PPo1Ocf9G51npfR/wiouZ9Xj1M9UYLTk9IfX08VMM" +
                        "tLn7aKNrHe6za7KdTv3/mWf6NPw5QMIjUiayx0Gl5eGMFmXETmMrG+OXj+r9UnS+sdbLOgdRbY0OAxrX" +
                        "AHxa02Md/Ze3cuAz22u+pXTH8sZk3s+BcbXMH4PXpNzcTPoycMvbYx7XU5DWOG5u8bXNdt/m37XKhi9L" +
                        "6JgdKf0iyxl2I0Ofa3Iewna5xJfZ9Da1tv0H/vpnL5xiiAQTIZBPh/q8MoFfzGH3JEggAwML/rcXE4n1" +
                        "2vx+q9AqzenXNyace5r7thna17X17rWfTr2vez2Pas/pnScTqGIy9v1jtpdtAsosftdWQI9Pa69vtb+Y" +
                        "76C6fpv1f6D0jJu9A+/qDdgotsDwWDc411Vv91jPd7t/qrLZ9UPqv1Kyy2oXYm263HFLXtDS+lzmWGll" +
                        "nrez2bv6n+DU2PPjjAwjKcYRPFHJwRlpP8ARlGX/SYsmGcp8ZEZSkOGUOOUfl/SjKKbof1Trxep19XZ1" +
                        "Q55Zva4wHbiW+l7rvUs+gsf6lvY3pHXKS4C30i70zztDLGF3+f7V1n1e6R0vpWLbX02w3V2WF1jy8P9w" +
                        "Ar2/ow1jdm1Yoq6CepV9Uq6dmWWdVpeaWM2Cuz1q/WyXtZ67H13ei79Jucxn+j/AEv6RNjmM/djIynpD" +
                        "hlwxh/NH3OGUfT/AFkywiAxSiBD5+KNymP1w4OLi9TmdDv6NT9TLf2xW63GszSxjawS/wBQsrcx1TgW7" +
                        "HMa17t2/wD9Jqbfq3jU1Oz/AKvdebTWQCfUs9OPzv091JZt/wCLuxV0ON0zoXTMb/m/Ywvxslj8ix+Q5" +
                        "paYfTTD3+zbbvtp9H02f4P/AEqo2/UH6tOyvT9e6u18uZji1hO0fuerXZfs/tp45iHFM8U4CcjP5Rkxz" +
                        "h/c/RWnl5cMBwwmYxEfm9vJCX99z8Tr3UOp/V/reJnObe/EoJbksAAcHb2w7YG1u/m/0T2s/SVp8e7oD" +
                        "fqb0ynrTXll1twpfUCX1uFt2+8Ob+bW13v/AJzf/obF0tHRug09Pv6RjhjKr6ybw182Frhs9d7yXWdva" +
                        "/6CVHROiO6WOi7W5WNjH3Me7c9rnE2+o57Nr6rXeo53s9NRnmMWvDGcI+4MlQ9BEeDg4h+7614wZNLlG" +
                        "cvbOP1eocXHx1/ivLO+r32Co53Qev1V45M/pLRW3/rllRdRa7/jMZbv1L67m9YwrvtoDrcZ4b6zRtDw4" +
                        "bvc0ez1Gfn7P5CpD6ifVdzftTcq00au3C2sshs7/wBL6e7azb7v0q6Xp2DgYGK2jp9basf6Tdhndu/wh" +
                        "eS51m799zkuYzY5YzGzknek5QGOUK6GX6SeXw5I5AdMcK1hGZnGd9h+i//S9VSSSSU859afqs3qbHZuE" +
                        "0N6g1vuZoG3tA/m3z7W3N/wN3/Wrf0f8zP6p/Vx/SKXZGS4/bMloFlTXH062j6Ne1p9O25v59//AFun9" +
                        "H/O9AkkpSSSSSmn1jEszOm30VfzxbvokwPVrIux/d/x9dax6OgZwzMG6ws2ms3Z/BjKab76TW389n2nq" +
                        "WRb/wCg1K6RJWMXu+2eGuG5Xffh/l/hsGX2uMcV8VDbtxPPfVvo+Tg2VnKqsZbj4/2Y2bqDS/3Nfuq+z" +
                        "11ZVm5zPVa/N/Ss9a78+yyxNX9XpycO23FpdszM2/JcQ0ksudkOxi7T9J9PG9v+D/60uiSUkve457XR4" +
                        "uHi/dybf8//AA1kfa4I3fDYrir96Dx7+hda+wY2GKvdTTS2t7XVQx9V773NtvsacrZXS3H+xNxfz/V9Z" +
                        "Gf0DqxdnbdjhnjNqrc92uOLn2XU20bR/NZstZm/4f1PQ/wdXps6pJSH39f5v5pXX7ywezp8/wAsd/3XH" +
                        "6BgWYzr7rabcey1tTCyw4+39EHAek3p7Kq9rN/pepa31X1sq/0aDh9KzqmfV8WMAPTqnMyvcDtJo9D2/" +
                        "v8A6RbySgPucU/l21q6r2p/L/1NlHBwQviqxV1xX7sPm/w3K6j0r7b1FlttNd+OzEvqAsAcBZY6nb7Hf" +
                        "vVss96yW9H605+A26oE4pwXG1rqoikMbl+va5js27K3euyv07Psv2d/+k9Su3q0k7F7vCK4ar08d9/0U" +
                        "ZPb4jfFd68NPGdHw3W4OLkV4bK6sazNvtzpZusa4ZWP6DWt/TOc99jHXer+h2Y1f857PSWH0XMzelY/2" +
                        "XFrwQOmCg2hzR9oNpx79n6Nr3+h6dFvqPyW7/Uy3/oLa/V9Xs0lMfd4jQjxcWms/wB7J+96f32KPt8Is" +
                        "y4eHXSP7sP3fV/3bzmL0N77Me27Hs2/bftGRVlGhwhuLbjV3V1YTW4388+ln+l/ReqtDpFGVhMbhHGbX" +
                        "jB2TY2xr27WB2Q9+LjtpH5rsa3f/wAF6fpLTSVfN7lHj4eHSq4uH9Ph4WfFwacPFeu/Df6PFb//2ThCS" +
                        "U0EIQAAAAAAVQAAAAEBAAAADwBBAGQAbwBiAGUAIABQAGgAbwB0AG8AcwBoAG8AcAAAABMAQQBkAG8AY" +
                        "gBlACAAUABoAG8AdABvAHMAaABvAHAAIABDAFMANQAAAAEAOEJJTQQGAAAAAAAHAAcAAAABAQD/4Q3Qa" +
                        "HR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNc" +
                        "ENlaGlIenJlU3pOVGN6a2M5ZCI/Pg0KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIge" +
                        "Dp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyO" +
                        "jAwICAgICAgICAiPg0KCTxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wM" +
                        "i8yMi1yZGYtc3ludGF4LW5zIyI+DQoJCTxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zO" +
                        "nhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZ" +
                        "G9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xL" +
                        "jAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVud" +
                        "HMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAv";
                    resourceString += "IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzUgV2luZG93cyIgeG1wOkNyZWF0ZURhd" +
                        "GU9IjIwMTEtMDEtMThUMDk6NTE6MDYtMDY6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMTEtMDEtMThUM" +
                        "Dk6NTE6MDYtMDY6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDExLTAxLTE4VDA5OjUxOjA2LTA2OjAwIiB4b" +
                        "XBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjM0NEMwOUFCMUEyM0UwMTE4MjAxQjJBMDJFNDdDMTk4IiB4b" +
                        "XBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjMzNEMwOUFCMUEyM0UwMTE4MjAxQjJBMDJFNDdDMTk4IiB4b" +
                        "XBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6MzM0QzA5QUIxQTIzRTAxMTgyMDFCMkEwMkU0N" +
                        "0MxOTgiIGRjOmZvcm1hdD0iaW1hZ2UvanBlZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9za" +
                        "G9wOklDQ1Byb2ZpbGU9InNSR0IgSUVDNjE5NjYtMi4xIj4NCgkJCTx4bXBNTTpIaXN0b3J5Pg0KCQkJC" +
                        "TxyZGY6U2VxPg0KCQkJCQk8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY" +
                        "2VJRD0ieG1wLmlpZDozMzRDMDlBQjFBMjNFMDExODIwMUIyQTAyRTQ3QzE5OCIgc3RFdnQ6d2hlbj0iM" +
                        "jAxMS0wMS0xOFQwOTo1MTowNi0wNjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9za" +
                        "G9wIENTNSBXaW5kb3dzIi8+DQoJCQkJCTxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6a" +
                        "W5zdGFuY2VJRD0ieG1wLmlpZDozNDRDMDlBQjFBMjNFMDExODIwMUIyQTAyRTQ3QzE5OCIgc3RFdnQ6d" +
                        "2hlbj0iMjAxMS0wMS0xOFQwOTo1MTowNi0wNjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgU" +
                        "GhvdG9zaG9wIENTNSBXaW5kb3dzIiBzdEV2dDpjaGFuZ2VkPSIvIi8+DQoJCQkJPC9yZGY6U2VxPg0KC" +
                        "QkJPC94bXBNTTpIaXN0b3J5Pg0KCQk8L3JkZjpEZXNjcmlwdGlvbj4NCgk8L3JkZjpSREY+DQo8L3g6e" +
                        "G1wbWV0YT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3hwYWNrZXQgZW5kPSd3Jz8+/+IMWElDQ" +
                        "19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAAS" +
                        "UVDIHNSR0IAAAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUY" +
                        "mtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZ" +
                        "G1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkd" +
                        "GVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5c" +
                        "mlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDN" +
                        "jE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAA" +
                        "AAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgA" +
                        "AAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0c" +
                        "DovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ" +
                        "GVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAA" +
                        "AAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJR" +
                        "UM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5N" +
                        "jYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLA" +
                        "ANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPA" +
                        "AAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKA" +
                        "E8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgA" +
                        "OUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhA" +
                        "akBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsA" +
                        "rYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGB" +
                        "BMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1B" +
                        "cUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B" +
                        "9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonC" +
                        "j0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzD" +
                        "Q0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmE" +
                        "EMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE" +
                        "+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF" +
                        "/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSH" +
                        "HscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFII" +
                        "XUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3J" +
                        "ugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiL" +
                        "NctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM" +
                        "0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5O" +
                        "jY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQ" +
                        "axB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljS" +
                        "alJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmU" +
                        "jFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W" +
                        "0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZ" +
                        "OllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27Eb" +
                        "x5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJe" +
                        "ed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjh" +
                        "UeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWk" +
                        "T+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kn" +
                        "dKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPq" +
                        "wKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZu" +
                        "NG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx" +
                        "0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1" +
                        "lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5" +
                        "g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9" +
                        "m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///9sAQwABAQEBAQEBAQEBAgEBAQICAQEBA" +
                        "QICAgICAgICAwIDAwMDAgMDBAQEBAQDBQUFBQUFBwcHBwcICAgICAgICAgI/9sAQwEBAQECAgIEAwMEB" +
                        "wUEBQcICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI/8AAEQgAg" +
                        "QFiAwERAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFB" +
                        "QQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2N" +
                        "zg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoq" +
                        "aqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBA" +
                        "QEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETI" +
                        "jKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZ" +
                        "mdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1" +
                        "NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A/v4oAKACgAoAKACgBrukaPJI4jjjB" +
                        "eSRyAqqBkkk9AKAPxW8Zf8ABdD9lbwv8SbvwbpfhLxN4y8I6ZdPpV/8SfD8OnfY5SjlDPZ29xcxyzQZ5" +
                        "DtsJGSqkYzHOjRUmfsH4J8aeF/iP4Q8NePfBOsReIPCXi+yt/EPh3WrIny7i0uoxLG4DAMpweVYAqcgg" +
                        "EEVZm0dRQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQA" +
                        "UAFABQAUAFABQAUAFABQAUAFAGD4q0GHxV4Y8R+F7i5ezt/ElheaDPd2uPNiS8t3t2dN3G5Q+RnvQB/E" +
                        "T4z/wCCXH7b3hT4k3vw5svgZqvi/ZdGx0jxp4ZWKXQb2BpCsVwL6R0hgR1G4rOyMmcOFNY8rOpVEf2Cf" +
                        "shfBXVP2dv2afg98GNd1OPV9d8DaSllr19ZktAb65nkvrhIWZULRRyzskbFQSoBIB4rVI55O7PpCmSFA" +
                        "BQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQA" +
                        "UAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAF" +
                        "ABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQB/nr/APBRD9rHxn+1T+1H8T/Ft14vvdU+HfhzW77QP" +
                        "hBohuJRY2GjafcG0tpreAMUjkuFiE0rjksx5wBj/aDwV8OsLw9w/h6KpKNecFKq7auUldpvdqN+VLZJH" +
                        "+KXjd4j4riLiHEVnVcqEJuNJX0jCLsmlsnK3M3vdn9T/wDwQ4+LnxT+L37Ef2z4qa9eeKLvwR4s1b4f+" +
                        "Dtf8QSzXF5Podpp2m3kKyTzszyiGa7mhQk/KiKg4Wv8+fpZcN5flvFfLhIKCqUozko2SU3KadktFdRTf" +
                        "dtvqf6HfRI4lzHM+E+bFzc3TqyhCUrtuCjBq7ers5NLskl0P2Jr+ZT+nwoAKACgAoAKACgAoAKACgAoA" +
                        "KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAgurq2sra4v" +
                        "b24S0s7RHuru7unWOKKKNS7O7OQFVQCSScAUAfLH7XXxs0/4Y/sbfHL44eGtYhuYdO8Fajr/gjXbKVWg" +
                        "nu9SsDBpcscinDLJNcRFSOoPFfe+FvDyzbiPBYRq8Z1Y83+FO8v/JUz4DxV4ieU8N47Fp2lTpS5f8TVo" +
                        "/8AkzR/nK1/uCf4Yn92/wAD9Vs/+CfH/BJDwj47fRobjWfh74AX4nXWjahvjS68SeJj/asdtcuuHx9t1" +
                        "FIGIOQowvAFf5F8WYeXGfiRVw/M1GrX9nddKdP3W10+GLkvPc/1/wCEsRDgrw1pYjkTnSoe0s+tSp7yT" +
                        "6/HNRflsfT37FX7avwm/be+E1p8Rfh1djTdf00Raf8AET4d6hKj6joGouhPlyYC+ZBJtYwThQsig8K6u" +
                        "i/A+KfhZmPCmYvDYlXg7uE0vdnHuuzX2o7p9003+geFPitlvFuWrE4Z2mrKcG/ehLs+6f2ZbNdmml9h1" +
                        "+Zn6cFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQA" +
                        "UAFABQAUAFABQBBdXVtZW1xe3twlpZ2iPdXd3dOscUUUal2d2cgKqgEkk4AoA/lI/4Kc/8ABTrUv2gNV" +
                        "1D9mv8AZv1d4fhK1wND8X+NNPk8mXxbcmQRfZoHJXbpwbgkkeeeT+7+/lKRvCFtWfpJ/wAFrtVh+Gf/A" +
                        "ATV8QeBtLmMFlr+peD/AIa2wwdz29jexamFztbGV0wZ5GRxk5wf6c+iTlixHGlGbX8KFSX/AJLyf+3f1" +
                        "ufy79LvNHh+Cq0E7e1nTj/5Nz/+2/1sfxafDjwlL4++IfgPwLCzrN411nS/CUTQY3htSvorMFcgjOZOO" +
                        "K/1TzzMlg8FWxD2pwlL/wABTf6H+UOR5a8bjaOHW9ScY/8AgTS/U/tB/wCC7etaj4U/4J76l4e0DT7g6" +
                        "P4n8T+F/CGtDTY5XgtdOtpJtVjacoGCRefYQoGYgb2QZyQD/lz9EXCwxHGkalSS5oU6klfdydou3d2lJ" +
                        "6dE3sf6ofS/xdTDcFSp04vlnVpxdtlFXkr9leMVr1aW9j+RH9mH9p74s/sj/FnQ/i/8INcOm63pp+yaz" +
                        "o13vfTtZ053VprG+hVl8yGTaO4ZWAdCrqrD/Sbj7gHLuJMung8ZC8HqmvijLpKL6Nfc1o7ptH+aPh/4g" +
                        "Zlw1mUMbgp2mtGn8M49YyXVP707NNNJn95/7FX7avwm/be+E1p8Rfh1djTdf00Raf8AET4d6hKj6joGo" +
                        "uhPlyYC+ZBJtYwThQsig8K6ui/5A+KfhZmPCmYvDYlXg7uE0vdnHuuzX2o7p9003/sT4U+K2W8W5asTh" +
                        "naaspwb96Euz7p/Zls12aaX2HX5mfpwUAFABQBynjjxz4P+GnhPXPHfj7xHaeEvB/hqH+0Nd8Ra5KsFt" +
                        "bRbhGCzN3ZmCqo5ZiAASQKASPI/gN+1f+zz+05Brk3wM+KFl49fw2yJrthbw3tje2yyMyJI9rqcFtN5b" +
                        "FSFkCbTjg0k7jcWj6HpiCgAoAKACgD4G8R/8FQv2EPB/wAVdc+Cviz9oG08NfEbw1qk3gzX9J17RvEtp" +
                        "aWmo28xgkjl1GfTlslVXGDIZ9nfdiv2LA+APF+Jy6GOo4JzoTipxalTbcWrpqKnz7dOW/kfjWO+kFwfh" +
                        "cxnga2NUK8JOEk4VElJOzTm4cm/Xmt5n3rFLFPFFPBKs0EyrLDNEwZHRhkMpHBBHQ1+Pyi07Pc/Y4yTV" +
                        "1qmSVJQUAFABQAUAfFP/BRj4q+Mvgn+xJ+0T8Svh9qj6H4z0DQ1tdA1u2JWaym1K/t9KNxCw+7LEtyXj" +
                        "bswB7V+qeCPD2FzXivBYXEx5qUp3kujUU5Wfk7WfkflPjjxFisp4Tx2Kw0uWrGFovqnKSjdeavdeZ/IT" +
                        "/wSt+IXj7xZ/wAFHv2cLrxT441jxLc6rq2qS6pceINTvbyS5b/hHNQOZWuZHLngctmv9KPpCZNg8NwPj" +
                        "lSpQgoxjblilb347WWh/md9HfOsZieOsC61ac3Kcr80m7/u5b3ep/dxret6N4a0bVfEXiLVbbQtA0K2m" +
                        "1jW9b1iaO2tLO0tozNLNNLMVRI0RSzMxAAGTX+QZ/sOfPHwR/bL/Zj/AGjtf1vwr8Fvi9p3jjxJ4eja8" +
                        "1PRLeK+s7nyEdY2mhTUYLczxKzKGki3KCRk8ikmmU4tH03TJCgAoAKACgD5d+M37an7Lf7PfizSPA3xi" +
                        "+MumeC/FutJHc2mhXEd7dzxQy52SXP9nwTi2jbadrzlFPY0m0Uotn0vp+oWGrWFlqulXsOp6XqcMeoab" +
                        "qWnyJNBcQTIJI5I5IyVdHUgqwJBByKZJboAKACgAoAKACgAoAKAILq6trK2uL29uEtLO0R7q7u7p1jii" +
                        "ijUuzuzkBVUAkknAFAH8n//AAVG/wCCo1z8cLnW/wBnv9nvW3tPg1aO2n+OfHOns0cviuWNsNBAwwV05" +
                        "SOT1nPJ/d4D5SkdFOnY/Jr9m7wB4n+J3x4+E3gvwj4an8W6xquvaW50XT4vNL2sF5HPcPJnCrFHEjPI7" +
                        "EKqgkkAVKLk9D+kj/g4ennh/Yn+G8cUzxR3XxP0SC5SNiokQeFvEUoVgOo3IrYPcA9q/sT6FcE+Kq91t" +
                        "hp/+nKR/GP02ptcKUEnviYf+m6p/LR+xNbQXn7Zn7I9pdQrcWt18TvAVtcwSgMjxv4qsVZWB6gg4Nf6C" +
                        "eKs3HhfMmnZrDVv/Tcj/PTwngpcU5Ymrp4mj/6cif6K/jDwf4W+IHhbX/BPjbQLXxT4R8U2s2ieIfD2t" +
                        "wpPa3lrOhR45EcEEEH8Oo5r/EzLMzxGCxEK9CbhUg04yTs01s0z/cDM8sw+Nw86FeCnSmmpRaumnumj+" +
                        "In/AIKh/wDBLzxT+xZ4puPiR8N7e68U/s0eKbry9H1iTfPdeGLqd/k07UX5JjJOLe4P3/uP+8wX/wBW/" +
                        "AHx+w/FOHWGxLUMfBarZVEvtR8/5o9N1pt/k19IL6PuI4UxDxWFTngJvR7um39ifl/LLrs9d/gf9mH9p" +
                        "74s/sj/ABZ0P4v/AAg1w6bremn7JrOjXe99O1nTndWmsb6FWXzIZNo7hlYB0KuqsP2Hj7gHLuJMung8Z" +
                        "C8HqmvijLpKL6Nfc1o7ptH434f+IGZcNZlDG4KdprRp/DOPWMl1T+9OzTTSZ/ef+xV+2r8Jv23vhNafE" +
                        "X4dXY03X9NEWn/ET4d6hKj6joGouhPlyYC+ZBJtYwThQsig8K6ui/5A+KfhZmPCmYvDYlXg7uE0vdnHu" +
                        "uzX2o7p9003/sT4U+K2W8W5asThnaaspwb96Euz7p/Zls12aaX2HX5mfpwUAFAH5ff8Fd/A3jb4l/shT" +
                        "+A/h54cvfF3i7xP4p8O6fpPhzw/C89zdMJ5JiAifwqELsx4UAsSAM1M9i6b1PgD/gk5+wl+1z+zT+0xq" +
                        "nxC+Mnwuk8C+B9U8J6p4afUhr3h2+826ub6wuoYXt9K1C5m58gt8yYBXkg4qYxaZdSaaP6QK0MQoAKAC" +
                        "gAoA/ztP+CiX/J9f7Wn/Y++I/8A04yV/td4Kf8AJI5b/wBeKf8A6Sj/ABE8bv8Akr8y/wCv9T/0pn913" +
                        "7E1zcXn7GX7I95eTvdXd18MfANzdXVy7PJJI/hWxZmZmJJYk5JPWv8AI7xVhGPFGZJKyWJrf+nJH+vnh" +
                        "RUlLhbLJSd28NR/9NxPp2vgj78KACgAoAKAPzi/4K4/8o6P2nv+wVpf/qR6dX7h9G7/AJLfAf4pf+m5n" +
                        "4Z9JX/kh8w/wx/9OQP5If8Agkd/ykX/AGYf+wrqn/qOajX+j30kf+SIx/8Ahj/6cgf5sfRq/wCS4y//A" +
                        "BS/9NzP7FP+CleieIfEv7EHx58OeE9Lu9b8Sa/Z6Tomi6LoUUs95eT3XiGwgWCKOAF3aTdt2gc5xX+N8" +
                        "tj/AGchufiZ/wAE1f8Agnp+2d8Dv2wPg18X/iZ8H5vBvw40eLXz4j1mfXfDcskUWoeF9RsrdZbOz1GW5" +
                        "O64miBXyiVOCwABIiMXc1nNNH9TVamAUAFABQAUAfyP/tvfsNfta/tNftt/tLeMvg78H7/xj4XtdW03T" +
                        "F8SX99pWk2cz2/h7T4jHbza7d2azeXgKwiLbcYOMYrKUW2dEZJI/o//AGKvh/45+FP7KfwL+HHxK0xtF" +
                        "8c+DNBt9B8RaRLdW16baWB3VYvOs5Z4nCptA2OQBwOlaR2MZPU+oaZIUAFABQAUAFABQBBdXVtZW1xe3" +
                        "twlpZ2iPdXd3dOscUUUal2d2cgKqgEkk4AoA/k//wCCo3/BUa5+OFzrf7Pf7PetvafBq0dtP8c+OdPZo" +
                        "5fFcsbYaCBhgrpykcnrOeT+7wHylI6KdOx+Nnwu+F3jz40ePPDfwz+GfhufxX408VzjT9H0fTwMscbnk" +
                        "kdsLHFGoLySOQqKCzEAVCRo3Y/tR/YB/YB8B/sU+A97+R4r+NXiuCNfiD8QVjOFGRJ/Z+n+YA0dpGwGT" +
                        "gNKwDuBhETaMbHNOdz49/4OC9Dm1b9hrwxfxbtnhj4h6BrlzsUEbJNG1nTRuJIwN12OfXAr+tvoZ4tU+" +
                        "LakX9uhNf8Ak1OX/tp/If008I6nCNOS+xiIP/ySpH/24/ku/ZU8RxeD/wBqH9m7xbO6RQeFvH3g/wARz" +
                        "SXIZo1Sx8Q2lyS4QglQE5wc1/o14h4F4nh/HUVvOhVj98JI/wA3fDrHLC8QYCs9oV6UvunFn+k5X+GJ/" +
                        "u2c34w8H+FviB4W1/wT420C18U+EfFNrNoniHw9rcKT2t5azoUeORHBBBB/DqOa7sszPEYLEQr0JuFSD" +
                        "TjJOzTWzTOHM8sw+Nw86FeCnSmmpRaumnumj+In/gqH/wAEvPFP7Fnim4+JHw3t7rxT+zR4puvL0fWJN" +
                        "8914Yup3+TTtRfkmMk4t7g/f+4/7zBf/VvwB8fsPxTh1hsS1DHwWq2VRL7UfP8Amj03Wm3+TX0gvo+4j" +
                        "hTEPFYVOeAm9Hu6bf2J+X8suuz13+B/2Yf2nviz+yP8WdD+L/wg1w6bremn7JrOjXe99O1nTndWmsb6F" +
                        "WXzIZNo7hlYB0KuqsP2Hj7gHLuJMung8ZC8HqmvijLpKL6Nfc1o7ptH434f+IGZcNZlDG4KdprRp/DOP" +
                        "WMl1T+9OzTTSZ/ef+xV+2r8Jv23vhNafEX4dXY03X9NEWn/ABE+HeoSo+o6BqLoT5cmAvmQSbWME4ULI" +
                        "oPCurov+QPin4WZjwpmLw2JV4O7hNL3Zx7rs19qO6fdNN/7E+FPitlvFuWrE4Z2mrKcG/ehLs+6f2ZbN" +
                        "dmml9h1+Zn6cFAH57f8FQf2nPH/AOyV+yB43+K/wtW2i8fS3ul+D/DmrarClzDp0up3PlvdeRKGSV441" +
                        "by1cFN5BYMoKt+0eAPAWD4j4lpYTF39jaUpJOzlyr4brVJu12tbXs09V+KfSB4/xvDfDNbGYS3trxjFt" +
                        "XUeZ/FZ6NpXsnpe101o/wAa/wDgjd+3l+1v+0j+1xqPw8+N3xovvH3g2HwfrPiKLQtQstIt4xe217p8U" +
                        "Uu6xtIHyqzOMbsc9K/p36TvhBw3kXDccTgcKqVV1YxunJ6NSutZNdEfy79F3xi4lz3iWWGx+KlVpKjOV" +
                        "morVOKT0in1Z4B/wUh/4KQ/ttfBb9tr4+fDD4YfHzUPCXgPwlqGn2fh3w7Z6foc0drHNodldOqvdWUsh" +
                        "zJKzfMx619l4HeB3Cma8KYPFYrBxqVqkZOUnKavacl0klsl0PjPHTx04syrizGYTCYyVOjTlFRiowdrw" +
                        "i+sW92+p8Qf8Pcf+Ci//Rz2q/8Agr8Of/K6v1f/AIlu4I/6AI/+BVP/AJM/Jf8AiZXjj/oYS/8AAaf/A" +
                        "MgegfD/AP4LW/8ABQ/wNq0N/qHxhtPiNpyP50/hv4geH9FmtJjwMNLplvY3Sjjok6/nXj5z9FfgrF03G" +
                        "OGdKX80JzTXyk5R++LPZyX6VvG+DqKUsUq0f5Zwg0/nFRl90kfux+zL/wAFVPAv/BQTwrdfAS88caj+x" +
                        "n+1FrcYXwL4n8Oy2GoaZqOoxoQgsm1aB45C7ffsZ0DspxFMzjcv8jcefR6xfBmIWYRpRzDL4/HGScZRj" +
                        "15uV3Vuk4uyesopaP8Ar/gH6ROD40w7y6VaWX5hJe5KLjKMpdOXmVnfrTkrtaRk3qvxu/aj/bV/4Kzfs" +
                        "jfGPxJ8GPit+0ZqdtrWjEXmj61ZaV4eNhrOlyuy29/Zu+mgtDKEPUBlYMjAMrAf074f+FfhzxJllPG4T" +
                        "AxcJaNOU7xkt4y9/dfc1ZrRo/l3xC8VvEjhrNKmBxmOkpx1TUYWlF7Sj7mz+9O6eqZ+RHjzx14s+J3jP" +
                        "xP8Q/Hesv4h8ZeM7248R+J9duUhjku726kMssrLAkaAsxJwqge1f0llGUYbAYWnhsPHkpU0oxWuiWy1u" +
                        "z+aM4zfE5hiqmJxEuerUk5Semrerell9x9m+Dv+Cof7enw/8IeFfAfg/wDaK1LRPCPgnTbHwj4W0WDTd" +
                        "AkSz07TbVLO2gVprB3YRxRqoLMScckmvy/M/ADg/G4mpiK2BjKpUk5SfNPWUndvSVtW76H6llf0guMcF" +
                        "hqeHoY6UaVOKjFcsNIxVktY30Stqf1uf8Ejv2qviz+1v+yUfiF8bDHd+M/CfiPU/h3N4shtY7Ia3a2Nj" +
                        "Y3yXzxQJHCHzeNC5iUIWjJwDkV/nD9JDw8y7hviP6tgbqlOnGfLe/I25Llu7u3u3V9bP0P9J/o1eIuZc" +
                        "S8N/WcfZ1adSUOa1udJRfNZWV/ecXZWvHvc/Pb9vP8A4Lwaf8PPEOufCj9jvSNP8aa3o7yaXr/xp8Tq9" +
                        "zo8NwqlHTSrSJ0+0tGx/wCPiVhFuUhY5UIev2jwg+iHPG0YYvOpSpwlrGlHSTX9+WvLf+Ve9Z6yi9D8U" +
                        "8YvpgwwNeeDyWMak46Sqy1in/cjpzW/mfu3WkZLU/CXxV/wU/8A2/vGOpy6tqv7VHiqxuZSzmDwrdQ6H" +
                        "ajdjhbfRorWIAY4+X+tf1zl3gHwbhafJDL6TX95Ob++Tb/E/kDMfpAcZ4qpzzzGqn/dagvugor8D374D" +
                        "f8ABa/9uj4OatYnxV49h+OfhGJ0F94X+KFrBLO8X3X8rUrNIbtJCPutI8iggEoeQfjuMPorcJZnTfsqL" +
                        "w1TpKm3b5wd429En5o+04O+ldxfldRe2rLE0usaiV/lNWkn6tryZ/WN+w7+3v8ABn9urwBc+Jvh9K/hz" +
                        "xr4cEUPj/4X65NG+paTLKPlkVkCi4tZCCI51UA4IZUYFR/nT4seD2acI4xUsT79KfwVEvdl5eUl1i/k2" +
                        "tT/AEd8JPGTK+L8E6uG9yrC3PTb96L7/wB6L6SS9UnocH/wVx/5R0ftPf8AYK0v/wBSPTq9j6N3/Jb4D" +
                        "/FL/wBNzPH+kr/yQ+Yf4Y/+nIH8kP8AwSO/5SL/ALMP/YV1T/1HNRr/AEe+kj/yRGP/AMMf/TkD/Nj6N" +
                        "X/JcZf/AIpf+m5n9pv7cnx08Sfs1fsm/G/43eDrG31DxX4F0lbnw5Bqys9st7e3sGmwyyopBdYmuBIUy" +
                        "N23GRnNf5a+E3CVDPeI8Jgazap1Ze9beyTk0u17Wv0vc/1U8XOL6+Q8N4vH0UnUpQ92+121FN97N3t1t" +
                        "Y/m2/4Jgf8ABRr9tL4/ft5fBL4Y/Fv46Xvi/wAAeMH8UTeIfC82m6Ha285s/CGranAM2NlC6COeBHAVh" +
                        "90DpxX9y+Pvghwtk3CGLxWDwip1qfs+WXNNtXqwi95NO6bWvc/hP6P3jlxVnPGOEwmMxjqUantOaPLBJ" +
                        "2pTktopqzSenY/o+/bM/bP+EX7Efwpk+JfxRuZL++1KRtJ8DeBdGaP+09d1BVDmKASEKkcakNNM3youO" +
                        "rMit/D3hf4XZlxXmP1XCKyWs5v4YR7vu3sktW/JNr+6PFLxTyzhPLvrWLbbbtCC+Kcuy7Jbyb0S7tpP+" +
                        "Sn49f8ABcL9uH4u6nep4G8VWXwF8IyOwsvD/wAO7O3mvRFyF8/UtSjmnaQA8tD5Kn+6K/0d4P8Aon8J5" +
                        "bTXt6bxVXrKbaV/KEWlbyfM/M/za4x+lrxbmdR/V6iwtLpGCTdvOck3fzXKvI+OIf8AgoN+3NBqR1VP2" +
                        "t/iE10UEPlTeK9YktsKwb/j3knMOeOTsyRxnBNfpsvBnhJ0+T+zaFv+vcb/AH2v+J+Xx8auLlU5/wC0s" +
                        "Rf/AK+St917fgfen7O3/Bd79sT4Vanp1n8Xp9O/aE8ExukV/Z+JLW20rW47cdfs2o6VDGpfvuuIZs9OO" +
                        "o/IONvoicM5jTlLBqWFq9HFuUL+cZN6f4ZRP2Lgj6YPFGXVIxxrji6XVSSjO3lOKWv+KMj+sj9k79rT4" +
                        "Q/tl/Cez+LXwf1KeXTBO2ieI/DutxLBqejanHEkz2l1GjOu4LIrK6MyMpBDHkD/ADo8RfDnMuF8xeDxk" +
                        "VzWvGS1jKOylF/JqzSae6P9H/DjxIyzinLVjMFJ8t7Si9JRlu4yWq2ad02mtmfzZ/8ABUn/AIKk/thfD" +
                        "L9sL4kfBj4MfEg/CvwJ8Kzp+hWlpoWn6Xc3Go3FzpdtqM11dTajbXDbt1wUREKqFUcFiSf7m+j99H7hn" +
                        "H8M0MbjaHt61fmbblJKKUnFJKLXa7bu232sj+EvpC/SF4ny/ievgcDX9hRocqSUYtybipNtyT72SVkku" +
                        "92f0R/sE/Evxf8AFT9jH9n/AOKHxM8RN4h8YeKvDseueKvEt+tvA1xN50oaVxAkUa/KozhQOK/inxgyL" +
                        "DZfxRjMLhYclKFS0Yq7srLTW7P7c8HM+xWY8K4LF4qfPVnTvKTsru710sj8QP24f+C+GpaD4q1z4bfsY" +
                        "6PpuqWGiSyaZqHxv8WQtewXk0ZKu2kWe5EaJWHy3E+4SclY9u12/q/wn+h7TrYeGKzuUouSuqUXZpf35" +
                        "b37xjZrrK90v5M8W/pkVKOInhcjjGUYuzrSV03/AHI7W7SldPpG1m/xJ8Y/8FKv29vHN1dXmtftX+M7K" +
                        "W82+cng7VpPDsQ2sGGyLw+LJI+RzsUZHB4r+q8s8C+D8JFRhl1FpfzR5/xnzN/M/k7NPHjjLGScqmZVk" +
                        "3/LLkXyUOVL5HZ/DT/grB/wUB+F+oQXmmftIaz4rtUZXutI+JYtvEdvcIoA2M2rRzTIDt5MUiN15yTXl" +
                        "579HXg3MIOMsDCD707wa/8AAWk/mmvI9XIfpHcaZfNSjjp1F2qWqJ/+BJtfJp+Z/Rb/AME9P+C1Xgv9q" +
                        "PxT4e+Cnx18L2/ws+NPiORdM8J6z4daaTw3r92VJECC6eSayuHIxHFI8iueBIGKof4m8afosYrh/Dzx2" +
                        "AqOthYK8lK3tILvpZSiurSTX8tk2f3B4J/SswvEOIhgcwpqhi5u0XG/s5vtrdwk+ibkn/NdpH7sV/Ix/" +
                        "XwUAQXV1bWVtcXt7cJaWdoj3V3d3TrHFFFGpdndnICqoBJJOAKAP5P/APgqN/wVGufjhc63+z3+z3rb2" +
                        "nwatHbT/HPjnT2aOXxXLG2GggYYK6cpHJ6znk/u8B8pSOinTsfjZ8Lvhd48+NHjzw38M/hn4bn8V+NPF" +
                        "c40/R9H08DLHG55JHbCxxRqC8kjkKigsxAFQkaN2P7Uf2Af2AfAf7FPgPe/keK/jV4rgjX4g/EFYzhRk" +
                        "Sf2fp/mANHaRsBk4DSsA7gYRE2jGxzTnc/QmqIPzd/4K5fDmb4l/wDBPT9o3TLODztR8MabZfEazYAkx" +
                        "p4d1W21a6bA/wCnWCYe2c1+5fRuztYDjTAyk/dnJwf/AG/FxX/kzR+FfSVyN4/gnHRiryhFTX/bklJ/+" +
                        "Spn8CFtcz2dxb3drM1vdWrpc208RKukiMGVlI6EEZFf7EzgpRaaumf4005uMk07NH+l78DPiVY/GT4L/" +
                        "Cf4s6dIklp8SPDujeNU8nojalp8V06YwMFGcqQRkEYNf4S8W5FPK80xODlvRqSh/wCAyav89z/enhHPo" +
                        "ZplWGxkdq1OM/8AwKKdvlseqV88fRHN+MPB/hb4geFtf8E+NtAtfFPhHxTazaJ4h8Pa3Ck9reWs6FHjk" +
                        "RwQQQfw6jmu7LMzxGCxEK9CbhUg04yTs01s0zhzPLMPjcPOhXgp0ppqUWrpp7po/iJ/4Kh/8EvPFP7Fn" +
                        "im4+JHw3t7rxT+zR4puvL0fWJN8914Yup3+TTtRfkmMk4t7g/f+4/7zBf8A1b8AfH7D8U4dYbEtQx8Fq" +
                        "tlUS+1Hz/mj03Wm3+TX0gvo+4jhTEPFYVOeAm9Hu6bf2J+X8suuz13+B/2Yf2nviz+yP8WdD+L/AMINc" +
                        "Om63pp+yazo13vfTtZ053VprG+hVl8yGTaO4ZWAdCrqrD9h4+4By7iTLp4PGQvB6pr4oy6Si+jX3NaO6" +
                        "bR+N+H/AIgZlw1mUMbgp2mtGn8M49YyXVP707NNNJn99n7G/wC1f4E/bO+A/hn43eBLaXSE1CSbQfFnh" +
                        "a/dZLjRtaswhubR5EAWQASJJHIAN0boxCklR/jt4neHeM4XzepgcQ1K1nGS2lB7St02aa6NNXa1f+ynh" +
                        "d4jYPirJ6ePw6cb3jKL3jNbxv13TT6pp2T0X1NX58foZ+M//BeL/lH94h/7Gnwz/wClMlf0/wDRD/5LK" +
                        "H/Xqp+SP5b+mF/yRc/+vtP82fh//wAG/wB/yfXq3/YheIP/AE46XX9YfTJ/5JGP/X+H/pMz+SvoYf8AJ" +
                        "Xy/68T/APSoHy5/wVx/5SL/ALT3/YV0v/1HNOr7/wCjd/yRGA/wy/8ATkz8++kr/wAlxmH+KP8A6bgf0" +
                        "P8A/BNP9gP9jb4t/sOfs/8AxF+JP7Pfh/xh438T6dqN1r/iTV4Z2ubqSLXb62RnKSqMhI1UcdBX8V+O3" +
                        "jFxPlvFmNw2FxtSnShKPLFNWV4Rfbuz+2vAbwa4XzLhHBYnFYKnUrTjLmk07u05Lv2SPXPj7/wRG/Yf+" +
                        "Lvh2/g8B+CpvgR41Mbf2T4s8AXd5LbLMANguNOv55beSMEfMIxG5z98cV83wd9K3izLa6eIqrE0usZpX" +
                        "t5TSUk/XmXkfS8ZfRN4SzOg1h6TwtXpKDdr+cJNxa9OV+Z/H3+07+zd8V/2Mfjprfwk+IQOneKfC0kGv" +
                        "eGPFOhvLHb6lYSSF7PUrGX5W2MYzgjDJIrIcMhA/wBLuAuOcu4oyiGMw2tOd1KLteL+1CS+fo001o0f5" +
                        "kcf8CZlwrm88HidKkLOMle0o/ZnF9tPVNNPVM/rU/YQ134C/wDBVX9l3wH4q/ai+GGi/Fb4x/Aqa5+Gf" +
                        "izUfEcBNw0rxwTx3qmJ0bbewLG0n8PnLJtAHFf5yeLuDzjw84grUsqxE6GFxKVSKi9Oqcf+3HdLryuNz" +
                        "/STwfxmTeIvD1Gtm2HhXxWGbpyclr0alp/OrN9OZSsfye/tv+DfC/w7/a//AGkvAvgnRYfDfhHwl4x13" +
                        "QfDeg6cCsFnZ2188cUUYYkhVUYGTX+inhRmmIxvDWBxFebnVnRg5N7ttK7Z/nF4tZXh8DxNj8PQgoUqd" +
                        "acYxWySbskf18/sj/8ABOX9h7xx+yl+zH418W/s1+G9d8VeL/h74L8UeJtcvobgz3moah4bs7u4nkKzA" +
                        "F5JJGZsDqa/zV8SPG7izCcRY+hRx1SNOnXqxik1ZRjUkklp0Ssf6Z+Gvgbwli+HMvr1sBTlUqYelKTad" +
                        "3KVOLbeu7bueCf8Fnvjvo37HP7Ingj9mL4BaRZfDI/Gtr/wrBpXgqCLT4tM8KWCxy6osMdqFCNeSXccT" +
                        "sRl1eY5LEkfY/Rd4Qq8T8S1c0zCTrfV7SvNuTlUd+S7e/KotpdGo9D436U/GFLhfhmjlWXRjR+s80bQS" +
                        "io042c7Jbczkk31Tl11P51f+CeH7CPi79vH40SeCLHU5PCnw48HQxeIPir47hhEz2NlK7JBb26OQjXV2" +
                        "6MsQY4VVeQhghVv7Y8avF3DcIZX7eUeevUfLThe131b68sd3bdtLS91/EHgl4P4njHNfYRlyUKa5qk7X" +
                        "suiXTmk9FfZJvW1n/Y/8Lv+CXH7BXwo8OQeHtL/AGa/Dfi9lh+yXuv/ABRsYfE2o3TldrytLrCziN2PP" +
                        "7lY1U/dVRxX+Y/EH0gOMMxrupPHVKet1Gm3TivK0bXX+Jtvq2f6hcPfR74Oy2gqUMBTqaWcqiVST87yv" +
                        "Z/4UkuiR+fP7e//AAQ/+DHxB8DeI/iD+yT4aT4X/F3RIZdYg+Humzynw/4hESmR7aOG4ZxZ3LgYhaIrE" +
                        "WwroN3mL+zeD30r80wWLhh84qe2w0nbna9+Hm2viivtXvK2qbtZ/i3jH9EvKsbhKmJyen7HExV+RP3J2" +
                        "6JP4ZP7NrRvo0r8y/mI/ZK/aP8AGv7H37RHgP4zeG2uYJ/CV8th418NoxhOqaJLKsWo6dMkmBmSMHZvH" +
                        "ySqj43IMf3v4j8D4XibJK2Cq2anG8Jb8s18Ml6Pe28W1sz+APDbjrF8MZ3Rx1K6dOVpx25oP44v1W19p" +
                        "JPdH9o//BVDX9J8V/8ABMj9oHxRoF4uo6F4k8PaDr+i6hECFntLzXdMuIZBuAOGRwRmv8t/o+YOph+Pc" +
                        "FSqK04VJxa7NQmmvvP9UvpEYylieAMbVpu8J04ST7pzg0/uP5Of+CR3/KRf9mH/ALCuqf8AqOajX+iv0" +
                        "kf+SIx/+GP/AKcgf5xfRq/5LjL/APFL/wBNzP63v+CuP/KOj9p7/sFaX/6kenV/nD9G7/kt8B/il/6bm" +
                        "f6T/SV/5IfMP8Mf/TkD+Ur/AIIu/wDKS39mz/ucf/UB1yv9DvpR/wDJCY7/ALhf+nqZ/nR9Ff8A5L3Af" +
                        "9xf/TNQ+o/+DhfX/E15+2L8PPDmpTyjwzoXgLTtQ8MWLhhAJL/WdTF1OmeC8jW6IxHaNR2r4D6F2DoR4" +
                        "Yr1Ype0lXkpPrpGHKvldterP0L6bGNry4ooUpN+zjQi4rp7058z9XZJ+iPMP+CVnhD/AIJf6/c6vdftq" +
                        "eLxF8UFvlTwf4V+JUl1pHgtbJFQrM17ZyrFLMXLB0vJI4wuMI/LD3/pCZlx/RjFZHS/2fl96VO0qt+3K" +
                        "1dK2zgm79VsfP8A0d8s8P60pPPav+0c3uxqXjSt35k7N33U2o26Pc/qw0v9iX9gHxp4TtpPD37MHws8Q" +
                        "eF9VhVbDxB4Y8LeGpfPiB4eLULGDzCePvrLk+tf55YjxV4ywuJaqZhiYVIvWMqlTR+cW7fJo/0Vw/hPw" +
                        "Zi8MnTy/CzpyWko06eq8pJX+aZ+UP7YX/BAT4aePAvif9j3xBb/AAh8TSzFtT8A+PrzUrvwzPG5LF7e5" +
                        "SK9vLV1JPykSoRgKI8c/wBE+Gf0xsfg/wB1nMHXp20nBRVReqvGMl5+6+7Z/OXid9DPAYz97ks1h6l9Y" +
                        "TcnTfo7SlF+XvLskffv/BL39gzWf2DPgt4m8I+MvGNp4y+IPxB1ZfFXiu48MLONJsxBapaQW1q93HDLK" +
                        "FAZmleNMlsbBty3454/eL9LjDNKdajSdOjSjyx5rczu7tuzaXRJJvbfXT9m+j74O1eDsqqUa9VVK9WXN" +
                        "LlvyqyslG6TfVttK97W01/kz/4K4/8AKRf9p7/sK6X/AOo5p1f6L/Ru/wCSIwH+GX/pyZ/m/wDSV/5Lj" +
                        "MP8Uf8A03A/oR/t7xN4a/4N/wCHVPCNzNZ6wfhlFpb3FiCZVsb/AFdbC+xt5ANrNKGbsMntX8Y/U6Ffx" +
                        "kcKyTj9Zvr3Ubx/8mSP7U+uYih4MKdFtS+rW07SlaX/AJK2fyQfBex+E2pfFXwLY/HbXtW8M/CG4v4l8" +
                        "fa54HtIr3VYLAAs32eKZlXLMArPhiikuEkKhG/0f4prZlTy6tLAQjPEqPuKbtFvza++2l3o2k7r/NjhW" +
                        "jltTMaMcwnKGGcvfcFeSj5J/dfWy1Sk1Z/2w/sl/s7/APBIDx74WtLH9nbwD8MvjGIoBLdxeLrez8T+I" +
                        "goC7pbq28VLPewFiM4aJFHIUAcV/lb4jca+JeDxDlmVbE4fXTlbpw9E6doP72+7P9XPDbgjwyxmHUcto" +
                        "4bEaa8yVSfrJVLzX3Jdkdn8ef8AgkP+wn8c9Ev7SL4MWHwh8STIy6X4v+DEUegS2khHDfYrVRYyrnGVk" +
                        "gPHQqea8vhD6SfF2U1VJ4qVeHWNX30/+3n76+UvW56nGP0Z+D83pSisLHD1OkqXuNf9ur3H84+lj8uv2" +
                        "Xf+CC/xV+Df7Vfw8+Kvj74zeHdb+Fnwk8Q2HxE8NDwomqLr+q3Oi3seoWMdza3dstvao0sSmbZczHaCq" +
                        "/e3L+/+IH0v8uzTh6vhMPhakcRXpuEubl5IqacZNNPmlo3a8Y66vaz/AJ98PvodZjlfEVDF4jFU5YehU" +
                        "U48vNzycGpRTTXLFXSvaUtNFvdf09V/A5/f4UAeKftFfBLR/wBoz4LeP/gvrviDUfC2m+O7I6XLr3hid" +
                        "4Lq3dZFmQkKyiWIsgEsLHbIhKnGchNDi7M/hb/ag/Zf+KX7JnxS1T4XfFHS/JuYd174b8SWSudO1rTi5" +
                        "WO7tJGAypxhlPzI2VYAisWrHVGVz2//AIJ4ftpt+xT8aJvF2qeFoPFPgTxrbw+F/H8cNtA2sWtis/mif" +
                        "T7iQBleNvmeHcEmAAbDKjo4uwpxuj+2z4d/ETwV8WPBXhz4i/DrxHbeK/Bniu2TVNC13S33RTRNkEEEB" +
                        "kdGBV0YBkYFWAYEVscrR2lAHN+MfCmi+PPCHirwP4ktvtnh3xnpt94U1+z+X97ZajavZzp8wYfNHIRyD" +
                        "XdlmY1cHiadek7TpyUk+zi7r8UcOaZdSxmGqYeqrwqRcZLupKz/AAZ/mnfFr4beIPg58UfiH8KPFURi8" +
                        "RfDnWdS8F6vuRoxJNp129qZEDZ+STZvQ5IKkEEg5r/dbhzPaOZ5fQxdL4K0IzXpJXt6rZ+Z/g1xJkVbK" +
                        "8wr4OsvfozlB+sW1f0e68j+wT/ggh+0Xa/E/wDZN1L4JapqAl8Xfs+apNp1vaynMj+Htcml1Oylyxy2y" +
                        "c3MOAMKqIO4Ff5o/TC4JlgOI446Ef3eKinf+/BKMl81yvzbZ/px9DjjiOYcNywE5fvcJJq39ybcov5S5" +
                        "l5JI/dGv5JP67CgD+VD/gsP/wAFXtL8X2Pi79kH9m7VbfV/DF1v0D40/FC08u4gvtj4k0rTHO5TEGXE9" +
                        "wv3iNkZ25Zv9DfozfR2qYadPOczi41FrSpvRrtOfn/LHpu9bJf51fSd+kbTxUKuS5ZJSpv3atRap94Q8" +
                        "v5pddlpdv8Am68H+D/FPxA8U6B4J8E6BdeKfF3im6h0Tw94e0SF57q8up3CJHGiAkkk/h1PFf3HmeZ4f" +
                        "BYedevNQpwTcpN2SS3bZ/CuWZZiMbiIUKEHOrNpRildtvZJH98X/BL79jvX/wBif9lrTPhj4z1OHUPH/" +
                        "izVrv4n+PYNMfzbSx1LUbO0sRaQyDiQQwWUSu4+Vn3Fcrgn/Hrx98TaPFXEEsVQi1RhFU4X0bjFyfM10" +
                        "u5NpbpWvqf7I/R+8MK3CfD0cLXknWqTdSdtUpSUVyp9bKKTezd7aH6JV+KH7cfjP/wXi/5R/eIf+xp8M" +
                        "/8ApTJX9P8A0Q/+Syh/16qfkj+W/phf8kXP/r7T/Nn4f/8ABv8Af8n16t/2IXiD/wBOOl1/WH0yf+SRj" +
                        "/1/h/6TM/kr6GH/ACV8v+vE/wD0qB8uf8Fcf+Ui/wC09/2FdL/9RzTq+/8Ao3f8kRgP8Mv/AE5M/PvpK" +
                        "/8AJcZh/ij/AOm4H9b3/BI7/lHR+zD/ANgrVP8A1I9Rr/OH6SP/ACW+P/xR/wDTcD/Sf6NX/JD5f/hl/" +
                        "wCnJn6O1+Hn7mfzVf8ABxv8OtEuPhx+zl8WktY4vEek63qfw6nvUUCaey1Cw/tONHIHzLFJZOUBPymRs" +
                        "feNf3V9CHO6scdjsHd8koRnbonF8rfzUlfvZdj+DvpyZHSlgcDjLL2kZyp36tSXMl8nF27Xfc8U/wCDc" +
                        "HxFqcHxE/ag8JLMTo2p6L4d8RT27EkC5sb67tkZR0GUu2B9cD0r6n6cOCpvBZfWt7ynOPyai/8A21Hyn" +
                        "0GMdUWOzCjf3ZQhL5pyS/CTPxl/4KBahBqf7cn7XFzbBhHH8RPFunt5oAPmWmtXFo/QnjdGce1f1D4NU" +
                        "XT4Ty1P/oHpv74J/qfy140VlU4uzNr/AKCKq+6bT/I/u3/Yd/5Mq/Y//wCyXfD/AP8AUTsK/wAi/Fj/A" +
                        "JKrM/8AsJrf+nJH+v8A4Sf8kpln/YNR/wDTcT+ab/g4we8P7SXwHjcyf2evgeR7UNu8rzm168Eu3tu2h" +
                        "N2O2Pav7r+hIo/2FjH9r234ckbfr+J/Bv04XL+3sGvs+x/Hnlf9PwPw6+G//C8fI1b/AIVD/wAJX9m3w" +
                        "/27/wAK3/tfZvw/lef/AGXxnG7bu98d6/rHPP7JvH657K+tvacvztzfjY/kjIv7XtL6l7W2l/Z83yvy/" +
                        "hc9M/4zV/6qj/5dleD/AMYr/wBQ3/lM9/8A4yv/AKif/Kgf8Zq/9VR/8uyj/jFf+ob/AMph/wAZX/1E/" +
                        "wDlQ80ufgv8c7y4nvLz4T+LLq7une5urq50LWHkkkdizMzNASWJOST1r3ocU5TGKSxNJJf34/5ng1OFc" +
                        "3lJylhqrb/uS/yP67vj5Hrdv/wQSs7PxHbXFnrWnfC3wJpd9ZarE8FzCbW+0i2WOSORVZWRUCkMM8c81" +
                        "/mzwdKk/GBypNODxNZprVO6m7p+Z/pdxnGrHwcUaqamsNRTTVmrOmrNeR/Ot/wSO/5SL/sw/wDYV1T/A" +
                        "NRzUa/tj6SP/JEY/wDwx/8ATkD+Ifo1f8lxl/8Ail/6bmf1vf8ABXH/AJR0ftPf9grS/wD1I9Or/OH6N" +
                        "3/Jb4D/ABS/9NzP9J/pK/8AJD5h/hj/AOnIH8pX/BF3/lJb+zZ/3OP/AKgOuV/od9KP/khMd/3C/wDT1" +
                        "M/zo+iv/wAl7gP+4v8A6ZqH9ZH/AAUD/wCCd/wv/b18DaVp/iDUX8EfFDwUtw3w++JWmwLO9sLgAyWl5" +
                        "AWT7RaOyqxXcrIwyjDLh/8AOnwa8asw4PxcpU4+0w9S3PTbte20ov7MltezTWjTsrf6P+NHgjl/GODjG" +
                        "pL2eIp35KiV7X3jJac0Xva6aeqau0/5Kf2hP+CQ37c37Ps2o3k/wnm+K/hCxLyR+Mvg0z65E8SDcXeyi" +
                        "Rb+IKvLF7cKOcMQCa/0c4L+kpwlnKjFYlUKr+zV9zX/ABfA/K0r+R/m1xr9Gfi7JXKTwzr0l9ul7+n+F" +
                        "e+vO8beZ8UfDv4yfHb9nnxFeXHwy+I3iX4Q+I7eURaxbeGtQ1DSZHkhOPLu4I3jEgB4KSqR6iv1TO+GM" +
                        "ozqgliqFOvBrTmjGW/WL1t6pn5TkfFGcZJXbwteph5p68spR26SWl/Ro/YH9nb/AIL8/tUfDm707S/jt" +
                        "oWk/H3wmhSG+1FoIdA8RJGPl3R3Omxi1cqOSJLUs5Ay65Jr+aeNfoc8PY6Mp4CcsLU6K7nD5qT5l8pWX" +
                        "Z7H9N8EfTL4iwMowzCEcVT6uyhP5OK5X843fdbn9S/7J37XnwX/AGzfhjD8T/g1rUlxa28g0zxR4V1xI" +
                        "4NY0S+K7/s97BG8iqWX5kdGZHH3WOCB/n34i+GuacL494XGwSbV4yWsZrvF2XzTSa6rY/0L8N/EzKuKc" +
                        "vWLwU20naUXpKD7SV38mm0+j3P4o/8Agrj/AMpF/wBp7/sK6X/6jmnV/qh9G7/kiMB/hl/6cmf5S/SV/" +
                        "wCS4zD/ABR/9NwP67P+CcXhvQfGP/BNz9nPwl4p0mDXvDPifwU3h/xDoepxiW2vLK8e4t54ZUbhkkRyr" +
                        "D0Nf5t+OGOrYXjnHVqUnGpCtzRa3TVmmvNM/wBLPAzA0cVwJgaNaKlTnR5ZJ7NO6afk0fhT+2D/AMEBf" +
                        "iv4Y13W/F37IGr23xE8EXckl9Z/C3xXew2Gv6crtu+z293elLa7jTna0skUmMAiRssf648M/pjZdiKMK" +
                        "OcxdKqtHUim4S83FXlFvslJddFofyF4nfQzzHD1p1slkq1F6qnJqM4+Sk7Rkl3bi+mr1Pwx+JnwQ+PH7" +
                        "PHiCCz+Kfw08R/CfXbOcf2beeI9PvdODzRksr2tyyqkuNpKvE5HGQa/rXIeLMozqi5YSvTrwa1UZKWn9" +
                        "5br0aP5Fz/hLOMkrqOLw9ShNPRyi46/3Xs/VNn138DP+Cs37eHwGawtdH+N978QfDljhf8AhFPjCv8Aw" +
                        "kltJGvCx/aL1vtsaKBhViuUAHA4r814t+jnwhnF3PCKlN/ape4/Wy9xv1iz9M4R+khxhk/KoYt1aa+zV" +
                        "/eL0u/fS9JI/os/YP8A+C23wr/ac8U+HfhB8aPCyfBf4ueJJE0rw3qdrdfaPDOtXrnCQRS3G2W0nlJ2x" +
                        "RS71dsKJS7Kh/ibxe+ipmGQYeeMwNT6xhoK8la1SC7tLSSW7as0teWybP7g8HvpY5dn+IhgsdT+r4mbt" +
                        "F3vTm+iTesW9kndN6c12kfuZX8ln9chQAUAfMf7WH7J/wALf2v/AIW3/wANviTYeTcw+ZfeDPGdjGh1H" +
                        "QtRKbVuLdmxlTgCWInbIvBwQrKmrlRlY/iM/ag/Zf8Ail+yZ8UtU+F3xR0vybmHde+G/ElkrnTta04uV" +
                        "ju7SRgMqcYZT8yNlWAIrFqx0xlc+mP+Cef/AAUM8a/sXeNRpGrm58V/AfxXcpJ438ERvuls5WxGdR04S" +
                        "EKlwigb0yFmUBWIIR0cZWJnC5/aH8O/iJ4K+LHgrw58Rfh14jtvFfgzxXbJqmha7pb7opomyCCCAyOjA" +
                        "q6MAyMCrAMCK2OZo7SgD+Pf/gv9+yrcfD/45eF/2oPDWllfCHxrt4/D3ja5tk/dW3ijSbZYkZ9qgL9rs" +
                        "40K9Szwysetf6YfQ48Qo4zKamVVZfvcO+aHnTk7/wDksm79lKKP8xvpm+HcsFm9PNaUf3WJXLPyqRVv/" +
                        "JopW7uMmfnB/wAE4P2urj9jL9qTwX8Tr+aZvh5rYbwN8WNOtNzGXQdQkTzJlQfektZUjuEA5bZsyAxr9" +
                        "w8cPDaPFHD9XCxS9vH36bf88dl6SV4vte/Q/DPAzxLlwtxDSxUm/YS9yol/JLd27xdpLva3U/0GNK1XT" +
                        "Nd0vTdb0XUIdW0bWbeHVdJ1XTZUmt7m2uIxNFLFJGSro6MGVgcEHIr/ABlxGHqUakqc4uMotpp6NNaNN" +
                        "dGmf7TYfEU61ONSnJSjJJprVNPVNPqmtj+W7/grn/wVz/tT/hJ/2Vf2VfE//Er/AH2gfGD4waBN/wAfX" +
                        "WKbStKmiP8Aquq3Fwp+flEOzcz/AOgP0bvo3ez9nm2bU/e0dKk1t2nNd+sYvbd62S/z2+kt9Jb2ntMoy" +
                        "ip7usatWL37wg+3SUlvstLt/wA1fg/wf4p+IHinQPBPgnQLrxT4u8U3UOieHvD2iQvPdXl1O4RI40QEk" +
                        "kn8Op4r+6czzPD4LDzr15qFOCblJuySW7bP4PyzLMRjcRChQg51ZtKMUrtt7JI/t2/4Jef8EvPC37Fnh" +
                        "a3+JHxIt7XxT+0v4ptfL1jWI9k9r4YtZ0+fTtOfkGQg4uLgff8AuJ+7yX/yk8fvH7EcU4h4bDNwwEHot" +
                        "nUa+1Ly/lj03eu3+sv0ffo+4fhTDrFYpKePmtXuqaf2Ief80uuy03/X6v5qP6aCgD8Z/wDgvF/yj+8Q/" +
                        "wDY0+Gf/SmSv6f+iH/yWUP+vVT8kfy39ML/AJIuf/X2n+bPw/8A+Df7/k+vVv8AsQvEH/px0uv6w+mT/" +
                        "wAkjH/r/D/0mZ/JX0MP+Svl/wBeJ/8ApUD5c/4K4/8AKRf9p7/sK6X/AOo5p1ff/Ru/5IjAf4Zf+nJn5" +
                        "99JX/kuMw/xR/8ATcD+t7/gkd/yjo/Zh/7BWqf+pHqNf5w/SR/5LfH/AOKP/puB/pP9Gr/kh8v/AMMv/" +
                        "Tkz9Ha/Dz9zP57f+Di3/k2D4H/9j6v/AKj2o1/Z/wBCX/kf4v8A68f+3wP4q+nB/wAk/hP+v/8A7ZM+";
                    resourceString += "NP8Ag3H/AOS1/tH/APYraV/6djX6h9N7/kVYH/r7L/0k/LPoNf8AI2x3/XqP/pR+aX/BVr4c658Nf2/v2" +
                        "kbDWraSKPxVrjfEbQ7qVSqXNjr8KamjxkgBlRpXiJHRkYdQa/dfo8Z3Rx3BuBlB/BDka7OD5dfWyfo0z" +
                        "8G+kXkdbAcZ4+NRfHP2ifdTXNp6NteqaP6Nf+CXP/BUb9mjxj+z98HPgJ8TfH9j8Jvi58LdD0z4Zxaf4" +
                        "5lTT9M1e00a2j02zns7+bbbl3hjjDQyOsm/dtVl+av4i+kB9H/PsLnOKzDC0ZV8NWnKpeHvSi5NykpRX" +
                        "vWTbs0mrWu09D+5Po+fSDyHFZLhcvxVaNDE0IRp2m+WMlFKMXGT927SV02ne9k1qc1/wXs/Zj1H4zfs7" +
                        "+Bv2ivAlsdc1L4DSXd14jTSgJvtHhTW0gaa7Bi3F1tZbeKTI4EbyOTgV3/Q/wCPYZXndbLcQ+WOJty30" +
                        "tUhe0fLmTa85KK6nB9MbgCea5JRzLDrmlhW3K2t6c7Xl58rSflFyfQ/n3/4Jqft46t+wj8cJ/FN/p03i" +
                        "P4UfECG38N/Fbwxp5QXLW0Mxkt76134BuLQyOURiFdXdCVLB1/svx18IafF+UqlGShiaTcqcntdrWL/A" +
                        "LsrK73TSetrP+LvAbxhqcH5u60oueGqpRqRW9k9JL+9G7stmm1pe6/tg+FP7a37J3xq8NWfir4d/tA+F" +
                        "tWsLuNbmXT7/WLPTtTtN/8ADdWOoPDcwNntJGue2RzX+VvEXhXxHlVd0sTgqsWuqi5RfpKKcX8mz/Vzh" +
                        "zxX4bzXDqthsbSlFrZyUZL/ABRk1JfNI9Q/4Xj8FP8AosHhb/woNJ/+P14H+qea/wDQNV/8Al/kfQf63" +
                        "ZT/ANBVL/wOP+Z6Hpeq6Xrmn2mraLqVvrGlX6efY6npc0dxbzITjdHJEWVhx1BrxcRh6lKbhOLjJbpqz" +
                        "Xqme3h8TTrQU6clKL2ad0/Ro+DP+CqWhXviL/gnv+1Lp9gpee38OrrsgUFv3Ol6la6nMcD0jt2Oe1fr/" +
                        "wBHvGQocaZfKWzqW+couK/Fn479IjBzr8FZjGO6p3+UZRk/wTP43v8AgmD8UPDPwc/bz/Zw8feMtdh8M" +
                        "+GbLV7zQNW17UiiW1qmu6Le6CrzPIQsce68AeRiAi5YkAZr/Tnx8yCvmfB+Ow9GDnUcFJJbvklGend+7" +
                        "our0P8ALz6P/EGHyvjHA4ivNQpqbi5PZc8JQ1fRe9q+i16H9gX/AAVslin/AOCcf7TU8EqzQTaTpMsM0" +
                        "TBkdG8RacQykcEEdDX+aX0cItccYBPfml/6RM/02+knJPgbHtapwj/6cgfynf8ABF3/AJSW/s2f9zj/A" +
                        "OoDrlf6G/Sj/wCSEx3/AHC/9PUz/Or6K/8AyXuA/wC4v/pmofvl/wAFav8Agqh8V/2JviP8Pvgz8FvCG" +
                        "i33ibxJoMfxJ8ReKvHkF1ewRWV1qV5plvb2tvaXNriTfYStI7sw2lQFzkj+Pfo5fR7y7ivA1sbjqs1Th" +
                        "P2cYwaTuoxk2209LSVkra3u+h/ZP0kvpEZlwnjqGBwNKDqTh7SUpptWcpRSSTjreLu3fS1l1PQ/2F/+C" +
                        "zP7P/7SPhnS/D3xy8R6P8BPjjEfsWpaTr1y1j4c1V8gLNp19qDlI/MJA+zzy+YG4UyD5q8Txb+i/nOR1" +
                        "5VMBCeKwm6aV5x8pxiru380Va2rUdj2/CH6UuS57h408fUhhcXs1J2hLzhKTsr/AMsne+ictz9Dvi/8D" +
                        "P2V/wBoXwwdY+Mvw98IfErw4sWbfxf4it9Pma3ibEe6DU1KyQg5A3Ryr25r8W4a4t4hyXEcmCr1aM7/A" +
                        "Axcld+cNn80z9t4m4R4dzvD8+OoUq0LfFJRdl5T3XyaP48f+CpXwE/4J3/BHW9Es/2Pfi1ceJPHl3etF" +
                        "4y+GuhalH4m8OaTp4hkO9NWLPIlwsoVDbtNO2CSxjKgP/pl9H7jDjXNqU5ZzhlCil7tRx9nOUrr7Gzjb" +
                        "XmUYra3NfT/ADD+kLwbwRlNWEclxLnWcvfpqXtKcY2e09WpXsuVyk978ttfpb/g3Su/FCftQ/G6xtGn/" +
                        "wCEKufAL3fiBYwfsx1SHxDpqaeZD/f8qW72e26vhPptU8O+H8JJ29qq9o9+VwnzW8rqF/kfe/QfqYhcQ" +
                        "YuMb+ydC8u3Mpw5b+dnO3zPgv8A4K4/8pF/2nv+wrpf/qOadX6/9G7/AJIjAf4Zf+nJn479JX/kuMw/x" +
                        "R/9NwP6lP2VvjVbfs5/8EgPhh8cbrRX8Rr8M/h5J4ng0CGUQfbLiKeZYIWlIbYjyMod9pKrkgEjB/z+8" +
                        "QuFpZ34l4jAKfJ7bEcvNvZNK7t1sr2XV9Uf6E+HfFccj8MsPj3Dn9jh+bl2u03ZX6Ju13rZdGflb+zP/" +
                        "wAHCXj+4+KUenftXeBNCtPhPrztB/wkXwp0/UotQ0B3PySvBdXt2bu3XpIqgSgZZd5Hlt/QfHn0MMHHL" +
                        "+bKK03iY/ZqSjyz8rqMeWXZv3ejtuv544B+mrjZZjy5vRgsNL7VOMuaHZtOUuaPdL3uqvs/6Qfh/wDGn" +
                        "9nH9pzwoW+H/wAQfC3xk8L61FtvdGsrqw1LcjLuMd1YzbpI2A5aOaMMO4r+Hs54WzzIcR/tFGrh6kXo2" +
                        "nH5xktH6p2P7oyXirIs/wAN/s1eliKclqk1L5Si9V6NJn5N/t5fsOf8Eh9B8N+IPFHxY1PRP2YvFccUt" +
                        "3a3Pwj1K30/VJ5VBIjt/DkIuIbjLfeWG0DY/jUcj+i/CDxZ8Sa1eFLCRnjKd0v3kXKK83VdnH1c7eT2P" +
                        "5v8YvCPwzo0J1cZKGCqWbXspKMn5KkrqXooX81ufxsXTW1lrdy3hu+uZ7O0unbQdTniFpePHHMfIlaOG" +
                        "WURyEAMVWRtp4DHGa/08pqUqS9qkm1qt1tqrtK6+Sv2P8uqjjCq/ZNtJ+69nvo7Juz9G7dz/TR+HUniC" +
                        "X4feBJfFiyJ4pl0bS5PEqXi7ZhqDWURuBIOzeZuyPWv8HM7VFY2sqNvZ88uW23Ld2t8j/fHI5VngqLrX" +
                        "9pyR5r781le/wAzsq8w9QKACgD5j/aw/ZP+Fv7X/wALb/4bfEmw8m5h8y+8GeM7GNDqOhaiU2rcW7NjK" +
                        "nAEsRO2ReDghWVNXKjKx/EZ+1B+y/8AFL9kz4pap8Lvijpfk3MO698N+JLJXOna1pxcrHd2kjAZU4wyn" +
                        "5kbKsARWLVjpjK59Mf8E8/+ChnjX9i7xqNI1c3Piv4D+K7lJPG/giN90tnK2IzqOnCQhUuEUDemQsygK" +
                        "xBCOjjKxM4XP7Q/h38RPBXxY8FeHPiL8OvEdt4r8GeK7ZNU0LXdLfdFNE2QQQQGR0YFXRgGRgVYBgRWx" +
                        "zNHlX7V37N/g39rL4C/ED4F+Nv9GsPF9rnR9cjQPNpWrWzCeyvYhlSTDMqllBG9NyE4Y19t4d8cYrhzO" +
                        "KOPoaum9V0lF6Si/Vdejs90fEeI3AuF4kyatl9fRVFo+sZLWMl6Pp1V1sz/ADv/AI0fB/x38Avil42+D" +
                        "3xL0d9D8a+Ar6TRNZsnB2PtAeKeFiBvhnjZZYnHDIysODX+1PC3EuDzjL6WNwsualVjdP8ANPs07pro0" +
                        "0f4k8VcMYzJsxq4LFR5atKVmvya7pqzT6ppn2L4d/4KeftP+Ff2Pp/2OtB8S/2f4WkmlsLbx3DJMNdtv" +
                        "Dc8ZEmiwTA/Jbs5Pzj5whMQITivzLG+AmQYjiZZ1Up3qWvyacjmtqjXWVum1/eep+n4Hx/4gw3DDyWnU" +
                        "tTu1z686pvemn0jfrvb3VofB/g/wf4p+IHinQPBPgnQLrxT4u8U3UOieHvD2iQvPdXl1O4RI40QEkkn8" +
                        "Op4r9ezPM8PgsPOvXmoU4JuUm7JJbts/HssyzEY3EQoUIOdWbSjFK7beySP7dv+CXn/AAS88LfsWeFrf" +
                        "4kfEi3tfFP7S/im18vWNYj2T2vhi1nT59O05+QZCDi4uB9/7ifu8l/8pPH7x+xHFOIeGwzcMBB6LZ1Gv" +
                        "tS8v5Y9N3rt/rL9H36PuH4Uw6xWKSnj5rV7qmn9iHn/ADS67LTf9fq/mo/poKACgD8wf+CwHwQ+Jfx8/" +
                        "Yf8d+D/AITeGLjxn4v0fUtH8Zx+FdHQy397a6bcl7hLWJfmmmVHLrEuWfBVAzEKf336NPFeAyfiyjWxl" +
                        "RU6UoyhzPZOS0u+ivpd6Ld2V2fz/wDSb4Sx+c8JVqODpupVjKM+Vayai9eVdXbWy1drK7sj8bP+CD37K" +
                        "f7QHgv9pnxr8Y/iB8Ktc+HfgPQ/CmoeD49U8d6ZeaS97qepX9jLHDbRX8cTyhY7eR5HVSq4AJBYV/Tv0" +
                        "vPEPJsVkNLBYfEQq1pVYytCSlaMVJNtptLVpJPV622Z/Lv0PfDrOsJn9XG4nDTpUY0pRvOLjeUpRaSUk" +
                        "m9E22tFpfdHz1/wV6/Yy/aTuv26/id498HfBvxJ8Q/BfxdbSfEHg/xB4D0XUdXheSPR7PTri2mOnwyiK" +
                        "aO4gcBGIJQqw68fafRr8UMijwjh8PWxVOlVoc0ZRnOMX8UpJrmaummtV1uuh8T9Jjwsz6XF+IxFDC1Kt" +
                        "KvyyjKEJSXwxi0+VOzUk9HurPqf1E/8E8/hF4y+BH7Fv7Pfws+IViNL8a+GtDM/iPSMhnsrnUr641U20" +
                        "hUkeZCLkRyYJG5Tgkc1/APjTxLhc34pxuLwz5qU5+6+6ilG68na68mf6C+CfDOKyfhXBYTErlqwh7y7O" +
                        "TcrPzV7PzR9m1+Xn6mfin/wXS/Z/wDiz8dv2VfB0vwj8G3vj7U/hv4rt/F/iLw34ZglvNTbTZNLvNPea" +
                        "3toFaSby5J03qgLBSWxtViP6n+iTxlluUcQ1VjKqpRrUnGMpO0ebmjKzb0V0nZvS+m7R/Kf0vODMyzjh" +
                        "2k8HSdWVGqpSjFXly8so3SWrs2rpa212TPhL/g38+EHxa+Gvxh/aCvviL8LvEXgGy1Pw1plpp15410TU" +
                        "9KiuJU1QuyRvfQxB2A5IBJxX679MniXLcdlmCjhsRTqtVJNqE4yt7vWzdj8f+hhwxmWAzTGyxOHqUlKn" +
                        "FJzhKKb5ul0rn68/wDBQv8A4Ju/C79vXwnps+paifAXxj8G28tn4E+JllALgCB3842N/BuQz2rOSygMG" +
                        "iYlkOGdH/mzwW8csw4PxMlGPtcLUd5027a7c0X0lbfS0krPZNf0x42eBWX8Y4aLlL2WKpq0KiV9N+WS6" +
                        "xvtreLd1u0/5Fv2hf8Aglj+23+zprc9jrnwX1L4ieHjJ5Gm+Ofg7bXXiPTLlScB2WxiNzb5PGLmGM56Z" +
                        "yM/6R8F/SD4UzukpU8VGlO2sKrUJL73yy/7dkz/ADT42+jxxZkdVxqYSVaF9J0k6kX9y5o/9vRR/Ux/w" +
                        "Rn+Enxt+HH7D0Pgv9ozw/f6U+t69rOo+CvAvj2JhdWHhS9srOFLWezu13wpJcpdSiGRQdsmSAGxX+ff0" +
                        "oOJMqx3Fjr5bOMuWEVOcNnUTk+ZSWjajyrmXVeR/oX9FrhrNsDwkqGZwlHmqScIT3VNqK5XF6pOXO+V9" +
                        "HtqfmL+3Z/wQX8Ux6/rXxK/Yokt9X0LVJZdSvvgX4hvIrO6sJJG3lNJvLxkhkg5O2K4kRkAwHkzgfvfh" +
                        "H9L/DujDC55eM42SrRV0/8AHFap+cU0+y6/gHi/9DvEKtPFZFaUJNt0ZNJr/BJ6NeUmmu76fhX4k/Yu/" +
                        "a98I6pPo3iH9mDx9p9/bkqVHhLXJopADt3RTQWzxyJkcMjEH1r+t8D4pcNYmmp08woNP/p5BP5pu69Gr" +
                        "n8h47wr4mw1RwqZfXTX/TqbXyaVmvNOxgf8MrftP/8ARuHj3/wj/EP/AMiV2f8AEQsg/wCg6h/4Nh/8k" +
                        "cf/ABDviD/oAr/+Cp//ACJ/VL/wQL+Df7Rvwm+EXxvm+MvhnWvA3gPxVq2j3Xwt8H+OLe50+5S6tre8T" +
                        "VbyOzvEjljiuBJaqHIAcxkjoSf89/picT5HmOZYRYKpCpWhGXtJQakrNx5IuSum1abt0vqf6IfQ14Xzz" +
                        "Lcsxbx1OdKjOcXTjNOLulLnkouzSleCv15dD93vEvhzQ/GPhzxB4R8T6ZHrXhrxVZXfhzxDo94CYbuxv" +
                        "oGtZ4XAIO2SN2U89DX8h4DHVcLXhWpS5akGpRa3TTumvRn9g4/A0cVQnRqxUqc4uMk9mmrNP1Wh/C3+2" +
                        "9/wSb/aQ/Zf+JGpR+APAOtfGX4M67dzyeAPGXgbT7nV7yC2Zi8dpqlvp8TyQXMSYUyFBFL95Dncif62+" +
                        "FH0i8jz/AxeIrQw+KilzxnJRTfWUHJ2cX2vzR2fRv8AyI8Wfo4Z7w/j5LDUZ4jCyb5Jwi5NLpGairqSX" +
                        "W3LLdPdL9uvg7+zB+1V4j/4IlePPgH430O/k+L3iGxvtR+G3w78Vs8Oq2Wi2msWupWemSLdkGKV1tZDB" +
                        "C5GwSJGdmCF/lLibj7h6h4rUcwoTj9WhJKpOOsXNxcZTVt0uZczW9m1fd/1lwv4f8RV/Cetl1eEvrM4t" +
                        "04S0koKUZRg77N8r5U9rpO2y/Mr/gjV+x5+0roX7dvw++J/jL4MeI/h/wCCfhFb+IrzxXrnj7R7/RovO" +
                        "1Hw5qGgwW0B1GKHzZjLeKxRMlVUk4GK/efpPeJmRVuEa2Fo4qnVq13BRUJKTtGcZtvlbsrR3e7aSPwL6" +
                        "Lnhjn1HjChi6+FqUqVBTcnOMoK8oSgkuZK7vLZbJNs/oq/4KC/8E6vhd+3p4I0621q+Pgf4seDo5k+H/" +
                        "wATbCATvAkvzvZ3sO5PPtHfDbdwZG+ZGGXV/wCJ/BnxszDg/FycF7TDVLc9Nu1/70X0kl8mtGtmv7f8a" +
                        "fA/L+McJFVH7LE078lRK9r/AGZLrFvXunqnun/IR+0P/wAEr/22/wBnLU9Qj174M6j8QPC1mWa38f8Aw" +
                        "hguPEOlzQjP711s4vtNuvHP2mGP8iCf9KOCvpB8KZ5Ti6eKjSqP7FVqEk+2r5Zf9uyZ/mdxt9HjizI6k" +
                        "lUwsqtNfbpJzi130XNH/t6KPh//AIV38QPtX2H/AIQbWPtvmfZPsf8AZl75vm7tmzZ5ed2eMYzmv1j+2" +
                        "sHy83toW3vzL/M/JP7ExvNy+xnfa3K73+4+0v2ff+CXv7bP7RupadH4X+CeqeDPDN8ymXx98Vre48PaR" +
                        "FC3/LZWvo1nuE7f6NFKc9uDj8t4z8fuFMkhJ1cXGpUX2KbU5X7aO0X/AInE/VeC/o+8WZ5UiqWElTpv7" +
                        "dROEbd9VeS/wqR/ZJ/wT/8A2Dvh/wDsG/CW68F+HdRPi3x54umh1r4m/EO5t0t5NSuoYzHDDDGCxjtLc" +
                        "O3lRszHLOxOWIH+YnjJ4vY3i/MlXqR9nRppqnC9+VPdt9ZS0u7LZLof6ieDHg9guDstdClL2lao06k7W" +
                        "5mtkl0jHWyu92+p/Ml/wVt/Y0/ae1L9u/4p+NvCnwS8SePvCPxbn0rWvBHiHwDo2oazbXGNJs9OkgkbT" +
                        "4pRFOk0LKY5MEjDDKsDX95/Rw8T8gp8IYehWxdOlUoKSnGcoxa96Uk1zNXTT3Xmt0fwL9JPwt4gqcYYi" +
                        "vRwlSrSruLhKEZST92MWnyp2aaej8nsz+pH9kH4CXngv9hv4Nfs9fGzw1a39zF4Ni8HfEnwbqPl3VsV1" +
                        "GCQ3djNsLI+1ZzE+0lSQcEjBr/P7xK4wjiuLcVmOBqNL2zlTktH7rXLJdVtdde5/oR4ZcGywvCOFy3HU" +
                        "037FRqQeq95Pmi+j3s7adj+c/8AbU/4IMfF7wHret+N/wBkSVfip8O7qR76D4Y6rdRW3ibSUdixhglu2" +
                        "SG+hjH3WMiTYwuyRgXP9t+Fn0vstxlKFDOP3Fdae0SvTl5tK7g310cet4rRfw94rfQ7zPB1p18m/f0G7" +
                        "+zbSqR8k3ZTS6O6l0tJ6v8AD7xn8BPjl8OtTfRfH3wc8U+C9WjJQ6f4o0DVbGU47qLmBNw7gjII5Ff1h" +
                        "lfGGU46nz4fFUqke8Zxf5M/krNeDs3wNTkxGFq05dpQkvzRqfD/APZp/aG+K2ow6V8N/gf4r8a3sz+Tj" +
                        "w9oGp3EcZyATLKkPlxqMjLOwA7mufOeOsly6DnicXSpr+9OK+5Xu/kdGS8B53mM1DC4SrUf92En97tZf" +
                        "M/oq/4Jvf8ABEPxf4O8d+FPjv8AthRWenyeEbi38R+DvgfYTW+ovJfwMJYZtYnhMlv5cTgOtvEz7zjzG" +
                        "Cho3/ifxx+ldhsVhKmX5Nd+0TjKq046PRqmnZ3a05mlbom7Nf2/4F/RMxOFxlPMM6svZtSjRTUveWqdR" +
                        "q8bJ68qbv1aV0/6gK/gQ/0CCgAoAKACgD5j/aw/ZP8Ahb+1/wDC2/8Aht8SbDybmHzL7wZ4zsY0Oo6Fq" +
                        "JTatxbs2MqcASxE7ZF4OCFZU1cqMrH8Rn7UH7L/AMUv2TPilqnwu+KOl+Tcw7r3w34kslc6drWnFysd3" +
                        "aSMBlTjDKfmRsqwBFYtWOmMrn1N/wAE5f8AgoX4n/Yw8cSaF4lN14m+AvjKZT4w8KQuXk0y5bag1OwRu" +
                        "BKqgCWMYEqDB+ZUKuMrEzhc/tA8EeN/CXxJ8JeH/HngPxBbeKfB/im2j1fQNf0iQSW9zbyDhlPBBBBVl" +
                        "YBlYFWAIIrY5mj8jP8AgqV/wTt8M/t3/DGx+M/wRutPvPjv4J0+VvCmsaTPBLZ+LtJgMkv9lvcxP5XmB" +
                        "yxtZidquSjkKxZP6a+jp46z4Xxn1XFNvA1Xr/07k9OdLt/Mluldaqz/AJh+kf4DQ4pwf1rCpLHUY6f9P" +
                        "IrXkb6P+RvRN2dk7r+MjT/hD8U9U+JMPwcsfh3rM3xWnvh4aX4dNp10msrf52mB7SRFkRx1YMowOTgc1" +
                        "/qTW4ly+ngXjZV4fV1Hm5+Zctu/Ns/kf5V0eGcxqY9YKNCf1ly5eTlfPzduXdP12P7Vf+CXn/BLzwt+x" +
                        "Z4Wt/iR8SLe18U/tL+KbXy9Y1iPZPa+GLWdPn07Tn5BkIOLi4H3/uJ+7yX/AMsfH7x+xHFOIeGwzcMBB" +
                        "6LZ1GvtS8v5Y9N3rt/qx9H36PuH4Uw6xWKSnj5rV7qmn9iHn/NLrstN/wBfq/mo/poKACgAoA8J/aZ+O" +
                        "+k/syfA7x98dtf8Maj4x0L4dwW2qazoHhP7OdQktp76CyeSIXckUZEIm819zj5FbGTgH67gPhCpn2bUc" +
                        "BTqRpzqtpSlfluk3Z2TetrLTdo+P4+4wpZBlFbMKlOVSFJJuMbc1m0rq7S0vd67Jmj4R+Ofgfxd8ANA/" +
                        "aQgnk074d654Tg+MUkt6E8+00qTShq8glVGKiSKPIcA4DAjNYZlwli8NnM8savXjVdLTZy5uVW8m9vI6" +
                        "Ms4uwmJyaGZptUJUlV13UeXmd/NLfzPFv2IP23fht+3Z8NPEvxK+G+gap4VtfCmty+CNW0DxkLMXqyx2" +
                        "VtfJMBYzzp5Ui3O1SWB3Kwxxz9V4r+FOO4Rx9PC4mcZucOdON7Wu1bVJ3VtfJo+U8JfFnAcYYCpisLCU" +
                        "FCbg4zte9k76Nqzvp5pmz8GP2vvBPx0+P8A+0V8BPBfhnVDdfs03FhonjfxzefYxpM+o33mKLW28qZ5S" +
                        "6Pbzq+9FwYz6iuXijw1xeUZNgswr1I2xibhBX5lFW1elrNOLVm9zq4W8TcJm+dY7LqFOV8G0pzduVyd9" +
                        "Fre6akndLZn1rX5wfpIUAFABQAUAFAHwj/wUR/bH1L9hv4BWfxo0rwHB8Rbq68Qad4JPh/UL+TTY1S+t" +
                        "ru4MvmxwXByv2bG3bznrxX674KeGNPi3OHgZ1nSSpynzKPNs4q1rrv3Px/xu8UKnCOTLHQoqs3UjDlcu" +
                        "XdSd72fbsfd1fkR+wBQAUAfPX7VX7Rfhf8AZN+Avjz9oHxnod/4k8NeAP7L/tLRfDAtzfTf2rrNpokfl" +
                        "fa5Io/lkvFZssPlBxzgV9p4e8E4jiPOKOXUJxhUq81nK9lyxlN3sm9o223PivETjjD8N5NWzGvCU6dLl" +
                        "uo2u+acYK12lvJPfY+VviH/AMFGNW8G3Hg5/C37Enxo+MWg+NfDeg/EnTPF3wm8Iy6xpSw69p6aglq1z" +
                        "buUM8KyBZVUkA9zX6FkvglTxSq+1zXB4edOpOm41KnLK8JON7PWztofnWd+ONTCul7LKcZiIVKcKilSp" +
                        "c0bTipWutLq9n5ng3w//wCCzOmfFnQn8U/Cv9hL45fEvwzHcSaVJ4j+H/hOPWbBbqFVeSE3GnTzRiRQ6" +
                        "ll3ZAIyORX1+c/RfqZdW9li83wVGpa/LOpyuz2dpJO2m58fkv0paeZUfa4TJ8bWp3tzQpc6ut1eLavqt" +
                        "D9m9PumvrCxvmtZLJryGK6ayvF2TQmRA+yRezLnBHrX8vVqfJNxveztdbP0P6lo1OeClZq6vZ7r1PjL/" +
                        "gn/APta6j+2t+ztpvxy1TwRD8Pru/1bVPDZ8O2F8+oxqunSrGJPOkhgJL7um3iv1Hxk8OIcK53LAQquq" +
                        "lGMuZrl+Lpa7/M/LfBjxJnxXkkcfOiqTc5R5U+b4et7Lf0Ptmvyo/VwoAKACgAoAKACgAoAKACgAoAKA" +
                        "CgAoAKACgD5j/aw/ZP+Fv7X/wALb/4bfEmw8m5h8y+8GeM7GNDqOhaiU2rcW7NjKnAEsRO2ReDghWVNX" +
                        "KjKx/EZ+1B+y/8AFL9kz4pap8Lvijpfk3MO698N+JLJXOna1pxcrHd2kjAZU4wyn5kbKsARWLVjpjK5d" +
                        "+G37YH7Q3wj+EHxA+BfgD4jXeg/Dn4kY/tzSYDmW33/AC3H2KY/PbfaU+SfyyN68Gi4OKPtT/gmZ/wUL" +
                        "+Lf7NXijTPglbeCtQ+Nfw28falFDpPw70Bi+tafqV24jaTSRJlG8370lu5VGYbg0ZLszjKxM4XP7HbOG" +
                        "C4NvrM2k/2fqtzbRwzC7W3N3DGf3vkSSQNIp2MTkK7LnJBPWun2suXlu7b26X7nF7KPNzWXNa1+tuxo1" +
                        "BoFABQAUAFAHmfxp+G2n/GP4P8AxS+EuqlF0/4l+HtY8C3M0wJEQ1XT5bIScAkFDIGBHIIBHNe9wtnk8" +
                        "szPD4yHxUakZ/8AgMk7fO1jwOKsihmmWYjBz+GtTlD/AMCi1f5XufzWeBf2jPEmm/8ABDPxX8Jg0kfxe" +
                        "svFN7+xFZ6JcELdvea3rQvXs2UnkjTLuaFcf3Mdia/unN+CKFTxap4z/mGdJYtvpaELc3/gyKl8/Q/hD" +
                        "KOOK9PwiqYPX60qrwiXW853cf8AwXJx+Xkz6T/YusPD3/BPn9tH9s39nbVLoWfw3svhd4U/aF0CZh5aT" +
                        "weD9AhstWnjL4y8ss87OTy3l7j0NfC+KVatxnwtleZQV67xNSjLydWbcE/JJRS7Xsfd+FdGhwVxVmuWT" +
                        "dqCw1OvHzVKCU2vNtyb72ueG/s+ftCeLf2NP+CbHjL9rldNsr79of8Abw+J2q6n4JPid/LtYbzVbu6t4" +
                        "rm781kzb2/2K7ulZiFYyoGIVq+s4z4Lw3FHHVLJ+ZrBZZhoqfLu1FJtR/vS5oR01XK7K6PkeCuNcTwtw" +
                        "HVznli8dmeJk4c2ycm0nL+7HlnLXR8yu7M7f40/Gz9or9kP4b6L+0xon/BTjwz+1d4q8OXukyfGT9nqe" +
                        "TwidL1Wy1K9htJ49Gi0mZriIwPMo3RorbA0p2hTGfK4W4VyTiXHTyupkFTA05qXsq/73mi4ptOo5Lld0" +
                        "no21e0dW1I9birizPOGcDDNKfEFPHVIOPtaH7rlkpNJqmovmVm1qkna8tEnF/0R+DvFOl+OfCHhXxrob" +
                        "mTRfGGm2PinR5JMbmtdQtUu4idpIyUkHQ1/FOZ5fUwmJqUKnx05OL9Yuz/FH9u5XmNPF4anXp/BUipL0" +
                        "krr8Gfg58N/GX7fn7XX7Uf7b/wH8C/tOv8AA/4RfA/xpf2J+IFr4f03VtagguZ7m103RtPWQWqrCotJZ" +
                        "p5jIZRhF3ANz/XueZXwdw3w/lOYYjAfWcTiaKfJzyjBtJOdSW+vvJRVuXd20P48yLNOM+JuIc3y/D5h9" +
                        "Ww2GrNc6hGU0m2oU47ae63J35tlfU5f9nb4gf8ABST9or4jfHH9hvWf2m9O+HV/+y7qt1bfED9pvRNAs" +
                        "7/xTr9hczmDSbSC1d4IIg4hkmluARMF2IxLBi/ocbZNwNkmBwmfQwEqqxsVyYdzcacGlecm9W7XSUdY3" +
                        "u1pa3n8EZ1x3nmOxeQTzCNF4KT58QoKVSabtCKjolezblpK1k9b3+uf+Ccf7QH7QF78Zf2qv2Mf2mfG8" +
                        "PxV8e/s0XunXPhX4qw2kdndazoupK5X7VHbjYHRDA65LSfvGVmbZuP5t438G5NDK8uzvK6ToUcYpc1O9" +
                        "1Gcf5W9dXzLovdTSV7H6V4GcaZ1PNMxyPNayr1sG48tS1nOEv5ktLpcr6v3mm3a58sftXeJ/j/+zv4f8" +
                        "e+O9W/4LE6JN+0J4FtrvxdpP7Pk+j+DdNsb+Gzja4Glf2XHPNN500a7IZJYiZH4wCdy/oXh3gMmzutRw" +
                        "8OGZ/UqrUXW5qsmm9OfnslZPVpPReln+eeI2YZ1klGtiJ8UQ+u0k5Khy0oqSWvJyXbu1om1q9Ot1w//A" +
                        "AU9+O11+01/wR3+AXx01HTIdG1f4heJPDWpa9pmneZ9mi1G3s9YsbsQiYlhEZ4HKBiSFwCW6n1vAPhGO" +
                        "Q+JuMwEZOUaVOok3u4t03G9utmr+fRHkfSA4wln/hhgswlFRlVqU20tlJKopWvra6dvLq9z7F0v9ob47" +
                        "ft5ftST+D/2U/iFdfC79jr9n6+k0r4yfHjw5badcXXjPXkCu2k6RJqMVynkqhX98icKxkJIaAP+Y4jgv" +
                        "KOEOH1Wzaiq2Z4qN6VGTklSh/PNRad7/Zb3XLpabX6hh+Ns44x4hdDKK7oZXhZWq1oqLdWf8lNyTVrfa" +
                        "S2fNreCfFfHT9qf4jfHX9sr4k/st+A/2rNE/Y0+DH7P1jYn4n/FHUJtCj8Q+Itf1KETrp+mtr0qLHFAC" +
                        "RI8YDKyNuLB0Ferwj4e4HKOGKGa4jLp5hisVJ+zppT5IQi7c0+Rat9E9GmrWszyeL/ETHZxxTXynD5jD" +
                        "L8LhYr2lRuHPOclflhzvRLq1qmne90dd+w5+0/8TrD9rX4n/sT/ABM+P2lftYeHtM8NRfF74N/H3w3/A" +
                        "GSbuSwW5gs7nTNSOiySwvNG0+QzNv8AkJYlZEVPN8WeAcBPhzD55hcHLAzdT2VWjLmtezanDnSaTtstN" +
                        "VbVNv0/CPxAzCHEmIyLFY2GOhGn7WlWjy35bpOE+RtNq+710bbtJJeo/wDBaL/lGl+0n/3J3/qfaHXz/" +
                        "wBFz/ku8D/3F/8ATNQ+h+lR/wAkFj/+4X/p6mfZn7K3/JsH7OH/AGIXg/8A9R60r8w8Qv8Akf47/r/V/" +
                        "wDS5H6l4d/8k/gP+vFL/wBIiflz/wAG/wB/yYpq3/Y++IP/AE3aXX7/APTJ/wCSuj/14h/6VM/nv6GH/" +
                        "JIS/wCv8/8A0mB+4Ffygf1qfyuf8Esfgp+238dP2NWsvhF+1JF+y38L/C2t63B4Pj8N+H7fV9W8R63I8" +
                        "dzPPfXVxNG1taRFkhRIcljvLKQFz/oR9IPirhTKOJ+bGZe8biJwhzc03GMIapKKSfNJ6tt7aJPe3+d/0" +
                        "eOFOLM34X5cHmCwWHhOfLywUpVJ6NuTbXLFaJJb6tra/wCoX/BOH9pn4+/tQfs7fHPwP8TvEFlpX7TXw" +
                        "L1vXfgpf/EK2sIJbSTUobRkstSmtYkigkaK43iSNFVXEYO0bzX4D44cB5PkGd4SvhYOWAxMIVVC7vyt+" +
                        "9BN3avG1m22r76H9BeBnH2c8QZHjMPipxjmGGnOk52VuZL3ZtKydpXukknbZXPgH9qb47fHP9jvRLr4r" +
                        "eGv+CtGg/tE/GPwPqNh/wAJ/wDs16tp3hKG11a2udQhtLi2t9P0ieeS0eHzN8iAJIIgzq6FRu/ZPD7hH" +
                        "KeJqqwlXhyeEwtSMuSupVG4tRbTcpJKSdrJ6rmsmnfT8Y8Q+L834YpPF0uJIYvFUpR56DjSSknJJpRi2" +
                        "4tXu1o+W7TVtfp3/gox+2J+0R4HsP8Agnj4p/ZZ1MaZrH7SuposHgbVo7aaz1qXWbTR30yyvHmiEgjEt" +
                        "+A5jaNiCeRwR8D4I+GWSYuedUs2jzRwcfjV04KLqc8o2dr2jpe68mff+OPifneEhklXKZcssZL4HZqbk" +
                        "qfJGV1e15a2s/NHFftN6B/wUw/Yo+G4/a9b9suP9oSHwTcafqnxs+COteFtO0vQH068uorWVNOa1LSCK" +
                        "GSZVLqsMmzMmRgofV4DxnAnFWO/sb+y/qrqKSpVVUlKfMk2ue+l2lezclf3ezPK4+wXHvCmA/tn+1Vi1" +
                        "TcXVounGMOVtJ8ltbJu10ou3vdLHT/tv/tkftEWvjD/AIJn6/8Asf6+tvF+2JY63LZ+CPFkNs+k3Umqa" +
                        "boT6VPqDCB50WxbWGmmEbjIjwR1rz/CjwxySWGz6nnMLvAShecW+ZcsqnOo62fPyWV097noeLXijnccV" +
                        "kFTJZ2WYRnaEkuV80afI5aXXJ7RylZraxxf7Tr/APBRr/gnl4X0X9q/UP2uW/aq+Hmj6lpdh8ePhZ4s8" +
                        "M6botnHaajdJZiXT2szMYIzNKsStGY2R2QssilkHq8BLgjjXETyiOW/Uq8oydGpGpKbvFXtK9ruybad0" +
                        "0mk4uzPK4/fHPBOHhnEsz+vUIyiq1OVOMFaTteNr2V2krWabTakro9l/a6/bb8XeKfjV8Af2Xf2f/jZo" +
                        "f7OVh8XfCkHx7+In7R/xAGlN/ZHhe/ST7Fa6fFq0qW7Xlx5ZJDHI3IVYDew+X8NvCnDYfKsZmuY4SeLl" +
                        "QqujChDm96orczk4rm5Y3/B3T0R9T4l+LGJxGa4LKcuxcMJHEUlWnXny+7Td+VRUny80rfirNas8/8Ah" +
                        "N+0p8Tf2dv21fgj+z1rv7Ymm/ttfAr9pW21PS9D8SCXQLrxD4T8R6dD5ypPLoMspeC4LRqvmkAh2KgeU" +
                        "xf2eI+BcBnfCuLzGnlksuxeDcW4++oVISdtFNKzjq9Oyu3zK3i8N8eY/JOK8JltTNI5lg8YpJS9xzpzi" +
                        "r6uDd1LRa93ZLld+P8Ahl8RP2/P2tf2s/24f2dvAf7Ssfwa+EPwV8ZXEV98QoNC03VPEOnWNxdXtnp2j" +
                        "aYkggRY5fscskk7N5i+WAG+Yq3p59knB3DnDmU5liMB9YxOIoq0OeUYSaUXOpPd3XMkor3XfbS68zIM8" +
                        "4z4k4kzfLcPj/q+Gw1Z3nyRlOKbkoU4LRWfK25P3lZa62f0Z+wB8cf2l9D/AGm/2lv2Fv2ovHa/GPxN8" +
                        "ErHTPHXgL4vLZW+nz6hol+tuwW5jgHzMy30DKWZmRhIjO4CkfEeMnCeRVchwGfZVR+r08TKUJ0ruSjNX" +
                        "2b/AMMl0TXK0lqfceDHF2fUc/x+QZtW+sVMNGM4VbKLlB23S3+KL6tPmTb0P2Dr+aD+nAoAKACgAoAKA" +
                        "CgD5j/aw/ZP+Fv7X/wtv/ht8SbDybmHzL7wZ4zsY0Oo6FqJTatxbs2MqcASxE7ZF4OCFZU1cqMrH8Vnx" +
                        "0/Y0+O/wG+O9v8As+6/4Pudf8Za/cpafDybw1BLcW/iW3uJfKgnsCBlgx4dT80bZD4INYtHSpJo/qW/4" +
                        "Jt/8E2/DX7IHhqD4g/EGC28S/tEeJbby9V1WPbPbeHLadfmsLBuQXIOJ5x9/wC6vyZL6RjYwnO5+rNWZ" +
                        "hQAUAFABQAUAFAH8w+lfsnfF1P+CuurfDF/A2qj9l5fiZH+24fFg069XQxrEPh+XVY0S4KfZy39oXQtz" +
                        "HnICnAxX974jxFy1+G0cV7aP9ofVvqnLzLn5XNRel+b4FzX8z+AcP4cZmvEuWF9jL+z/rP1vm5Xycyg5" +
                        "LX4fjly230PTf8Agtt8G/jXc/En4H/GD4AeCNX8aeIvHnhXxf8Asx/ES28JadeX7ro2rxYtln+xxvsjY" +
                        "6ldHc+FDAdcnHg/RU4nyqOBxeDzGrCnClVpYiHNJL3ovW12rv3IaLWx730seFs1lj8JjcuozqTq0quHn" +
                        "yxcvdktL2Tsvfnq9LpH0X/wUE/YS8YeK/2CPgV8Jfgd4btfHXi/9k+68LeI9F8DXaRvF4ltdC0qTSb23" +
                        "8qbYkrziXz2ViDJtZRlnAPxPgz4u4bD8YYvGY+o6VLHKpFzW9NzkpRd1slblTW109kfceNPg/isTwbg8" +
                        "HgKaq1cC6clB7VFCLjJWdrt35mnvZrdnzL4P+M//BMTxBa6LoWr/wDBLfxJpfxeujbafr/wl0r4Qpf39" +
                        "lfS/u5FVwsPmQpIrgOVVyqk+WDlR95mfC3H1GU6kOIKcsMrtVHibJrp3s2raXau/i6nwWV8VeH9eMKc+" +
                        "HqkcU7KVJYXmkn17XSd9bJtL4U9D+ijRtH0rw9pGlaBoWnQ6Poeh20Gj6NpOmxrDb2tpbRLBDDFGgCqi" +
                        "IoVVAwAMV/E+KxNSvVlUqScpybbb1bb1bb7tn9vYXC06FKNOnFRhFJJLRJLRJLslsflB/wTr8FeMvC/7" +
                        "Un/AAVC1jxL4S1Pw7pPi74lW2q+FNU12wurS31S1EurEzWklwiLPGN6/NGSORzzX9FeNma4XEcP8PwpV" +
                        "IzlTw7Ukmm4u0NJJPR+TP5x8D8qxWH4h4gnVpShGpiE4txaUleesW1qvNHM/sLeBfG/h7/go1/wU48Ue" +
                        "IPB2q6H4Z8W6l4dl8K+ItY0+7trHU0ia93taXE8axzBdwyUY4zXd4t5vhK/BGQUqdWMqlOM+aKkm4/D8" +
                        "STuvmcHhDk+LoccZ/VqUpRp1JQ5ZOLSl8Xwtqz+R5n8Nfh18dLX9vr/AIK1+I/AfhfVfDviDxp4Gt9O+" +
                        "CfjbU7G4tNNu/EI8PQRWTW15cpHBIY7kLu2vgYOcYr3s9zvKJcHcOUsRUjOFOs3VgmnJQ53zXirtXjfo" +
                        "eDkOR5vHjLiSrh6coTqUEqU2moufIuW0nZO0rddD8//AIFax8JPDH7E3xP/AGbrf9hjxj42/wCCg3jDR" +
                        "/Gng/xxrOu+BTdapa6jrUeoW0eqza1qieZawW1tKCqLtYyoQAS5lP7JxdhsyxHFWHzN5vSp5LTnSlBKt" +
                        "aLjHlbgqcdJOUlu7rlflyn4vwhistw/CeIytZRWqZ1UhVjNujeSlPmSm6ktYqMXsrPmW2vM/Sv2gfhF8" +
                        "WNV/wCCFn7Lnw90v4YeItS8faP4ltbnVvA9houpTaxaxpqPiIs01nHCZkUCRclkH3h6ivD4N4ly6n4t5" +
                        "hiZ4imqMqbtNziov3aW0r2ez69D3uNOGcyqeEOX4aGHqOtGorwUJOS96rvG11uunU+pvGXwV8Zf8Es/2" +
                        "pfCXxq/Zj+HOt+Mf2OPjn9i8A/Hv4KfD+z1HW7zw5f2cBS31e0t4RPO4ChpQSGyfNiZl82Ir+e5ZxVhf" +
                        "EHh+pgc0rwp5nhrzo1ZuMFNN6wk3ZLWy6fZkk+WV/0PNOFMV4ecQ0sdlVCdTK8TaFalBSm4SS0nFK7el" +
                        "31+1Ftc0beRfGz4S+Av2bP25fjb8dv2j/2Srr9qX9lL9qGDSvGHhr4j6L4Xi8TXng7WYrcLNDPbSqrQR" +
                        "SmRy2dpdBEV3ujqPpeFeI8ZnvCWEwGWZksFmOCcoyg6ns1VjfRprdqytvZ817JpnzPFfDeDyHi7F5hme" +
                        "WvG5djVGUaip+0dKSWqaeyd3fa65bXaaP0H/YX179ifx98QfFev/sv/ALIWpfBq/wDDukxRyfFnWPAA8" +
                        "K2Oo2+oTI0llaXbfNI48tHkQhcjBG4DI/GPFvB8VYPBU6ea5lHEKcv4are0cXFaSlHpu0nr2dj9r8IsZ" +
                        "wpjcbUqZVlksO4R/iOj7NSUnrGMur0Ta07q50X/AAV78K+KPG3/AATu/aF8MeDPDd/4u8S6n/wif9m+H" +
                        "vDFncX99ceT450a4k8qC0SSR9kcbO2FOFBJ4Bri+jXmOHwnGuCq16kadNe0vKTUUr0aiV27JXbt6nb9J" +
                        "jLsRi+CMbSoU5VKkvZ2jFOTdq1NuyV27JN+h9c/szaff6T+zf8As+6VqtlNpmp6Z4I8KafqWm6hG8M9v" +
                        "PDoNrHJHJHIAyOjAhlIBBGDX5tx5WhUzzGzg04utUaa1TTm7NPqmfpXANGdPIsFCacZRo0009GmoRumu" +
                        "jR+a/8AwQu8C+N/h5+xVqmg+P8AwdqvgfXX8b67qCaL4w0+70y7MEmn6aqSCG9jjfYxQgNjBwfSv3T6W" +
                        "2b4TG8VRqYerGpD2MFeMlJX5p6XTaufhH0Q8nxeC4UlTxFKVKftpu0ouLtyw1s0nY/Zav5gP6kPyO/4I" +
                        "leCvGXgH9hbQfD3jvwlqfgrX4/EviK7k0PxbYXWm3ixS3EZRzDeRxuFYDg4wa/pD6Vea4XGcXTqYepGp" +
                        "D2cFeLUls+qbR/NX0T8qxWC4QhTxFKVOftJu0ouLtddGkz4O+EHwj/aYg/Zc/4LFaF8NfBWv+GviZ488" +
                        "f6zqHw/huNO1CxvNZ0mTVpXvxpnmJG87XFgZo4TFnczKBkkV+v8S8SZC+IOGKmKqwnQpUIqfvRajLlXL" +
                        "z725Z8rd9knc/HuGeGs/XD/ABRTwtKpDEVa83D3ZJzjzPm5Nr80OZK27asfNvjjV/gh44/4JxT/ALN37" +
                        "Ln7C/i24/aJh0Tw9H8aPGreA2jv9GvtG1PT9W1ee51iaJrm5kuprXZDBGcmOQAKgQR19zlOGzbCccLM8" +
                        "1zeksFzz9lD22klKMowSgnyxUU7uT6rd35j4TNsTlOL4GeWZTlFV45Qh7Wfsfeg4SjKbdRrmk5NWjFdH" +
                        "skuU+i/+CiV/wCN/BHgH/gibqfhXwbP4j+JHhDUfC1/4c+H14Gs7m/1vT7LwvJb6c4uApieWeNYjvA2k" +
                        "89K+J8FKOExeM4qjVqqFCpGopTWqUJOteStuknfTc+48bq2LwmD4TnRpOdenKm4wejc4qjaDvs3JW12P" +
                        "W/2vf25fEX7bPwV139kH9l79m/4it8afjE1j4U8c2vxK8MzaJZeELAXsU94dRuJpHjjb935RdsIoYtu3" +
                        "BVPzfhr4S0OFc1hnOa47D/VcPeUPZ1FN1XZqPKkrve9t3a1rXa+l8TPF2vxZlU8lynAYj63iLRn7Sm4K" +
                        "krpy523ZbWvsrt3vZPh/wDgoL4b8Xfsq+Pf+CL3hL4WeFZ/iz4r+AkfiDQdL8KaQFiu/Ef9gab4VgvI4" +
                        "AwOJ7qKGUoApO9hhScA+t4M47DcQ4Pimti6ioU8U4Nye0OeVZxb8otq/ktWtzyfGnAYnh3GcK0cJTdep" +
                        "hedKK3qckaKkl5ySdvN6J7G/wDtn/tdeIf+Ci3wnh/Yu/ZV+APjtvF/xX1TQ4Piv4g+KXhu40PTfB+na" +
                        "bqdvrDfbp3aVUkWe2jLnO3YGCF3ZVPH4XeG1HgnMXnebYyh7KhGfs405qcqspRcfdWl1Zu3W9m7JNnZ4" +
                        "p+JdfjjLVkeUYKv7WvKHtJVKbhGlGMlL3nrZ3Sv0tdK7aRH+2r+ydZ/s+/tIfs+ftK6v+zdL+1x+zL4W" +
                        "8BaZ+z58Y/Aun6PHrmr6YdCtpLaz1mOzkJB/dLEN7fKux0d08xGD8LPEWWdZHjcshjlgcfOvKtSm5ckZ" +
                        "c7TlTcvW+m7umk+VonxV8OI5LnuCzSeAePwEKEaFWCjzyjyJqNRR9La7KzTa5kz6M/ZN8Y/8E6fin8bf" +
                        "Btl+zv+w9qfhPxdpcd34ns/i3efDNND0vQJrGKQbZdRfmKd2Bjj2qQWyu7OAfiPEbLONsvyqrLMs2jOl" +
                        "K0XTVfnlNO20eqW7621sfc+G+acD5jm1KOW5RKnVjeSqvD8kYNX3n0bei6X0uWf+CcHgXxv4W/bV/4Kv" +
                        "694n8Har4c0Lxl430DUPCGta9p93Z2mqwR6h4nZ5LOa4jRJ0UTIS0ZIG5fUVHjhm+ExHCvDtOlVjOdOj" +
                        "NSSkm4vlo6SSd09Hv2ZfgXk+Lw/FfEdSrSlCFStBxbi0pLmraxbVmtVtfdHS/B7wV4ysf8Agsb+1t45v" +
                        "fCWp2fgrWvhr4a0rRvGF1YXUel3d1Eui74Ybt0EMki+W25VYkYORwa4eJs1ws/DHLaEakXVjiKjcbrmS" +
                        "ftNXG90tVrY7+GMqxUPFDMsRKlJUpYemlJxfK2vZ3Slazej0TPpP9hr9sDX/wBsbwR4+8Ya/wDAXW/gL" +
                        "N4K8Q3Hge20fxlNJcNfpBBHKZleWzsisiF9ksQVgjYG9s8fC+LPhpR4YxdGjTxkMUqlNTvFWtdtW+KWj" +
                        "3Turroj7zwj8Ta3FGErVqmDnhXTqOFpO97JO/wx1WzVnZ9Wfb1flB+shQAUAFABQAUAFAGReeH9B1HVd" +
                        "G13UNEtL7XPDv2j/hH9ZvLaGW7sPtkYhn+zzOpeLzUAV9hG4cHIoA16ACgAoAKACgAoAKACgAoAKACgA" +
                        "oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAPz1/bS/ZA8b/ALS/xe/Yl+InhTxNpWg6Z+zF49tPi" +
                        "v4tsfEJuxPqFnb6ppV80Np9mhlXzStg4HmFRkjnrj9o8LfEvCZDlma4atTlKWMoOnFxtaLcZq8rtae8t" +
                        "rs/FPFXwyxefZnlOJo1Ixjgq6qSUr3klKDtGyevuvey2P0Kr8XP2s+Df2oP2UfGXxz/AGmP2IPjd4e8R" +
                        "6ZpGgfsvax4l8R+LtJ1k3QvNQi1qLS44ls/IikTchsW3eYyjkYzzX6/wD4iYXKchzbA1ISlPGwpxi1a0" +
                        "eRzvzXaevMrWTPx3xA8OcVm+f5Rj6dSMYYKdSUk73kpqFuWya05Xe7R95V+QH7EFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAU" +
                        "AFABQAUAFABQAUAFABQAUAf/9kL";
                    this._resources = new DevExpress.XtraReports.Serialization.XRResourceManager(resourceString);
                }
                return this._resources;
            }
        }
        private void InitializeComponent() {
            DevExpress.XtraReports.UI.XRSummary summary1 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary2 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraCharts.XYDiagram xYDiagram1 = new DevExpress.XtraCharts.XYDiagram();
            DevExpress.XtraCharts.PointSeriesLabel pointSeriesLabel1 = new DevExpress.XtraCharts.PointSeriesLabel();
            DevExpress.XtraCharts.PointOptions pointOptions1 = new DevExpress.XtraCharts.PointOptions();
            DevExpress.XtraCharts.LineSeriesView lineSeriesView1 = new DevExpress.XtraCharts.LineSeriesView();
            DevExpress.XtraReports.UI.XRSummary summary3 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary4 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary5 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary6 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary7 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraCharts.XYDiagram xYDiagram2 = new DevExpress.XtraCharts.XYDiagram();
            DevExpress.XtraCharts.PointSeriesLabel pointSeriesLabel2 = new DevExpress.XtraCharts.PointSeriesLabel();
            DevExpress.XtraCharts.PointOptions pointOptions2 = new DevExpress.XtraCharts.PointOptions();
            DevExpress.XtraCharts.LineSeriesView lineSeriesView2 = new DevExpress.XtraCharts.LineSeriesView();
            DevExpress.XtraReports.UI.XRSummary summary8 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary9 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary10 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary11 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary12 = new DevExpress.XtraReports.UI.XRSummary();
            this.Detail = new DevExpress.XtraReports.UI.DetailBand();
            this.topMarginBand1 = new DevExpress.XtraReports.UI.TopMarginBand();
            this.bottomMarginBand1 = new DevExpress.XtraReports.UI.BottomMarginBand();
            this.GroupHeader1 = new DevExpress.XtraReports.UI.GroupHeaderBand();
            this.GroupFooter1 = new DevExpress.XtraReports.UI.GroupFooterBand();
            this.ReportHeader = new DevExpress.XtraReports.UI.ReportHeaderBand();
            this.ReportFooter = new DevExpress.XtraReports.UI.ReportFooterBand();
            this.PageFooter = new DevExpress.XtraReports.UI.PageFooterBand();
            this.GroupHeader3 = new DevExpress.XtraReports.UI.GroupHeaderBand();
            this.label50 = new DevExpress.XtraReports.UI.XRLabel();
            this.label45 = new DevExpress.XtraReports.UI.XRLabel();
            this.label25 = new DevExpress.XtraReports.UI.XRLabel();
            this.label23 = new DevExpress.XtraReports.UI.XRLabel();
            this.label19 = new DevExpress.XtraReports.UI.XRLabel();
            this.label2 = new DevExpress.XtraReports.UI.XRLabel();
            this.chart3 = new DevExpress.XtraReports.UI.XRChart();
            this.VentaCteCat = new XtraReportSerialization.VentaCteCatDataSet();
            this.label4 = new DevExpress.XtraReports.UI.XRLabel();
            this.label3 = new DevExpress.XtraReports.UI.XRLabel();
            this.label1 = new DevExpress.XtraReports.UI.XRLabel();
            this.line3 = new DevExpress.XtraReports.UI.XRLine();
            this.label8 = new DevExpress.XtraReports.UI.XRLabel();
            this.label7 = new DevExpress.XtraReports.UI.XRLabel();
            this.label11 = new DevExpress.XtraReports.UI.XRLabel();
            this.label10 = new DevExpress.XtraReports.UI.XRLabel();
            this.label61 = new DevExpress.XtraReports.UI.XRLabel();
            this.label56 = new DevExpress.XtraReports.UI.XRLabel();
            this.label55 = new DevExpress.XtraReports.UI.XRLabel();
            this.label54 = new DevExpress.XtraReports.UI.XRLabel();
            this.label53 = new DevExpress.XtraReports.UI.XRLabel();
            this.label26 = new DevExpress.XtraReports.UI.XRLabel();
            this.label198 = new DevExpress.XtraReports.UI.XRLabel();
            this.pictureBox2 = new DevExpress.XtraReports.UI.XRPictureBox();
            this.line6 = new DevExpress.XtraReports.UI.XRLine();
            this.pageInfo3 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.label30 = new DevExpress.XtraReports.UI.XRLabel();
            this.label32 = new DevExpress.XtraReports.UI.XRLabel();
            this.label29 = new DevExpress.XtraReports.UI.XRLabel();
            this.label24 = new DevExpress.XtraReports.UI.XRLabel();
            this.label28 = new DevExpress.XtraReports.UI.XRLabel();
            this.chart1 = new DevExpress.XtraReports.UI.XRChart();
            this.label38 = new DevExpress.XtraReports.UI.XRLabel();
            this.line4 = new DevExpress.XtraReports.UI.XRLine();
            this.pageInfo1 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.pictureBox1 = new DevExpress.XtraReports.UI.XRPictureBox();
            this.label27 = new DevExpress.XtraReports.UI.XRLabel();
            this.label22 = new DevExpress.XtraReports.UI.XRLabel();
            this.label21 = new DevExpress.XtraReports.UI.XRLabel();
            this.label20 = new DevExpress.XtraReports.UI.XRLabel();
            this.label16 = new DevExpress.XtraReports.UI.XRLabel();
            this.label17 = new DevExpress.XtraReports.UI.XRLabel();
            this.label18 = new DevExpress.XtraReports.UI.XRLabel();
            this.label5 = new DevExpress.XtraReports.UI.XRLabel();
            this.label6 = new DevExpress.XtraReports.UI.XRLabel();
            this.label15 = new DevExpress.XtraReports.UI.XRLabel();
            this.pageBreak1 = new DevExpress.XtraReports.UI.XRPageBreak();
            this.line2 = new DevExpress.XtraReports.UI.XRLine();
            this.label14 = new DevExpress.XtraReports.UI.XRLabel();
            this.label9 = new DevExpress.XtraReports.UI.XRLabel();
            this.label12 = new DevExpress.XtraReports.UI.XRLabel();
            this.label13 = new DevExpress.XtraReports.UI.XRLabel();
            this.line7 = new DevExpress.XtraReports.UI.XRLine();
            this.line1 = new DevExpress.XtraReports.UI.XRLine();
            this.pageInfo4 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.pageInfo2 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.line9 = new DevExpress.XtraReports.UI.XRLine();
            this.line5 = new DevExpress.XtraReports.UI.XRLine();
            this.label37 = new DevExpress.XtraReports.UI.XRLabel();
            this.label36 = new DevExpress.XtraReports.UI.XRLabel();
            this.label33 = new DevExpress.XtraReports.UI.XRLabel();
            this.label31 = new DevExpress.XtraReports.UI.XRLabel();
            this.label46 = new DevExpress.XtraReports.UI.XRLabel();
            this.label35 = new DevExpress.XtraReports.UI.XRLabel();
            this.TableTableAdapter = new System.Data.OleDb.OleDbDataAdapter();
            this.oleDbCommand1 = new System.Data.OleDb.OleDbCommand();
            this.oleDbConnection1 = new System.Data.OleDb.OleDbConnection();
            this.Title = new DevExpress.XtraReports.UI.XRControlStyle();
            this.FieldCaption = new DevExpress.XtraReports.UI.XRControlStyle();
            this.PageInfo = new DevExpress.XtraReports.UI.XRControlStyle();
            this.DataField = new DevExpress.XtraReports.UI.XRControlStyle();
            ((System.ComponentModel.ISupportInitialize)(this.chart3)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(xYDiagram1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(pointSeriesLabel1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(lineSeriesView1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.VentaCteCat)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(xYDiagram2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(pointSeriesLabel2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(lineSeriesView2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this)).BeginInit();
            // 
            // Detail
            // 
            this.Detail.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.label50,
                        this.label45,
                        this.label25,
                        this.label23,
                        this.label19,
                        this.label2});
            this.Detail.HeightF = 18F;
            this.Detail.Name = "Detail";
            this.Detail.Scripts.OnBeforePrint = "Detail_BeforePrint";
            this.Detail.StyleName = "DataField";
            // 
            // topMarginBand1
            // 
            this.topMarginBand1.HeightF = 18F;
            this.topMarginBand1.Name = "topMarginBand1";
            // 
            // bottomMarginBand1
            // 
            this.bottomMarginBand1.HeightF = 54F;
            this.bottomMarginBand1.Name = "bottomMarginBand1";
            // 
            // GroupHeader1
            // 
            this.GroupHeader1.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.chart3});
            this.GroupHeader1.GroupFields.AddRange(new DevExpress.XtraReports.UI.GroupField[] {
                        new DevExpress.XtraReports.UI.GroupField("Moneda", DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending)});
            this.GroupHeader1.GroupUnion = DevExpress.XtraReports.UI.GroupUnion.WholePage;
            this.GroupHeader1.HeightF = 290.2067F;
            this.GroupHeader1.Level = 1;
            this.GroupHeader1.Name = "GroupHeader1";
            this.GroupHeader1.RepeatEveryPage = true;
            this.GroupHeader1.Scripts.OnBeforePrint = "GroupHeader1_BeforePrint";
            // 
            // GroupFooter1
            // 
            this.GroupFooter1.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.label4,
                        this.label3,
                        this.label1,
                        this.line3,
                        this.label8,
                        this.label7,
                        this.label11,
                        this.label10});
            this.GroupFooter1.GroupUnion = DevExpress.XtraReports.UI.GroupFooterUnion.WithLastDetail;
            this.GroupFooter1.HeightF = 26.95834F;
            this.GroupFooter1.KeepTogether = true;
            this.GroupFooter1.Level = 1;
            this.GroupFooter1.Name = "GroupFooter1";
            this.GroupFooter1.Scripts.OnBeforePrint = "GroupHeader1_BeforePrint";
            // 
            // ReportHeader
            // 
            this.ReportHeader.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.label61,
                        this.label56,
                        this.label55,
                        this.label54,
                        this.label53,
                        this.label26,
                        this.label198,
                        this.pictureBox2,
                        this.line6,
                        this.pageInfo3});
            this.ReportHeader.HeightF = 158.125F;
            this.ReportHeader.Name = "ReportHeader";
            // 
            // ReportFooter
            // 
            this.ReportFooter.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.label30,
                        this.label32,
                        this.label29,
                        this.label24,
                        this.label28,
                        this.chart1,
                        this.label38,
                        this.line4,
                        this.pageInfo1,
                        this.pictureBox1,
                        this.label27,
                        this.label22,
                        this.label21,
                        this.label20,
                        this.label16,
                        this.label17,
                        this.label18,
                        this.label5,
                        this.label6,
                        this.label15,
                        this.pageBreak1,
                        this.line2,
                        this.label14,
                        this.label9,
                        this.label12,
                        this.label13,
                        this.line7,
                        this.line1});
            this.ReportFooter.HeightF = 708.2069F;
            this.ReportFooter.Name = "ReportFooter";
            this.ReportFooter.Scripts.OnBeforePrint = "ReportFooter_BeforePrint";
            // 
            // PageFooter
            // 
            this.PageFooter.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.pageInfo4,
                        this.pageInfo2});
            this.PageFooter.HeightF = 20.83333F;
            this.PageFooter.Name = "PageFooter";
            // 
            // GroupHeader3
            // 
            this.GroupHeader3.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.line9,
                        this.line5,
                        this.label37,
                        this.label36,
                        this.label33,
                        this.label31,
                        this.label46,
                        this.label35});
            this.GroupHeader3.HeightF = 23.66664F;
            this.GroupHeader3.KeepTogether = true;
            this.GroupHeader3.Name = "GroupHeader3";
            this.GroupHeader3.RepeatEveryPage = true;
            this.GroupHeader3.Scripts.OnBeforePrint = "GroupHeader3_BeforePrint";
            // 
            // label50
            // 
            this.label50.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.ImporteTotalMC", "{0:$#,#.00}")});
            this.label50.Font = new System.Drawing.Font("Arial", 8F);
            this.label50.LocationFloat = new DevExpress.Utils.PointFloat(779.1249F, 0F);
            this.label50.Name = "label50";
            this.label50.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label50.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label50.StylePriority.UseFont = false;
            this.label50.StylePriority.UseTextAlignment = false;
            this.label50.Text = "label50";
            this.label50.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label45
            // 
            this.label45.CanGrow = false;
            this.label45.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Categoria")});
            this.label45.Font = new System.Drawing.Font("Arial", 8F);
            this.label45.LocationFloat = new DevExpress.Utils.PointFloat(149.125F, 0F);
            this.label45.Name = "label45";
            this.label45.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label45.SizeF = new System.Drawing.SizeF(150F, 18F);
            this.label45.StylePriority.UseFont = false;
            this.label45.StylePriority.UseTextAlignment = false;
            summary1.FormatString = "{0:$0.00}";
            this.label45.Summary = summary1;
            this.label45.Text = "label45";
            this.label45.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            this.label45.WordWrap = false;
            // 
            // label25
            // 
            this.label25.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.DescuentosTotales", "{0:$#,#.00}")});
            this.label25.Font = new System.Drawing.Font("Arial", 8F);
            this.label25.LocationFloat = new DevExpress.Utils.PointFloat(419.125F, 0F);
            this.label25.Name = "label25";
            this.label25.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label25.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label25.StylePriority.UseFont = false;
            this.label25.StylePriority.UseTextAlignment = false;
            this.label25.Text = "label25";
            this.label25.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label23
            // 
            this.label23.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.ImporteTotal", "{0:$#,#.00}")});
            this.label23.Font = new System.Drawing.Font("Arial", 8F);
            this.label23.LocationFloat = new DevExpress.Utils.PointFloat(659.125F, 0F);
            this.label23.Name = "label23";
            this.label23.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label23.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label23.StylePriority.UseFont = false;
            this.label23.StylePriority.UseTextAlignment = false;
            this.label23.Text = "label23";
            this.label23.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label19
            // 
            this.label19.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.SubTotal", "{0:$#,#.00}")});
            this.label19.Font = new System.Drawing.Font("Arial", 8F);
            this.label19.LocationFloat = new DevExpress.Utils.PointFloat(299.125F, 0F);
            this.label19.Name = "label19";
            this.label19.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label19.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label19.StylePriority.UseFont = false;
            this.label19.StylePriority.UseTextAlignment = false;
            this.label19.Text = "label19";
            this.label19.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label2
            // 
            this.label2.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Impuestos", "{0:$#,#.00}")});
            this.label2.Font = new System.Drawing.Font("Arial", 8F);
            this.label2.LocationFloat = new DevExpress.Utils.PointFloat(539.1251F, 0F);
            this.label2.Name = "label2";
            this.label2.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label2.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label2.StylePriority.UseFont = false;
            this.label2.StylePriority.UseTextAlignment = false;
            summary2.FormatString = "{0:$0.00}";
            this.label2.Summary = summary2;
            this.label2.Text = "label2";
            this.label2.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // chart3
            // 
            this.chart3.BorderColor = System.Drawing.Color.Black;
            this.chart3.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.chart3.DataMember = "Table";
            this.chart3.DataSource = this.VentaCteCat;
            xYDiagram1.AxisX.Alignment = DevExpress.XtraCharts.AxisAlignment.Zero;
            xYDiagram1.AxisX.Label.Font = new System.Drawing.Font("Arial", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            xYDiagram1.AxisX.Range.SideMarginsEnabled = true;
            xYDiagram1.AxisX.VisibleInPanesSerializable = "-1";
            xYDiagram1.AxisY.NumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Currency;
            xYDiagram1.AxisY.Range.SideMarginsEnabled = true;
            xYDiagram1.AxisY.VisibleInPanesSerializable = "-1";
            this.chart3.Diagram = xYDiagram1;
            this.chart3.IndicatorsPaletteName = "Default";
            this.chart3.Legend.Font = new System.Drawing.Font("Arial", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.chart3.Legend.HorizontalIndent = 1;
            this.chart3.Legend.Margins.Bottom = 1;
            this.chart3.Legend.Margins.Left = 1;
            this.chart3.Legend.Margins.Right = 1;
            this.chart3.Legend.Margins.Top = 1;
            this.chart3.Legend.TextOffset = 0;
            this.chart3.Legend.VerticalIndent = 1;
            this.chart3.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 10.00001F);
            this.chart3.Name = "chart3";
            this.chart3.Scripts.OnBeforePrint = "chart2_BeforePrint";
            this.chart3.SeriesDataMember = "SaldoDescripcion";
            this.chart3.SeriesSerializable = new DevExpress.XtraCharts.Series[0];
            this.chart3.SeriesTemplate.ArgumentDataMember = "FechaGrafica";
            pointSeriesLabel1.Font = new System.Drawing.Font("Arial", 6F);
            pointSeriesLabel1.LineVisible = true;
            pointSeriesLabel1.ResolveOverlappingMode = DevExpress.XtraCharts.ResolveOverlappingMode.Default;
            this.chart3.SeriesTemplate.Label = pointSeriesLabel1;
            pointOptions1.ValueNumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Currency;
            this.chart3.SeriesTemplate.PointOptions = pointOptions1;
            this.chart3.SeriesTemplate.ValueDataMembersSerializable = "SaldoImporte";
            this.chart3.SeriesTemplate.View = lineSeriesView1;
            this.chart3.SizeF = new System.Drawing.SizeF(1048F, 274.0017F);
            // 
            // VentaCteCat
            // 
            this.VentaCteCat.DataSetName = "VentaCteCatDataSet";
            this.VentaCteCat.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            // 
            // label4
            // 
            this.label4.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.SubTotal")});
            this.label4.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label4.LocationFloat = new DevExpress.Utils.PointFloat(299.125F, 4.791673F);
            this.label4.Name = "label4";
            this.label4.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label4.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label4.StylePriority.UseFont = false;
            this.label4.StylePriority.UseTextAlignment = false;
            summary3.FormatString = "{0:$#,#.00}";
            summary3.Running = DevExpress.XtraReports.UI.SummaryRunning.Group;
            this.label4.Summary = summary3;
            this.label4.Text = "label4";
            this.label4.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label3
            // 
            this.label3.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.DescuentosTotales")});
            this.label3.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label3.LocationFloat = new DevExpress.Utils.PointFloat(419.125F, 4.791673F);
            this.label3.Name = "label3";
            this.label3.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label3.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label3.StylePriority.UseFont = false;
            this.label3.StylePriority.UseTextAlignment = false;
            summary4.FormatString = "{0:$#,#.00}";
            summary4.Running = DevExpress.XtraReports.UI.SummaryRunning.Group;
            this.label3.Summary = summary4;
            this.label3.Text = "label3";
            this.label3.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label1
            // 
            this.label1.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Impuestos")});
            this.label1.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label1.LocationFloat = new DevExpress.Utils.PointFloat(539.1251F, 4.791673F);
            this.label1.Name = "label1";
            this.label1.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label1.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label1.StylePriority.UseFont = false;
            this.label1.StylePriority.UseTextAlignment = false;
            summary5.FormatString = "{0:$#,#.00}";
            summary5.Running = DevExpress.XtraReports.UI.SummaryRunning.Group;
            this.label1.Summary = summary5;
            this.label1.Text = "label1";
            this.label1.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // line3
            // 
            this.line3.LocationFloat = new DevExpress.Utils.PointFloat(6.357829E-05F, 2.791673F);
            this.line3.Name = "line3";
            this.line3.SizeF = new System.Drawing.SizeF(1049F, 2F);
            // 
            // label8
            // 
            this.label8.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.ImporteTotalMC")});
            this.label8.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label8.LocationFloat = new DevExpress.Utils.PointFloat(779.1249F, 4.791673F);
            this.label8.Name = "label8";
            this.label8.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label8.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label8.StylePriority.UseFont = false;
            this.label8.StylePriority.UseTextAlignment = false;
            summary6.FormatString = "{0:$#,#.00}";
            summary6.Running = DevExpress.XtraReports.UI.SummaryRunning.Group;
            this.label8.Summary = summary6;
            this.label8.Text = "label8";
            this.label8.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label7
            // 
            this.label7.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.ImporteTotal")});
            this.label7.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label7.LocationFloat = new DevExpress.Utils.PointFloat(659.125F, 4.791673F);
            this.label7.Name = "label7";
            this.label7.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label7.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label7.StylePriority.UseFont = false;
            this.label7.StylePriority.UseTextAlignment = false;
            summary7.FormatString = "{0:$#,#.00}";
            summary7.Running = DevExpress.XtraReports.UI.SummaryRunning.Group;
            this.label7.Summary = summary7;
            this.label7.Text = "label7";
            this.label7.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label11
            // 
            this.label11.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label11.LocationFloat = new DevExpress.Utils.PointFloat(19.12502F, 4.791641F);
            this.label11.Name = "label11";
            this.label11.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label11.SizeF = new System.Drawing.SizeF(49.16666F, 18.00003F);
            this.label11.StylePriority.UseFont = false;
            this.label11.StylePriority.UseTextAlignment = false;
            this.label11.Text = "Total en ";
            this.label11.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label10
            // 
            this.label10.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Moneda")});
            this.label10.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label10.LocationFloat = new DevExpress.Utils.PointFloat(68.29169F, 4.791641F);
            this.label10.Name = "label10";
            this.label10.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label10.SizeF = new System.Drawing.SizeF(230.8333F, 18.00003F);
            this.label10.StyleName = "DataField";
            this.label10.StylePriority.UseFont = false;
            this.label10.StylePriority.UseTextAlignment = false;
            this.label10.Text = "label10";
            this.label10.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label61
            // 
            this.label61.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label61.LocationFloat = new DevExpress.Utils.PointFloat(483.8333F, 127.9584F);
            this.label61.Name = "label61";
            this.label61.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label61.SizeF = new System.Drawing.SizeF(74.16666F, 17.99997F);
            this.label61.StylePriority.UseFont = false;
            this.label61.Text = "De la Fecha";
            // 
            // label56
            // 
            this.label56.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Reporte")});
            this.label56.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label56.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label56.LocationFloat = new DevExpress.Utils.PointFloat(0F, 127.9584F);
            this.label56.Name = "label56";
            this.label56.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label56.SizeF = new System.Drawing.SizeF(483.8333F, 18.00001F);
            this.label56.StyleName = "Title";
            this.label56.StylePriority.UseFont = false;
            this.label56.StylePriority.UseForeColor = false;
            this.label56.StylePriority.UseTextAlignment = false;
            this.label56.Text = "label198";
            this.label56.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label55
            // 
            this.label55.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label55.LocationFloat = new DevExpress.Utils.PointFloat(758F, 127.9584F);
            this.label55.Name = "label55";
            this.label55.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label55.SizeF = new System.Drawing.SizeF(92F, 18F);
            this.label55.StylePriority.UseFont = false;
            this.label55.Text = "Hasta la Fecha";
            // 
            // label54
            // 
            this.label54.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.FechaHasta", "{0:dddd d\' de \'MMMM\' de \'yyyy}")});
            this.label54.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label54.LocationFloat = new DevExpress.Utils.PointFloat(850F, 127.9584F);
            this.label54.Name = "label54";
            this.label54.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label54.SizeF = new System.Drawing.SizeF(200F, 18F);
            this.label54.StylePriority.UseFont = false;
            this.label54.Text = "label54";
            // 
            // label53
            // 
            this.label53.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.FechaDesde", "{0:dddd d\' de \'MMMM\' de \'yyyy}")});
            this.label53.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label53.LocationFloat = new DevExpress.Utils.PointFloat(558F, 127.9584F);
            this.label53.Name = "label53";
            this.label53.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label53.SizeF = new System.Drawing.SizeF(200F, 18F);
            this.label53.StylePriority.UseFont = false;
            this.label53.Text = "label53";
            // 
            // label26
            // 
            this.label26.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.EmpresaNombre")});
            this.label26.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label26.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label26.LocationFloat = new DevExpress.Utils.PointFloat(369.7918F, 107.9584F);
            this.label26.Name = "label26";
            this.label26.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label26.SizeF = new System.Drawing.SizeF(368.2082F, 18F);
            this.label26.StyleName = "Title";
            this.label26.StylePriority.UseFont = false;
            this.label26.StylePriority.UseForeColor = false;
            this.label26.StylePriority.UseTextAlignment = false;
            this.label26.Text = "label26";
            this.label26.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            // 
            // label198
            // 
            this.label198.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Titulo")});
            this.label198.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label198.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label198.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 107.9584F);
            this.label198.Name = "label198";
            this.label198.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label198.SizeF = new System.Drawing.SizeF(368.2083F, 18F);
            this.label198.StyleName = "Title";
            this.label198.StylePriority.UseFont = false;
            this.label198.StylePriority.UseForeColor = false;
            this.label198.StylePriority.UseTextAlignment = false;
            this.label198.Text = "label198";
            this.label198.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // pictureBox2
            // 
            this.pictureBox2.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox2.Image")));
            this.pictureBox2.LocationFloat = new DevExpress.Utils.PointFloat(0F, 10.00001F);
            this.pictureBox2.Name = "pictureBox2";
            this.pictureBox2.SizeF = new System.Drawing.SizeF(259.3751F, 97.95833F);
            // 
            // line6
            // 
            this.line6.BorderColor = System.Drawing.Color.Gray;
            this.line6.ForeColor = System.Drawing.Color.Gray;
            this.line6.LocationFloat = new DevExpress.Utils.PointFloat(2.000077F, 125.9584F);
            this.line6.Name = "line6";
            this.line6.SizeF = new System.Drawing.SizeF(1049F, 2F);
            this.line6.StylePriority.UseBorderColor = false;
            this.line6.StylePriority.UseForeColor = false;
            // 
            // pageInfo3
            // 
            this.pageInfo3.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo3.LocationFloat = new DevExpress.Utils.PointFloat(738F, 107.9584F);
            this.pageInfo3.Name = "pageInfo3";
            this.pageInfo3.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo3.PageInfo = DevExpress.XtraPrinting.PageInfo.DateTime;
            this.pageInfo3.SizeF = new System.Drawing.SizeF(313F, 18F);
            this.pageInfo3.StyleName = "PageInfo";
            this.pageInfo3.StylePriority.UseFont = false;
            this.pageInfo3.StylePriority.UseTextAlignment = false;
            this.pageInfo3.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label30
            // 
            this.label30.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label30.LocationFloat = new DevExpress.Utils.PointFloat(483.8333F, 130F);
            this.label30.Name = "label30";
            this.label30.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label30.SizeF = new System.Drawing.SizeF(74.16666F, 17.99997F);
            this.label30.StylePriority.UseFont = false;
            this.label30.Text = "De la Fecha";
            // 
            // label32
            // 
            this.label32.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Reporte")});
            this.label32.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label32.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label32.LocationFloat = new DevExpress.Utils.PointFloat(0F, 130F);
            this.label32.Name = "label32";
            this.label32.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label32.SizeF = new System.Drawing.SizeF(483.8333F, 18.00001F);
            this.label32.StyleName = "Title";
            this.label32.StylePriority.UseFont = false;
            this.label32.StylePriority.UseForeColor = false;
            this.label32.StylePriority.UseTextAlignment = false;
            this.label32.Text = "label198";
            this.label32.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label29
            // 
            this.label29.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label29.LocationFloat = new DevExpress.Utils.PointFloat(758F, 130F);
            this.label29.Name = "label29";
            this.label29.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label29.SizeF = new System.Drawing.SizeF(92F, 18F);
            this.label29.StylePriority.UseFont = false;
            this.label29.Text = "Hasta la Fecha";
            // 
            // label24
            // 
            this.label24.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.FechaHasta", "{0:dddd d\' de \'MMMM\' de \'yyyy}")});
            this.label24.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label24.LocationFloat = new DevExpress.Utils.PointFloat(850F, 130F);
            this.label24.Name = "label24";
            this.label24.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label24.SizeF = new System.Drawing.SizeF(200F, 18F);
            this.label24.StylePriority.UseFont = false;
            this.label24.Text = "label54";
            // 
            // label28
            // 
            this.label28.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.FechaDesde", "{0:dddd d\' de \'MMMM\' de \'yyyy}")});
            this.label28.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label28.LocationFloat = new DevExpress.Utils.PointFloat(558F, 130F);
            this.label28.Name = "label28";
            this.label28.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label28.SizeF = new System.Drawing.SizeF(200F, 18F);
            this.label28.StylePriority.UseFont = false;
            this.label28.Text = "label53";
            // 
            // chart1
            // 
            this.chart1.AppearanceName = "Pastel Kit";
            this.chart1.BorderColor = System.Drawing.Color.Black;
            this.chart1.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.chart1.DataMember = "Table";
            this.chart1.DataSource = this.VentaCteCat;
            xYDiagram2.AxisX.Label.Font = new System.Drawing.Font("Arial", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            xYDiagram2.AxisX.Range.SideMarginsEnabled = true;
            xYDiagram2.AxisX.VisibleInPanesSerializable = "-1";
            xYDiagram2.AxisY.NumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Currency;
            xYDiagram2.AxisY.Range.SideMarginsEnabled = true;
            xYDiagram2.AxisY.VisibleInPanesSerializable = "-1";
            this.chart1.Diagram = xYDiagram2;
            this.chart1.IndicatorsPaletteName = "Default";
            this.chart1.Legend.Font = new System.Drawing.Font("Arial", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.chart1.Legend.HorizontalIndent = 0;
            this.chart1.Legend.TextOffset = 0;
            this.chart1.Legend.VerticalIndent = 0;
            this.chart1.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 169.2085F);
            this.chart1.Name = "chart1";
            this.chart1.Scripts.OnBeforePrint = "chart1_BeforePrint";
            this.chart1.SeriesDataMember = "SaldoDescripcionMC";
            this.chart1.SeriesSerializable = new DevExpress.XtraCharts.Series[0];
            this.chart1.SeriesTemplate.ArgumentDataMember = "FechaGrafica";
            pointSeriesLabel2.Font = new System.Drawing.Font("Arial", 6F);
            pointSeriesLabel2.LineVisible = true;
            pointSeriesLabel2.ResolveOverlappingMode = DevExpress.XtraCharts.ResolveOverlappingMode.Default;
            this.chart1.SeriesTemplate.Label = pointSeriesLabel2;
            pointOptions2.ValueNumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Currency;
            this.chart1.SeriesTemplate.PointOptions = pointOptions2;
            this.chart1.SeriesTemplate.ValueDataMembersSerializable = "SaldoImporteMC";
            this.chart1.SeriesTemplate.View = lineSeriesView2;
            this.chart1.SizeF = new System.Drawing.SizeF(1049F, 486.04F);
            // 
            // label38
            // 
            this.label38.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.EmpresaNombre")});
            this.label38.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label38.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label38.LocationFloat = new DevExpress.Utils.PointFloat(369.7918F, 110F);
            this.label38.Name = "label38";
            this.label38.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label38.SizeF = new System.Drawing.SizeF(368.2083F, 18F);
            this.label38.StyleName = "Title";
            this.label38.StylePriority.UseFont = false;
            this.label38.StylePriority.UseForeColor = false;
            this.label38.StylePriority.UseTextAlignment = false;
            this.label38.Text = "label26";
            this.label38.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            // 
            // line4
            // 
            this.line4.BorderColor = System.Drawing.Color.Gray;
            this.line4.ForeColor = System.Drawing.Color.Gray;
            this.line4.LocationFloat = new DevExpress.Utils.PointFloat(0F, 128F);
            this.line4.Name = "line4";
            this.line4.SizeF = new System.Drawing.SizeF(1049F, 2F);
            this.line4.StylePriority.UseBorderColor = false;
            this.line4.StylePriority.UseForeColor = false;
            // 
            // pageInfo1
            // 
            this.pageInfo1.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo1.LocationFloat = new DevExpress.Utils.PointFloat(738F, 110F);
            this.pageInfo1.Name = "pageInfo1";
            this.pageInfo1.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo1.PageInfo = DevExpress.XtraPrinting.PageInfo.DateTime;
            this.pageInfo1.SizeF = new System.Drawing.SizeF(313F, 18F);
            this.pageInfo1.StyleName = "PageInfo";
            this.pageInfo1.StylePriority.UseFont = false;
            this.pageInfo1.StylePriority.UseTextAlignment = false;
            this.pageInfo1.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // pictureBox1
            // 
            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox1.Image")));
            this.pictureBox1.LocationFloat = new DevExpress.Utils.PointFloat(0F, 10.00001F);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.SizeF = new System.Drawing.SizeF(259.3751F, 97.95833F);
            // 
            // label27
            // 
            this.label27.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Titulo")});
            this.label27.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label27.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label27.LocationFloat = new DevExpress.Utils.PointFloat(1.000031F, 110F);
            this.label27.Name = "label27";
            this.label27.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label27.SizeF = new System.Drawing.SizeF(368.2083F, 18F);
            this.label27.StyleName = "Title";
            this.label27.StylePriority.UseFont = false;
            this.label27.StylePriority.UseForeColor = false;
            this.label27.StylePriority.UseTextAlignment = false;
            this.label27.Text = "label198";
            this.label27.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label22
            // 
            this.label22.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Impuestos")});
            this.label22.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label22.LocationFloat = new DevExpress.Utils.PointFloat(520.9999F, 690.0402F);
            this.label22.Name = "label22";
            this.label22.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label22.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label22.StylePriority.UseFont = false;
            this.label22.StylePriority.UseTextAlignment = false;
            summary8.FormatString = "{0:$#,#.00}";
            summary8.Running = DevExpress.XtraReports.UI.SummaryRunning.Report;
            this.label22.Summary = summary8;
            this.label22.Text = "label22";
            this.label22.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label22.Visible = false;
            // 
            // label21
            // 
            this.label21.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.DescuentosTotales")});
            this.label21.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label21.LocationFloat = new DevExpress.Utils.PointFloat(401.0002F, 690.0403F);
            this.label21.Name = "label21";
            this.label21.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label21.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label21.StylePriority.UseFont = false;
            this.label21.StylePriority.UseTextAlignment = false;
            summary9.FormatString = "{0:$#,#.00}";
            summary9.Running = DevExpress.XtraReports.UI.SummaryRunning.Report;
            this.label21.Summary = summary9;
            this.label21.Text = "label21";
            this.label21.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label21.Visible = false;
            // 
            // label20
            // 
            this.label20.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.SubTotal")});
            this.label20.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label20.LocationFloat = new DevExpress.Utils.PointFloat(281.0001F, 690.0403F);
            this.label20.Name = "label20";
            this.label20.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label20.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label20.StylePriority.UseFont = false;
            this.label20.StylePriority.UseTextAlignment = false;
            summary10.FormatString = "{0:$#,#.00}";
            summary10.Running = DevExpress.XtraReports.UI.SummaryRunning.Report;
            this.label20.Summary = summary10;
            this.label20.Text = "label20";
            this.label20.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label20.Visible = false;
            // 
            // label16
            // 
            this.label16.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label16.LocationFloat = new DevExpress.Utils.PointFloat(761F, 667.7485F);
            this.label16.Name = "label16";
            this.label16.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label16.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label16.StylePriority.UseFont = false;
            this.label16.StylePriority.UseTextAlignment = false;
            this.label16.Text = "Importe Total MC";
            this.label16.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label17
            // 
            this.label17.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label17.LocationFloat = new DevExpress.Utils.PointFloat(641.0001F, 667.7485F);
            this.label17.Name = "label17";
            this.label17.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label17.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label17.StylePriority.UseFont = false;
            this.label17.StylePriority.UseTextAlignment = false;
            this.label17.Text = "Importe Total";
            this.label17.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label17.Visible = false;
            // 
            // label18
            // 
            this.label18.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label18.LocationFloat = new DevExpress.Utils.PointFloat(521.0001F, 667.7485F);
            this.label18.Name = "label18";
            this.label18.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label18.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label18.StylePriority.UseFont = false;
            this.label18.StylePriority.UseTextAlignment = false;
            this.label18.Text = "Impuestos";
            this.label18.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label18.Visible = false;
            // 
            // label5
            // 
            this.label5.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label5.LocationFloat = new DevExpress.Utils.PointFloat(281F, 667.7485F);
            this.label5.Name = "label5";
            this.label5.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label5.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label5.StylePriority.UseFont = false;
            this.label5.StylePriority.UseTextAlignment = false;
            this.label5.Text = "Sub Total";
            this.label5.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label5.Visible = false;
            // 
            // label6
            // 
            this.label6.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label6.LocationFloat = new DevExpress.Utils.PointFloat(161F, 667.7485F);
            this.label6.Name = "label6";
            this.label6.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label6.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label6.StylePriority.UseFont = false;
            this.label6.StylePriority.UseTextAlignment = false;
            this.label6.Text = "Categoría";
            this.label6.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            this.label6.Visible = false;
            // 
            // label15
            // 
            this.label15.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label15.LocationFloat = new DevExpress.Utils.PointFloat(401F, 667.7485F);
            this.label15.Name = "label15";
            this.label15.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label15.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label15.StylePriority.UseFont = false;
            this.label15.StylePriority.UseTextAlignment = false;
            this.label15.Text = "Descuentos";
            this.label15.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label15.Visible = false;
            // 
            // pageBreak1
            // 
            this.pageBreak1.LocationFloat = new DevExpress.Utils.PointFloat(0F, 0F);
            this.pageBreak1.Name = "pageBreak1";
            // 
            // line2
            // 
            this.line2.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 687.7485F);
            this.line2.Name = "line2";
            this.line2.SizeF = new System.Drawing.SizeF(1049F, 2F);
            // 
            // label14
            // 
            this.label14.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.ImporteTotalMC")});
            this.label14.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label14.LocationFloat = new DevExpress.Utils.PointFloat(761F, 689.7485F);
            this.label14.Name = "label14";
            this.label14.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label14.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label14.StylePriority.UseFont = false;
            this.label14.StylePriority.UseTextAlignment = false;
            summary11.FormatString = "{0:$#,#.00}";
            summary11.Running = DevExpress.XtraReports.UI.SummaryRunning.Report;
            this.label14.Summary = summary11;
            this.label14.Text = "label14";
            this.label14.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label9
            // 
            this.label9.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.ImporteTotal")});
            this.label9.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label9.LocationFloat = new DevExpress.Utils.PointFloat(641.0001F, 689.7485F);
            this.label9.Name = "label9";
            this.label9.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label9.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label9.StylePriority.UseFont = false;
            this.label9.StylePriority.UseTextAlignment = false;
            summary12.FormatString = "{0:$#,#.00}";
            summary12.Running = DevExpress.XtraReports.UI.SummaryRunning.Report;
            this.label9.Summary = summary12;
            this.label9.Text = "label9";
            this.label9.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            this.label9.Visible = false;
            // 
            // label12
            // 
            this.label12.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label12.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 689.7484F);
            this.label12.Name = "label12";
            this.label12.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label12.SizeF = new System.Drawing.SizeF(85.99981F, 18F);
            this.label12.StylePriority.UseFont = false;
            this.label12.StylePriority.UseTextAlignment = false;
            this.label12.Text = "Gran Total en ";
            this.label12.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label13
            // 
            this.label13.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Moneda")});
            this.label13.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label13.LocationFloat = new DevExpress.Utils.PointFloat(86.99985F, 689.7484F);
            this.label13.Name = "label13";
            this.label13.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label13.SizeF = new System.Drawing.SizeF(194.0002F, 18F);
            this.label13.StyleName = "DataField";
            this.label13.StylePriority.UseFont = false;
            this.label13.StylePriority.UseTextAlignment = false;
            this.label13.Text = "label10";
            this.label13.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // line7
            // 
            this.line7.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 665.6652F);
            this.line7.Name = "line7";
            this.line7.SizeF = new System.Drawing.SizeF(1049F, 2.083333F);
            // 
            // line1
            // 
            this.line1.LocationFloat = new DevExpress.Utils.PointFloat(1.000039F, 685.7485F);
            this.line1.Name = "line1";
            this.line1.SizeF = new System.Drawing.SizeF(1049F, 2F);
            // 
            // pageInfo4
            // 
            this.pageInfo4.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo4.Format = "Página {0} de {1}";
            this.pageInfo4.LocationFloat = new DevExpress.Utils.PointFloat(668.6545F, 0F);
            this.pageInfo4.Name = "pageInfo4";
            this.pageInfo4.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo4.SizeF = new System.Drawing.SizeF(381.3455F, 18F);
            this.pageInfo4.StyleName = "PageInfo";
            this.pageInfo4.StylePriority.UseFont = false;
            this.pageInfo4.StylePriority.UseTextAlignment = false;
            this.pageInfo4.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // pageInfo2
            // 
            this.pageInfo2.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo2.LocationFloat = new DevExpress.Utils.PointFloat(0F, 0F);
            this.pageInfo2.Name = "pageInfo2";
            this.pageInfo2.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo2.PageInfo = DevExpress.XtraPrinting.PageInfo.DateTime;
            this.pageInfo2.SizeF = new System.Drawing.SizeF(313F, 18F);
            this.pageInfo2.StyleName = "PageInfo";
            this.pageInfo2.StylePriority.UseFont = false;
            this.pageInfo2.StylePriority.UseTextAlignment = false;
            this.pageInfo2.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // line9
            // 
            this.line9.LocationFloat = new DevExpress.Utils.PointFloat(0F, 0F);
            this.line9.Name = "line9";
            this.line9.SizeF = new System.Drawing.SizeF(1049F, 2.083333F);
            // 
            // line5
            // 
            this.line5.LocationFloat = new DevExpress.Utils.PointFloat(0F, 20.08333F);
            this.line5.Name = "line5";
            this.line5.SizeF = new System.Drawing.SizeF(1049F, 2.083333F);
            // 
            // label37
            // 
            this.label37.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label37.LocationFloat = new DevExpress.Utils.PointFloat(659.125F, 2.083333F);
            this.label37.Name = "label37";
            this.label37.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label37.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label37.StylePriority.UseFont = false;
            this.label37.StylePriority.UseTextAlignment = false;
            this.label37.Text = "Importe Total";
            this.label37.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label36
            // 
            this.label36.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label36.LocationFloat = new DevExpress.Utils.PointFloat(539.1251F, 2.083333F);
            this.label36.Name = "label36";
            this.label36.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label36.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label36.StylePriority.UseFont = false;
            this.label36.StylePriority.UseTextAlignment = false;
            this.label36.Text = "Impuestos";
            this.label36.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label33
            // 
            this.label33.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label33.LocationFloat = new DevExpress.Utils.PointFloat(149.125F, 2.083333F);
            this.label33.Name = "label33";
            this.label33.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label33.SizeF = new System.Drawing.SizeF(150F, 18F);
            this.label33.StylePriority.UseFont = false;
            this.label33.StylePriority.UseTextAlignment = false;
            this.label33.Text = "Categoría del Proveedor";
            this.label33.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label31
            // 
            this.label31.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label31.LocationFloat = new DevExpress.Utils.PointFloat(299.125F, 2.083333F);
            this.label31.Multiline = true;
            this.label31.Name = "label31";
            this.label31.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label31.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label31.StylePriority.UseFont = false;
            this.label31.StylePriority.UseTextAlignment = false;
            this.label31.Text = "Sub Total\r\n";
            this.label31.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label46
            // 
            this.label46.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label46.LocationFloat = new DevExpress.Utils.PointFloat(779.1249F, 2.083333F);
            this.label46.Name = "label46";
            this.label46.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label46.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label46.StylePriority.UseFont = false;
            this.label46.StylePriority.UseTextAlignment = false;
            this.label46.Text = "Importe Total MC";
            this.label46.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label35
            // 
            this.label35.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label35.LocationFloat = new DevExpress.Utils.PointFloat(419.1252F, 2.083333F);
            this.label35.Name = "label35";
            this.label35.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label35.SizeF = new System.Drawing.SizeF(120F, 18F);
            this.label35.StylePriority.UseFont = false;
            this.label35.StylePriority.UseTextAlignment = false;
            this.label35.Text = "Descuentos";
            this.label35.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // TableTableAdapter
            // 
            this.TableTableAdapter.SelectCommand = this.oleDbCommand1;
            this.TableTableAdapter.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
                        new System.Data.Common.DataTableMapping("Table", "Table", new System.Data.Common.DataColumnMapping[0])});
            // 
            // oleDbCommand1
            // 
            this.oleDbCommand1.CommandText = "SPINFORMECOMPRAPROVCAT 1";
            this.oleDbCommand1.CommandTimeout = 0;
            this.oleDbCommand1.Connection = this.oleDbConnection1;
            // 
            // oleDbConnection1
            // 
            this.oleDbConnection1.ConnectionString = "Provider=SQLOLEDB;Data Source=.;Initial Catalog=INFORMES11;User ID=SA;";
            // 
            // Title
            // 
            this.Title.BackColor = System.Drawing.Color.White;
            this.Title.BorderColor = System.Drawing.SystemColors.ControlText;
            this.Title.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.Title.BorderWidth = 1;
            this.Title.Font = new System.Drawing.Font("Times New Roman", 20F, System.Drawing.FontStyle.Bold);
            this.Title.ForeColor = System.Drawing.Color.Maroon;
            this.Title.Name = "Title";
            // 
            // FieldCaption
            // 
            this.FieldCaption.BackColor = System.Drawing.Color.White;
            this.FieldCaption.BorderColor = System.Drawing.SystemColors.ControlText;
            this.FieldCaption.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.FieldCaption.BorderWidth = 1;
            this.FieldCaption.Font = new System.Drawing.Font("Arial", 10F, System.Drawing.FontStyle.Bold);
            this.FieldCaption.ForeColor = System.Drawing.Color.Maroon;
            this.FieldCaption.Name = "FieldCaption";
            // 
            // PageInfo
            // 
            this.PageInfo.BackColor = System.Drawing.Color.White;
            this.PageInfo.BorderColor = System.Drawing.SystemColors.ControlText;
            this.PageInfo.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.PageInfo.BorderWidth = 1;
            this.PageInfo.Font = new System.Drawing.Font("Times New Roman", 10F, System.Drawing.FontStyle.Bold);
            this.PageInfo.ForeColor = System.Drawing.SystemColors.ControlText;
            this.PageInfo.Name = "PageInfo";
            // 
            // DataField
            // 
            this.DataField.BackColor = System.Drawing.Color.White;
            this.DataField.BorderColor = System.Drawing.SystemColors.ControlText;
            this.DataField.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.DataField.BorderWidth = 1;
            this.DataField.Font = new System.Drawing.Font("Times New Roman", 10F);
            this.DataField.ForeColor = System.Drawing.SystemColors.ControlText;
            this.DataField.Name = "DataField";
            this.DataField.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            // 
            // InformeCompraProvCat
            // 
            this.Bands.AddRange(new DevExpress.XtraReports.UI.Band[] {
                        this.Detail,
                        this.topMarginBand1,
                        this.bottomMarginBand1,
                        this.GroupHeader1,
                        this.GroupFooter1,
                        this.ReportHeader,
                        this.ReportFooter,
                        this.PageFooter,
                        this.GroupHeader3});
            this.DataAdapter = this.TableTableAdapter;
            this.DataMember = "Table";
            this.DataSource = this.VentaCteCat;
            this.DisplayName = "InformeCompraProvCat";
            this.Landscape = true;
            this.Margins = new System.Drawing.Printing.Margins(18, 31, 18, 54);
            this.Name = "InformeCompraProvCat";
            this.PageHeight = 850;
            this.PageWidth = 1100;
            this.ScriptLanguage = DevExpress.XtraReports.ScriptLanguage.VisualBasic;
            this.ScriptsSource = resources.GetString("$this.ScriptsSource");
            this.StyleSheet.AddRange(new DevExpress.XtraReports.UI.XRControlStyle[] {
                        this.Title,
                        this.FieldCaption,
                        this.PageInfo,
                        this.DataField});
            this.Tag = "EXEC spInformeCompraProvCat [EstacionTrabajo]";
            this.Version = "10.2";
            ((System.ComponentModel.ISupportInitialize)(xYDiagram1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(pointSeriesLabel1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(lineSeriesView1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chart3)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.VentaCteCat)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(xYDiagram2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(pointSeriesLabel2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(lineSeriesView2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this)).EndInit();
        }
    }
}
namespace XtraReportSerialization {
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("VentaCteCatDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class VentaCteCatDataSet : global::System.Data.DataSet {
        private _TableDataTable table_Table;
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VentaCteCatDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected VentaCteCatDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new _TableDataTable(ds.Tables["Table"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _TableDataTable _Table {
            get {
                return this.table_Table;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            VentaCteCatDataSet cln = ((VentaCteCatDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new _TableDataTable(ds.Tables["Table"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table_Table = ((_TableDataTable)(base.Tables["Table"]));
            if ((initTable == true)) {
                if ((this.table_Table != null)) {
                    this.table_Table.InitVars();
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "VentaCteCatDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table_Table = new _TableDataTable();
            base.Tables.Add(this.table_Table);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_Table() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            VentaCteCatDataSet ds = new VentaCteCatDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        public delegate void _TableRowChangeEventHandler(object sender, _TableRowChangeEvent e);
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _TableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            private global::System.Data.DataColumn columnEstacion;
            private global::System.Data.DataColumn columnIDInforme;
            private global::System.Data.DataColumn columnEmpresa;
            private global::System.Data.DataColumn columnMoneda;
            private global::System.Data.DataColumn columnMoneda2;
            private global::System.Data.DataColumn columnCategoria;
            private global::System.Data.DataColumn columnImporte;
            private global::System.Data.DataColumn columnDescuentosTotales;
            private global::System.Data.DataColumn columnSubTotal;
            private global::System.Data.DataColumn columnImpuestos;
            private global::System.Data.DataColumn columnImporteTotal;
            private global::System.Data.DataColumn columnImporteTotalMC;
            private global::System.Data.DataColumn columnSaldoDescripcion;
            private global::System.Data.DataColumn columnSaldoImporte;
            private global::System.Data.DataColumn columnSaldoDescripcionMC;
            private global::System.Data.DataColumn columnSaldoImporteMC;
            private global::System.Data.DataColumn columnGrafica1;
            private global::System.Data.DataColumn columnGrafica2;
            private global::System.Data.DataColumn columnReporte;
            private global::System.Data.DataColumn columnTotal;
            private global::System.Data.DataColumn columnContMoneda;
            private global::System.Data.DataColumn columnFechaGrafica;
            private global::System.Data.DataColumn columnFechaDesde;
            private global::System.Data.DataColumn columnFechaHasta;
            private global::System.Data.DataColumn columnTitulo;
            private global::System.Data.DataColumn columnEmpresaNombre;
            private global::System.Data.DataColumn columnPeriodo;
            private global::System.Data.DataColumn columnEjercicio;
            private global::System.Data.DataColumn columnEtiqueta;
            private global::System.Data.DataColumn columnVerGraficaDetalle;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableDataTable() {
                this.TableName = "Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _TableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _TableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstacionColumn {
                get {
                    return this.columnEstacion;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDInformeColumn {
                get {
                    return this.columnIDInforme;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpresaColumn {
                get {
                    return this.columnEmpresa;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonedaColumn {
                get {
                    return this.columnMoneda;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Moneda2Column {
                get {
                    return this.columnMoneda2;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoriaColumn {
                get {
                    return this.columnCategoria;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImporteColumn {
                get {
                    return this.columnImporte;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescuentosTotalesColumn {
                get {
                    return this.columnDescuentosTotales;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpuestosColumn {
                get {
                    return this.columnImpuestos;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImporteTotalColumn {
                get {
                    return this.columnImporteTotal;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImporteTotalMCColumn {
                get {
                    return this.columnImporteTotalMC;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaldoDescripcionColumn {
                get {
                    return this.columnSaldoDescripcion;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaldoImporteColumn {
                get {
                    return this.columnSaldoImporte;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaldoDescripcionMCColumn {
                get {
                    return this.columnSaldoDescripcionMC;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SaldoImporteMCColumn {
                get {
                    return this.columnSaldoImporteMC;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Grafica1Column {
                get {
                    return this.columnGrafica1;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Grafica2Column {
                get {
                    return this.columnGrafica2;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReporteColumn {
                get {
                    return this.columnReporte;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContMonedaColumn {
                get {
                    return this.columnContMoneda;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaGraficaColumn {
                get {
                    return this.columnFechaGrafica;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaDesdeColumn {
                get {
                    return this.columnFechaDesde;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FechaHastaColumn {
                get {
                    return this.columnFechaHasta;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TituloColumn {
                get {
                    return this.columnTitulo;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpresaNombreColumn {
                get {
                    return this.columnEmpresaNombre;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodoColumn {
                get {
                    return this.columnPeriodo;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EjercicioColumn {
                get {
                    return this.columnEjercicio;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EtiquetaColumn {
                get {
                    return this.columnEtiqueta;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VerGraficaDetalleColumn {
                get {
                    return this.columnVerGraficaDetalle;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow this[int index] {
                get {
                    return ((_TableRow)(this.Rows[index]));
                }
            }
            public event _TableRowChangeEventHandler _TableRowChanging;
            public event _TableRowChangeEventHandler _TableRowChanged;
            public event _TableRowChangeEventHandler _TableRowDeleting;
            public event _TableRowChangeEventHandler _TableRowDeleted;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_TableRow(_TableRow row) {
                this.Rows.Add(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow Add_TableRow(
                        int Estacion, 
                        int IDInforme, 
                        string Empresa, 
                        string Moneda, 
                        string Moneda2, 
                        string Categoria, 
                        decimal Importe, 
                        decimal DescuentosTotales, 
                        decimal SubTotal, 
                        decimal Impuestos, 
                        decimal ImporteTotal, 
                        decimal ImporteTotalMC, 
                        string SaldoDescripcion, 
                        decimal SaldoImporte, 
                        string SaldoDescripcionMC, 
                        decimal SaldoImporteMC, 
                        bool Grafica1, 
                        bool Grafica2, 
                        string Reporte, 
                        bool Total, 
                        string ContMoneda, 
                        string FechaGrafica, 
                        System.DateTime FechaDesde, 
                        System.DateTime FechaHasta, 
                        string Titulo, 
                        string EmpresaNombre, 
                        int Periodo, 
                        int Ejercicio, 
                        bool Etiqueta, 
                        bool VerGraficaDetalle) {
                _TableRow row_TableRow = ((_TableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Estacion,
                        IDInforme,
                        Empresa,
                        Moneda,
                        Moneda2,
                        Categoria,
                        Importe,
                        DescuentosTotales,
                        SubTotal,
                        Impuestos,
                        ImporteTotal,
                        ImporteTotalMC,
                        SaldoDescripcion,
                        SaldoImporte,
                        SaldoDescripcionMC,
                        SaldoImporteMC,
                        Grafica1,
                        Grafica2,
                        Reporte,
                        Total,
                        ContMoneda,
                        FechaGrafica,
                        FechaDesde,
                        FechaHasta,
                        Titulo,
                        EmpresaNombre,
                        Periodo,
                        Ejercicio,
                        Etiqueta,
                        VerGraficaDetalle};
                row_TableRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_TableRow);
                return row_TableRow;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _TableDataTable cln = ((_TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _TableDataTable();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEstacion = base.Columns["Estacion"];
                this.columnIDInforme = base.Columns["IDInforme"];
                this.columnEmpresa = base.Columns["Empresa"];
                this.columnMoneda = base.Columns["Moneda"];
                this.columnMoneda2 = base.Columns["Moneda2"];
                this.columnCategoria = base.Columns["Categoria"];
                this.columnImporte = base.Columns["Importe"];
                this.columnDescuentosTotales = base.Columns["DescuentosTotales"];
                this.columnSubTotal = base.Columns["SubTotal"];
                this.columnImpuestos = base.Columns["Impuestos"];
                this.columnImporteTotal = base.Columns["ImporteTotal"];
                this.columnImporteTotalMC = base.Columns["ImporteTotalMC"];
                this.columnSaldoDescripcion = base.Columns["SaldoDescripcion"];
                this.columnSaldoImporte = base.Columns["SaldoImporte"];
                this.columnSaldoDescripcionMC = base.Columns["SaldoDescripcionMC"];
                this.columnSaldoImporteMC = base.Columns["SaldoImporteMC"];
                this.columnGrafica1 = base.Columns["Grafica1"];
                this.columnGrafica2 = base.Columns["Grafica2"];
                this.columnReporte = base.Columns["Reporte"];
                this.columnTotal = base.Columns["Total"];
                this.columnContMoneda = base.Columns["ContMoneda"];
                this.columnFechaGrafica = base.Columns["FechaGrafica"];
                this.columnFechaDesde = base.Columns["FechaDesde"];
                this.columnFechaHasta = base.Columns["FechaHasta"];
                this.columnTitulo = base.Columns["Titulo"];
                this.columnEmpresaNombre = base.Columns["EmpresaNombre"];
                this.columnPeriodo = base.Columns["Periodo"];
                this.columnEjercicio = base.Columns["Ejercicio"];
                this.columnEtiqueta = base.Columns["Etiqueta"];
                this.columnVerGraficaDetalle = base.Columns["VerGraficaDetalle"];
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEstacion = new global::System.Data.DataColumn("Estacion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstacion);
                this.columnIDInforme = new global::System.Data.DataColumn("IDInforme", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDInforme);
                this.columnEmpresa = new global::System.Data.DataColumn("Empresa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpresa);
                this.columnMoneda = new global::System.Data.DataColumn("Moneda", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoneda);
                this.columnMoneda2 = new global::System.Data.DataColumn("Moneda2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoneda2);
                this.columnCategoria = new global::System.Data.DataColumn("Categoria", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoria);
                this.columnImporte = new global::System.Data.DataColumn("Importe", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImporte);
                this.columnDescuentosTotales = new global::System.Data.DataColumn("DescuentosTotales", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescuentosTotales);
                this.columnSubTotal = new global::System.Data.DataColumn("SubTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubTotal);
                this.columnImpuestos = new global::System.Data.DataColumn("Impuestos", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpuestos);
                this.columnImporteTotal = new global::System.Data.DataColumn("ImporteTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImporteTotal);
                this.columnImporteTotalMC = new global::System.Data.DataColumn("ImporteTotalMC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImporteTotalMC);
                this.columnSaldoDescripcion = new global::System.Data.DataColumn("SaldoDescripcion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaldoDescripcion);
                this.columnSaldoImporte = new global::System.Data.DataColumn("SaldoImporte", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaldoImporte);
                this.columnSaldoDescripcionMC = new global::System.Data.DataColumn("SaldoDescripcionMC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaldoDescripcionMC);
                this.columnSaldoImporteMC = new global::System.Data.DataColumn("SaldoImporteMC", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSaldoImporteMC);
                this.columnGrafica1 = new global::System.Data.DataColumn("Grafica1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrafica1);
                this.columnGrafica2 = new global::System.Data.DataColumn("Grafica2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrafica2);
                this.columnReporte = new global::System.Data.DataColumn("Reporte", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReporte);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnContMoneda = new global::System.Data.DataColumn("ContMoneda", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContMoneda);
                this.columnFechaGrafica = new global::System.Data.DataColumn("FechaGrafica", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFechaGrafica);
                this.columnFechaDesde = new global::System.Data.DataColumn("FechaDesde", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFechaDesde);
                this.columnFechaHasta = new global::System.Data.DataColumn("FechaHasta", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFechaHasta);
                this.columnTitulo = new global::System.Data.DataColumn("Titulo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitulo);
                this.columnEmpresaNombre = new global::System.Data.DataColumn("EmpresaNombre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpresaNombre);
                this.columnPeriodo = new global::System.Data.DataColumn("Periodo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodo);
                this.columnEjercicio = new global::System.Data.DataColumn("Ejercicio", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEjercicio);
                this.columnEtiqueta = new global::System.Data.DataColumn("Etiqueta", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEtiqueta);
                this.columnVerGraficaDetalle = new global::System.Data.DataColumn("VerGraficaDetalle", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerGraficaDetalle);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow New_TableRow() {
                return ((_TableRow)(this.NewRow()));
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _TableRow(builder);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_TableRow);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._TableRowChanged != null)) {
                    this._TableRowChanged(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._TableRowChanging != null)) {
                    this._TableRowChanging(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._TableRowDeleted != null)) {
                    this._TableRowDeleted(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._TableRowDeleting != null)) {
                    this._TableRowDeleting(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_TableRow(_TableRow row) {
                this.Rows.Remove(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                VentaCteCatDataSet ds = new VentaCteCatDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _TableRow : global::System.Data.DataRow {
            private _TableDataTable table_Table;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _TableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_Table = ((_TableDataTable)(this.Table));
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Estacion {
                get {
                    try {
                        return ((int)(this[this.table_Table.EstacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Estacion\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EstacionColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDInforme {
                get {
                    try {
                        return ((int)(this[this.table_Table.IDInformeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'IDInforme\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.IDInformeColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Empresa {
                get {
                    try {
                        return ((string)(this[this.table_Table.EmpresaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Empresa\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EmpresaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Moneda {
                get {
                    try {
                        return ((string)(this[this.table_Table.MonedaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Moneda\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.MonedaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Moneda2 {
                get {
                    try {
                        return ((string)(this[this.table_Table.Moneda2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Moneda2\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.Moneda2Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Categoria {
                get {
                    try {
                        return ((string)(this[this.table_Table.CategoriaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Categoria\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.CategoriaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Importe {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.ImporteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Importe\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ImporteColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DescuentosTotales {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.DescuentosTotalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'DescuentosTotales\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.DescuentosTotalesColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SubTotal {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.SubTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SubTotal\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.SubTotalColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Impuestos {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.ImpuestosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Impuestos\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ImpuestosColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImporteTotal {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.ImporteTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ImporteTotal\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ImporteTotalColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ImporteTotalMC {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.ImporteTotalMCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ImporteTotalMC\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ImporteTotalMCColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaldoDescripcion {
                get {
                    try {
                        return ((string)(this[this.table_Table.SaldoDescripcionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SaldoDescripcion\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.SaldoDescripcionColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SaldoImporte {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.SaldoImporteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SaldoImporte\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.SaldoImporteColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaldoDescripcionMC {
                get {
                    try {
                        return ((string)(this[this.table_Table.SaldoDescripcionMCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SaldoDescripcionMC\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.SaldoDescripcionMCColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SaldoImporteMC {
                get {
                    try {
                        return ((decimal)(this[this.table_Table.SaldoImporteMCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'SaldoImporteMC\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.SaldoImporteMCColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Grafica1 {
                get {
                    try {
                        return ((bool)(this[this.table_Table.Grafica1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Grafica1\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.Grafica1Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Grafica2 {
                get {
                    try {
                        return ((bool)(this[this.table_Table.Grafica2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Grafica2\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.Grafica2Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reporte {
                get {
                    try {
                        return ((string)(this[this.table_Table.ReporteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Reporte\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ReporteColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Total {
                get {
                    try {
                        return ((bool)(this[this.table_Table.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Total\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.TotalColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContMoneda {
                get {
                    try {
                        return ((string)(this[this.table_Table.ContMonedaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'ContMoneda\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ContMonedaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FechaGrafica {
                get {
                    try {
                        return ((string)(this[this.table_Table.FechaGraficaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FechaGrafica\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.FechaGraficaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FechaDesde {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table_Table.FechaDesdeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FechaDesde\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.FechaDesdeColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FechaHasta {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.table_Table.FechaHastaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FechaHasta\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.FechaHastaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Titulo {
                get {
                    try {
                        return ((string)(this[this.table_Table.TituloColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Titulo\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.TituloColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpresaNombre {
                get {
                    try {
                        return ((string)(this[this.table_Table.EmpresaNombreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'EmpresaNombre\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EmpresaNombreColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Periodo {
                get {
                    try {
                        return ((int)(this[this.table_Table.PeriodoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Periodo\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.PeriodoColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Ejercicio {
                get {
                    try {
                        return ((int)(this[this.table_Table.EjercicioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Ejercicio\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EjercicioColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Etiqueta {
                get {
                    try {
                        return ((bool)(this[this.table_Table.EtiquetaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Etiqueta\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EtiquetaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool VerGraficaDetalle {
                get {
                    try {
                        return ((bool)(this[this.table_Table.VerGraficaDetalleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'VerGraficaDetalle\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.VerGraficaDetalleColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstacionNull() {
                return this.IsNull(this.table_Table.EstacionColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstacionNull() {
                this[this.table_Table.EstacionColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDInformeNull() {
                return this.IsNull(this.table_Table.IDInformeColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDInformeNull() {
                this[this.table_Table.IDInformeColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpresaNull() {
                return this.IsNull(this.table_Table.EmpresaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpresaNull() {
                this[this.table_Table.EmpresaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonedaNull() {
                return this.IsNull(this.table_Table.MonedaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonedaNull() {
                this[this.table_Table.MonedaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMoneda2Null() {
                return this.IsNull(this.table_Table.Moneda2Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMoneda2Null() {
                this[this.table_Table.Moneda2Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoriaNull() {
                return this.IsNull(this.table_Table.CategoriaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoriaNull() {
                this[this.table_Table.CategoriaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImporteNull() {
                return this.IsNull(this.table_Table.ImporteColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImporteNull() {
                this[this.table_Table.ImporteColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescuentosTotalesNull() {
                return this.IsNull(this.table_Table.DescuentosTotalesColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescuentosTotalesNull() {
                this[this.table_Table.DescuentosTotalesColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubTotalNull() {
                return this.IsNull(this.table_Table.SubTotalColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubTotalNull() {
                this[this.table_Table.SubTotalColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpuestosNull() {
                return this.IsNull(this.table_Table.ImpuestosColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpuestosNull() {
                this[this.table_Table.ImpuestosColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImporteTotalNull() {
                return this.IsNull(this.table_Table.ImporteTotalColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImporteTotalNull() {
                this[this.table_Table.ImporteTotalColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImporteTotalMCNull() {
                return this.IsNull(this.table_Table.ImporteTotalMCColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImporteTotalMCNull() {
                this[this.table_Table.ImporteTotalMCColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaldoDescripcionNull() {
                return this.IsNull(this.table_Table.SaldoDescripcionColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaldoDescripcionNull() {
                this[this.table_Table.SaldoDescripcionColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaldoImporteNull() {
                return this.IsNull(this.table_Table.SaldoImporteColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaldoImporteNull() {
                this[this.table_Table.SaldoImporteColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaldoDescripcionMCNull() {
                return this.IsNull(this.table_Table.SaldoDescripcionMCColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaldoDescripcionMCNull() {
                this[this.table_Table.SaldoDescripcionMCColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaldoImporteMCNull() {
                return this.IsNull(this.table_Table.SaldoImporteMCColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaldoImporteMCNull() {
                this[this.table_Table.SaldoImporteMCColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrafica1Null() {
                return this.IsNull(this.table_Table.Grafica1Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrafica1Null() {
                this[this.table_Table.Grafica1Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrafica2Null() {
                return this.IsNull(this.table_Table.Grafica2Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrafica2Null() {
                this[this.table_Table.Grafica2Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReporteNull() {
                return this.IsNull(this.table_Table.ReporteColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReporteNull() {
                this[this.table_Table.ReporteColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.table_Table.TotalColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.table_Table.TotalColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContMonedaNull() {
                return this.IsNull(this.table_Table.ContMonedaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContMonedaNull() {
                this[this.table_Table.ContMonedaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFechaGraficaNull() {
                return this.IsNull(this.table_Table.FechaGraficaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFechaGraficaNull() {
                this[this.table_Table.FechaGraficaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFechaDesdeNull() {
                return this.IsNull(this.table_Table.FechaDesdeColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFechaDesdeNull() {
                this[this.table_Table.FechaDesdeColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFechaHastaNull() {
                return this.IsNull(this.table_Table.FechaHastaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFechaHastaNull() {
                this[this.table_Table.FechaHastaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTituloNull() {
                return this.IsNull(this.table_Table.TituloColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTituloNull() {
                this[this.table_Table.TituloColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpresaNombreNull() {
                return this.IsNull(this.table_Table.EmpresaNombreColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpresaNombreNull() {
                this[this.table_Table.EmpresaNombreColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodoNull() {
                return this.IsNull(this.table_Table.PeriodoColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodoNull() {
                this[this.table_Table.PeriodoColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEjercicioNull() {
                return this.IsNull(this.table_Table.EjercicioColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEjercicioNull() {
                this[this.table_Table.EjercicioColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEtiquetaNull() {
                return this.IsNull(this.table_Table.EtiquetaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEtiquetaNull() {
                this[this.table_Table.EtiquetaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerGraficaDetalleNull() {
                return this.IsNull(this.table_Table.VerGraficaDetalleColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerGraficaDetalleNull() {
                this[this.table_Table.VerGraficaDetalleColumn] = global::System.Convert.DBNull;
            }
        }
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _TableRowChangeEvent : global::System.EventArgs {
            private _TableRow eventRow;
            private global::System.Data.DataRowAction eventAction;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRowChangeEvent(_TableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
