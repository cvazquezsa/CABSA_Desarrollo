/// <XRTypeInfo>
///   <AssemblyFullName>DevExpress.XtraReports.v10.2, Version=10.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a</AssemblyFullName>
///   <AssemblyLocation>C:\Windows\assembly\GAC_MSIL\DevExpress.XtraReports.v10.2\10.2.5.0__b88d1754d700e49a\DevExpress.XtraReports.v10.2.dll</AssemblyLocation>
///   <TypeName>DevExpress.XtraReports.UI.XtraReport</TypeName>
///   <Localization>es-ES</Localization>
///   <References>
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Data.SqlXml\2.0.0.0__b77a5c561934e089\System.Data.SqlXml.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Security\2.0.0.0__b03f5f7f11d50a3a\System.Security.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\Microsoft.VisualC\8.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualC.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.DirectoryServices\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Runtime.Remoting\2.0.0.0__b77a5c561934e089\System.Runtime.Remoting.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Design\2.0.0.0__b03f5f7f11d50a3a\System.Design.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Windows.Forms\2.0.0.0__b77a5c561934e089\System.Windows.Forms.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\Accessibility\2.0.0.0__b03f5f7f11d50a3a\Accessibility.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization.Formatters.Soap\2.0.0.0__b03f5f7f11d50a3a\System.Runtime.Serialization.Formatters.Soap.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Deployment\2.0.0.0__b03f5f7f11d50a3a\System.Deployment.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Drawing.Design\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.Design.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_32\System.Data.OracleClient\2.0.0.0__b77a5c561934e089\System.Data.OracleClient.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Web.RegularExpressions\2.0.0.0__b03f5f7f11d50a3a\System.Web.RegularExpressions.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.DirectoryServices.Protocols\2.0.0.0__b03f5f7f11d50a3a\System.DirectoryServices.Protocols.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.ServiceProcess\2.0.0.0__b03f5f7f11d50a3a\System.ServiceProcess.dll" />
///     <Reference Path="C:\Windows\assembly\GAC_MSIL\System.Configuration.Install\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.Install.dll" />
///   </References>
/// </XRTypeInfo>
namespace XtraReportSerialization {
    
    public class InformeContBalanza : DevExpress.XtraReports.UI.XtraReport {
        private DevExpress.XtraReports.UI.DetailBand Detail;
        private DevExpress.XtraReports.UI.XRLabel label25;
        private DevExpress.XtraReports.UI.XRLabel label24;
        private DevExpress.XtraReports.UI.XRLabel label19;
        private DevExpress.XtraReports.UI.XRLabel label18;
        private DevExpress.XtraReports.UI.XRLabel label4;
        private DevExpress.XtraReports.UI.XRLabel label1;
        private DevExpress.XtraReports.UI.PageFooterBand pageFooterBand1;
        private DevExpress.XtraReports.UI.XRLine line7;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo2;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo1;
        private DevExpress.XtraReports.UI.ReportHeaderBand reportHeaderBand1;
        private DevExpress.XtraReports.UI.XRLabel label32;
        private DevExpress.XtraReports.UI.XRLabel label30;
        private DevExpress.XtraReports.UI.XRLabel label31;
        private DevExpress.XtraReports.UI.XRLabel label29;
        private DevExpress.XtraReports.UI.XRLabel label44;
        private DevExpress.XtraReports.UI.XRLabel label41;
        private DevExpress.XtraReports.UI.XRLine line6;
        private DevExpress.XtraReports.UI.XRPageInfo pageInfo3;
        private DevExpress.XtraReports.UI.XRLabel label198;
        private DevExpress.XtraReports.UI.XRPictureBox pictureBox2;
        private DevExpress.XtraReports.UI.TopMarginBand topMarginBand1;
        private DevExpress.XtraReports.UI.BottomMarginBand bottomMarginBand1;
        private DevExpress.XtraReports.UI.GroupFooterBand GroupFooter1;
        private DevExpress.XtraReports.UI.XRChart chart1;
        private XtraReportSerialization.RepVentaNetaDataSet RepVentaNeta;
        private DevExpress.XtraReports.UI.XRLine line8;
        private DevExpress.XtraReports.UI.XRLabel label9;
        private DevExpress.XtraReports.UI.XRLabel label7;
        private DevExpress.XtraReports.UI.XRLabel label26;
        private DevExpress.XtraReports.UI.XRLabel label12;
        private DevExpress.XtraReports.UI.XRLabel label10;
        private DevExpress.XtraReports.UI.GroupHeaderBand GroupHeader2;
        private DevExpress.XtraReports.UI.XRLine line5;
        private DevExpress.XtraReports.UI.XRLine line3;
        private DevExpress.XtraReports.UI.XRLabel label16;
        private DevExpress.XtraReports.UI.XRLabel label17;
        private DevExpress.XtraReports.UI.XRLabel label11;
        private DevExpress.XtraReports.UI.XRLabel label13;
        private DevExpress.XtraReports.UI.XRLabel label20;
        private DevExpress.XtraReports.UI.XRLabel label14;
        private System.Data.OleDb.OleDbDataAdapter TableTableAdapter;
        private System.Data.OleDb.OleDbCommand oleDbCommand1;
        private System.Data.OleDb.OleDbConnection oleDbConnection1;
        private DevExpress.XtraReports.UI.XRControlStyle Title;
        private DevExpress.XtraReports.UI.XRControlStyle FieldCaption;
        private DevExpress.XtraReports.UI.XRControlStyle PageInfo;
        private DevExpress.XtraReports.UI.XRControlStyle DataField;
        private DevExpress.XtraReports.UI.CalculatedField Movimiento;
        private DevExpress.XtraReports.UI.CalculatedField Utilidad;
        private System.Resources.ResourceManager _resources;
        public InformeContBalanza() {
            this.InitializeComponent();
        }
        private System.Resources.ResourceManager resources {
            get {
                if (_resources == null) {
                    string resourceString = "zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJza" +
                        "W9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4O" +
                        "SNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAADAAAAAQAAAGhTeXN0ZW0uRHJhd" +
                        "2luZy5CaXRtYXAsIFN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhb" +
                        "CwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYVBBRFBBREhecsFn1G8V51kdNwAAAAArAAAAY" +
                        "gAAAL0BAAAmJAB0AGgAaQBzAC4AUwBjAHIAaQBwAHQAcwBTAG8AdQByAGMAZQAAAAAAMm8AbABlAEQAY" +
                        "gBDAG8AbQBtAGEAbgBkADEALgBDAG8AbQBtAGEAbgBkAFQAZQB4AHQAfwwAACJwAGkAYwB0AHUAcgBlA" +
                        "EIAbwB4ADIALgBJAG0AYQBnAGUAsQ4AAAH8GA0KUHJpdmF0ZSBTdWIgR3JhblRvdGFsX0JlZm9yZVBya" +
                        "W50KEJ5VmFsIHNlbmRlciBBcyBPYmplY3QsIEJ5VmFsIGUgQXMgU3lzdGVtLkRyYXdpbmcuUHJpbnRpb" +
                        "mcuUHJpbnRFdmVudEFyZ3MpDQoNCiAgSUYgR2V0Q3VycmVudENvbHVtblZhbHVlKCJUb3RhbCIpID0gR" +
                        "mFsc2UgVEhFTiAgICAgDQogICAgIGUuQ2FuY2VsID0gVHJ1ZQ0KICBFTFNFDQogICAgIGUuQ2FuY2VsI" +
                        "D0gRmFsc2UNCiAgRU5EIElGIA0KDQpFbmQgU3ViDQoNClByaXZhdGUgU3ViIERldGFpbF9CZWZvcmVQc" +
                        "mludChCeVZhbCBzZW5kZXIgQXMgT2JqZWN0LCBCeVZhbCBlIEFzIFN5c3RlbS5EcmF3aW5nLlByaW50a" +
                        "W5nLlByaW50RXZlbnRBcmdzKQ0KDQogIElGIEdldEN1cnJlbnRDb2x1bW5WYWx1ZSgiR3JhZmljYSIpI" +
                        "D0gMCBBTkQgR2V0Q3VycmVudENvbHVtblZhbHVlKCJUb3RhbCIpID0gMCBUSEVOICAgICANCiAgICAgZ" +
                        "S5DYW5jZWwgPSBGYWxzZQ0KICBFTFNFDQogICAgIGUuQ2FuY2VsID0gVHJ1ZSAgICANCiAgRU5EIElGI" +
                        "A0KDQpFbmQgU3ViDQoNClByaXZhdGUgU3ViIEdyb3VwRm9vdGVyMV9CZWZvcmVQcmludChCeVZhbCBzZ" +
                        "W5kZXIgQXMgT2JqZWN0LCBCeVZhbCBlIEFzIFN5c3RlbS5EcmF3aW5nLlByaW50aW5nLlByaW50RXZlb" +
                        "nRBcmdzKQ0KDQogIElGIEdldEN1cnJlbnRDb2x1bW5WYWx1ZSgiVG90YWwiKSA9IEZhbHNlIFRIRU4gI" +
                        "CAgIA0KICAgICBlLkNhbmNlbCA9IEZhbHNlDQogIEVMU0UNCiAgICAgZS5DYW5jZWwgPSBUcnVlICAgI" +
                        "A0KICBFTkQgSUYgDQoNCkVuZCBTdWINCg0KDQpQcml2YXRlIFN1YiBjaGFydDJfQmVmb3JlUHJpbnQoQ" +
                        "nlWYWwgc2VuZGVyIEFzIE9iamVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5QcmludGluZy5Qc" +
                        "mludEV2ZW50QXJncykNCg0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIkN1ZW50YSIpIElTIE5PV" +
                        "EhJTkcgVEhFTg0KICAgICBlLkNhbmNlbCA9IFRydWUgICAgDQogICAgUkVUVVJODQogIEVORCBJRg0KD" +
                        "QogICdHZW5lcmEgdW4gb2JqZXRvIHF1ZSByZXByZXNlbnRhIGEgbGEgZ3LDoWZpY2ENCiAgRGltIEdyY" +
                        "WZpY2ExIEFzIFhSQ2hhcnQgPSBDVHlwZShzZW5kZXIsWFJDaGFydCkNCg0KICdTaSBlbCB2YWxvciBkZ" +
                        "WwgY2FtcG8gVmVyR3JhZmljYURldGFsbGUgZXMgMCBubyBzZSBtdWVzdHJhIA0KJyAgSUYgR2V0Q3Vyc" +
                        "mVudENvbHVtblZhbHVlKCJWZXJHcmFmaWNhRGV0YWxsZSIpID0gMCBUSEVODQonICAgIEdyYWZpY2ExL" +
                        "nZpc2libGUgPSBGYWxzZQ0KJyAgICBlLkNhbmNlbCA9IFRydWUgICAgDQonICAgIFJFVFVSTg0KJyAgR" +
                        "U5EIElGDQoNCiAgJ0d1YXJkYSBlbCB2YWxvciBkZSBsYSBjb2x1bW5hIENvbnRNb25lZGENCiAgRGltI" +
                        "ENvbnRNb25lZGEgQXMgU3RyaW5nID0gR2V0Q3VycmVudENvbHVtblZhbHVlKCJDdWVudGEiKS5Ub1N0c" +
                        "mluZw0KDQogICdHZW5lcmEgdW4gb2JqZXRvIHF1ZSByZXByZXNlbnRhIGEgbGEgcGxhbnRpbGxhIHNlI" +
                        "HNlcmllcyBhdXRvY3JlYWRhcw0KICBEaW0gUGxhbnRpbGxhIEFzIFNlcmllc0Jhc2UgPSBHcmFmaWNhM" +
                        "S5TZXJpZXNUZW1wbGF0ZQ0KDQogICdPY3VsdGEgbyBtdWVzdHJhIGxhcyBldGlxdWV0YXMgZGUgbGEgZ" +
                        "3JhZmljYQ0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIkV0aXF1ZXRhIikgPSBGYWxzZSBUSEVOD" +
                        "QogICAgIEdyYWZpY2ExLlNlcmllc1RlbXBsYXRlLkxhYmVsLlZpc2libGUgPSBGYWxzZQ0KICBFTFNFD" +
                        "QogICAgIEdyYWZpY2ExLlNlcmllc1RlbXBsYXRlLkxhYmVsLlZpc2libGUgPSBUcnVlDQogIEVORCBJR" +
                        "g0KDQpFbmQgU3ViDQoNClByaXZhdGUgU3ViIEdyb3VwSGVhZGVyMl9CZWZvcmVQcmludChCeVZhbCBzZ" +
                        "W5kZXIgQXMgT2JqZWN0LCBCeVZhbCBlIEFzIFN5c3RlbS5EcmF3aW5nLlByaW50aW5nLlByaW50RXZlb" +
                        "nRBcmdzKQ0KDQogIElGIEdldEN1cnJlbnRDb2x1bW5WYWx1ZSgiVG90YWwiKSA9IEZhbHNlIFRIRU4gI" +
                        "CAgIA0KICAgICBlLkNhbmNlbCA9IEZhbHNlDQogIEVMU0UNCiAgICAgZS5DYW5jZWwgPSBUcnVlICAgI" +
                        "A0KICBFTkQgSUYNCg0KRW5kIFN1Yg0KDQpQcml2YXRlIFN1YiBSZXBvcnRGb290ZXJfQmVmb3JlUHJpb" +
                        "nQoQnlWYWwgc2VuZGVyIEFzIE9iamVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5QcmludGluZ" +
                        "y5QcmludEV2ZW50QXJncykNCg0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIlRvdGFsIikgPSBUc" +
                        "nVlIFRIRU4gICAgIA0KICAgICBlLkNhbmNlbCA9IEZhbHNlDQogIEVMU0UNCiAgICAgZS5DYW5jZWwgP" +
                        "SBUcnVlICAgIA0KICBFTkQgSUYNCg0KRW5kIFN1Yg0KDQpQcml2YXRlIFN1YiBsYWJlbDFfQmVmb3JlU" +
                        "HJpbnQoQnlWYWwgc2VuZGVyIEFzIE9iamVjdCwgQnlWYWwgZSBBcyBTeXN0ZW0uRHJhd2luZy5Qcmlud" +
                        "GluZy5QcmludEV2ZW50QXJncykNCg0KICBJRiBHZXRDdXJyZW50Q29sdW1uVmFsdWUoIlRpcG8iKSA9I" +
                        "CJNYXlvciIgVEhFTiAgICAgDQogICAgIGxhYmVsMS5Gb250ICA9IG5ldyBGb250KCJBcmlhbCIsIDcsI" +
                        "EZvbnRTdHlsZS5Cb2xkKQ0KICAgICBsYWJlbDQuRm9udCAgPSBuZXcgRm9udCgiQXJpYWwiLCA3LCBGb" +
                        "250U3R5bGUuQm9sZCkNCiAgICAgbGFiZWwxOC5Gb250ID0gbmV3IEZvbnQoIkFyaWFsIiwgNywgRm9ud" +
                        "FN0eWxlLkJvbGQpDQogICAgIGxhYmVsMTkuRm9udCA9IG5ldyBGb250KCJBcmlhbCIsIDcsIEZvbnRTd" +
                        "HlsZS5Cb2xkKQ0KICAgICBsYWJlbDI0LkZvbnQgPSBuZXcgRm9udCgiQXJpYWwiLCA3LCBGb250U3R5b" +
                        "GUuQm9sZCkNCiAgICAgbGFiZWwyNS5Gb250ID0gbmV3IEZvbnQoIkFyaWFsIiwgNywgRm9udFN0eWxlL" +
                        "kJvbGQpDQogIEVMU0UNCiAgICAgbGFiZWwxLkZvbnQgID0gbmV3IEZvbnQoIkFyaWFsIiwgNywgRm9ud" +
                        "FN0eWxlLlJlZ3VsYXIpDQogICAgIGxhYmVsNC5Gb250ICA9IG5ldyBGb250KCJBcmlhbCIsIDcsIEZvb" +
                        "nRTdHlsZS5SZWd1bGFyKQ0KICAgICBsYWJlbDE4LkZvbnQgPSBuZXcgRm9udCgiQXJpYWwiLCA3LCBGb" +
                        "250U3R5bGUuUmVndWxhcikNCiAgICAgbGFiZWwxOS5Gb250ID0gbmV3IEZvbnQoIkFyaWFsIiwgNywgR" +
                        "m9udFN0eWxlLlJlZ3VsYXIpDQogICAgIGxhYmVsMjQuRm9udCA9IG5ldyBGb250KCJBcmlhbCIsIDcsI" +
                        "EZvbnRTdHlsZS5SZWd1bGFyKQ0KICAgICBsYWJlbDI1LkZvbnQgPSBuZXcgRm9udCgiQXJpYWwiLCA3L" +
                        "CBGb250U3R5bGUuUmVndWxhcikNCiAgRU5EIElGIA0KDQpFbmQgU3ViDQoBrwRTRVQgREFURUZJUlNUI" +
                        "DcgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFVCBBTlNJX05VTExTI" +
                        "E9GRiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VUIFRSQU5TQUNUS" +
                        "U9OIElTT0xBVElPTiBMRVZFTCBSRUFEIFVOQ09NTUlUVEVEIA0KICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICBTRVQgTE9DS19USU1FT1VUIC0xIA0KICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICBTRVQgUVVPVEVEX0lERU5USUZJRVIgT0ZGIA0KICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRVQgQVJJVEhBQk9SVCBPRkYgDQogICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFVCBBTlNJX1dBUk5JTkdTIE9GRg0KICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRVQgQVJJVEhJR05PUkUgT04NCiAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRVhFQyBTUElORk9STUVDT05UQkFMQ" +
                        "U5aQSAxQAABAAAA/////wEAAAAAAAAADAIAAABRU3lzdGVtLkRyYXdpbmcsIFZlcnNpb249Mi4wLjAuM" +
                        "CwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhBQEAAAAVU3lzd" +
                        "GVtLkRyYXdpbmcuQml0bWFwAQAAAAREYXRhBwICAAAACQMAAAAPAwAAAFrBAAAC/9j/4AAQSkZJRgABA" +
                        "QEAlgCWAAD/7gAOQWRvYmUAZAAAAAAB/+ERlkV4aWYAAE1NACoAAAAIAAcBEgADAAAAAQABAAABGgAFA" +
                        "AAAAQAAAGIBGwAFAAAAAQAAAGoBKAADAAAAAQACAAABMQACAAAAHAAAAHIBMgACAAAAFAAAAI6HaQAEA" +
                        "AAAAQAAAKIAAADCAJYAAAABAAAAlgAAAAEAAEFkb2JlIFBob3Rvc2hvcCBDUzUgV2luZG93cwAyMDExO" +
                        "jAxOjE4IDA5OjUxOjA2AAACoAIABAAAAAEAAAFioAMABAAAAAEAAACBAAAAAAAAAAYBAwADAAAAAQAGA" +
                        "AABGgAFAAAAAQAAARABGwAFAAAAAQAAARgBKAADAAAAAQACAAACAQAEAAAAAQAAASACAgAEAAAAAQAAE" +
                        "G4AAAAAAAAASAAAAAEAAABIAAAAAf/Y/+0ADEFkb2JlX0NNAAH/7gAOQWRvYmUAZIAAAAAB/9sAhAAMC" +
                        "AgICQgMCQkMEQsKCxEVDwwMDxUYExMVExMYEQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD" +
                        "AwMAQ0LCw0ODRAODhAUDg4OFBQODg4OFBEMDAwMDBERDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMD" +
                        "AwMDAwMDAz/wAARCAA6AKADASIAAhEBAxEB/90ABAAK/8QBPwAAAQUBAQEBAQEAAAAAAAAAAwABAgQFB" +
                        "gcICQoLAQABBQEBAQEBAQAAAAAAAAABAAIDBAUGBwgJCgsQAAEEAQMCBAIFBwYIBQMMMwEAAhEDBCESM" +
                        "QVBUWETInGBMgYUkaGxQiMkFVLBYjM0coLRQwclklPw4fFjczUWorKDJkSTVGRFwqN0NhfSVeJl8rOEw" +
                        "9N14/NGJ5SkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2N0dXZ3eHl6e3x9fn9xEAAgIBAgQEAwQFBgcHB" +
                        "gU1AQACEQMhMRIEQVFhcSITBTKBkRShsUIjwVLR8DMkYuFygpJDUxVjczTxJQYWorKDByY1wtJEk1SjF" +
                        "2RFVTZ0ZeLys4TD03Xj80aUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9ic3R1dnd4eXp7fH/9oADAMBA" +
                        "AIRAxEAPwD1VJJJJSlgYWR9Z3fWTIqyqg3pLd/pu2tDdoj0HVWA+q+2z/DMf/4H+jV36w9WPSOk3ZrGt" +
                        "fa3a2ljpgveQxu7b+a2fUch/VjquX1bpDMzLrbXY572gskNcGu2eo1ri9zP3Ppp/tS9v3f0OLg/wlnux" +
                        "9z2/wBKuL/BdZJJJMXqSSSSUpJJJJSkkkklKSSSSUpJJJJSkkkklKSSSSU//9D1VZ/WutYnR8T17/fY+" +
                        "W0UNPusd+6391jf8JZ/g03W+t4nRsT17/fY+W0UNPusd4D91jf8JZ/g1xvTOmdR+tfUX5+e8txWnbZY2" +
                        "QIB/oeH+6xv+Ft/9H/zaUr6x9Tys36r9OuynB12Xk23ODRDWis3VV1M/kMY5n0kXqw6l0von1f6h08Fl" +
                        "WJTuttGoD7xU+Miv/Q2u9Rv9f8A0dnpK1/jBwaqOldPGOwVUY9ppZW0QAHMcW/+el0PQHU5f1dwQQLKn" +
                        "4tdb2OALTDBVaxzT9L6LmLQjkGPlsE+HiAnPjidjxcUf+g0ZYzk5nNG+EmEOGQ3Fer/AKbD6vfWHF63i" +
                        "72fo8muBkY5OrT+839+p/5j1rLzvrvQs76sZrerdIc4YgdodXGouP8AMX/6XFs+ix7v+Ls/S+lbZ131e" +
                        "+sON1vF3sHp5NUDIoJktJ/Ob+/U/wDMeoeY5eIj72E8WGX+Njl+7JlwZ5GRxZRw5Y/4uSP78UvXeuYnQ" +
                        "8H7blte+svFYbXtmSC7/COrZ9FjvzleqtZdUy6syyxoe0+ThuasH68dRy+m9IryMNzWX+u1rbHMa8tll" +
                        "pLqxaHsa/27Po/QWT1PrP1lf1fC6d03KFb8rFqsDXMr2l5bZZa4vfU/b7a03Hys8kRISjEHi+Y/5v5rX" +
                        "ZOZhCRiRKUhw6RH7/yvbrK679YMXoddFmVXZYy95ZNYadsDcXOD3M/6K5vI6x9dOhOFvV2Ny8Oz2uewM" +
                        "G0n/R20sZ6dv7nr0+k9Zf1of1e7Fx8rKzG53S73F+DZtYyyC3d+mZTXXtsY39FZ/L/0amw8leSPHKEsc" +
                        "usJfP8A1Y/1mLNzlY5GMZCceko/L/Wl/VfTUlytXU/rD0LDys36x215LPYzEpr2h7rTu9u+uuprK9v09" +
                        "/qfQ/7co49v+MLqmP8AtDHtrx6njfTRDGbm9vSbdXc/a78z7Taz/MUQ5SRs+5jEAeH3DL0Sl2iyHmQKH" +
                        "BMzI4uAD1xj3k9wuV+qH1hz+oY3UsvqVgezGIe1rGBoYza+x7W7fe/6P56P9V/rLk9Rut6Z1Or0Oo4wk" +
                        "gAtD2tIa+WGdlrNzd35j/5ypYv1FsNfSOtWBrXljNwa8S0xXYdr2/nMT44DHFnjMDjHtcMt/nlvGX9ZZ" +
                        "LOJZMBiTwEZOIf3I/pR/qvWdC63idcwftuI17GB5rc2zbuDmwf8G6xn0XN/PWiuI6f9beoY31Uf1HJIy" +
                        "st2UcaiWtYwfo22N9RlAq9jGts/l/mJY7P8YWbit6hTmVBrxurpBqkg8bQKbKf+3L037nMXxzhACXBxS" +
                        "Okpf1V33uBrhjOZI46iNYx8Xr8/NpwMK/Nvn0sdjrHhokw0bvbMIfSep0dW6fT1DHDm1XTDXRILXOqe0" +
                        "7C9n02fvLCr6v1236t9Tt6phjHysNjhXZYz2WED+c9Czex3pu/P/o9n+DVSz63Z+F9VsHKfGR1HOdc0W" +
                        "vaA0Cux7XWOrq9NrnbPTYxn/XE0cpkJocJ9ft6G9eH3OL+7wrjzWMCzY9PuajpxcH+NxPaJLim4/wDjG" +
                        "dQ3MZl1WFwBFDTSSQf+s/Zv/ZhdD9Xc/qWf071up4pxMlr3MLS1zN4ERaKrPfX9LZ/YTcnLmEeIThMA0" +
                        "eCWoTjz8Z4TCcLFjjGhf//R7P61/Vk9VaM3EMZ9LNgY4+2ysEv9H3e2qzc79FZ/Yu/0lOZ9U/rP6BZ0f" +
                        "qX6IMPpY9rhsLXA7PsmS327LGu9ldn/AFu39L/O9qub+tX1VZ1RjszDa1ue1sPYYDb2gR6dk+1tzW/zV" +
                        "v8A1q39H/MpTe+tHTHdT6Jk49bd17QLaByd9Z3hrf8AjG7qv+uLE/xedXZbi2dJsd+kpJuxwe9bzNjR/" +
                        "wAVc7/wZR+qn1oex7ekdVc4ODvSx7rJDg4HZ9kyd3u9Xd7Knv8A+Ks/Sfzuf9Yeg3DOf1X6ul2RU+x7L" +
                        "m4jpfTfrXkNb6Z37LdzvU/0f/Eq5y0oZMcuXmeHiPHjkf0ZtTmYzx5I54Di4RwZIj9KH/oLc+t31rNzn" +
                        "9F6TNjrD6ORawbi4u9hxcdo+m9/0LH/APW6/f8Azep9UPquej1Oy8szn5DQ1zAZbUyd3ogj6dm7+ds/7" +
                        "a/0lsPqn9UmdJY3NzWtf1BzYa0QW0tI/m6/3rXf4W3/AK1V+j/numQz5oRh7GD5P059csv+9ThwylP38" +
                        "3z/AKEOmKP/AHzyn+Mj/kGr/wAMt/8APdyzx/4tOjf+FKv/AD1kLpfrLhdOzsGrG6iLfRsyKmMfToW2P" +
                        "Po1Ocf9G51npfR/wiouZ9Xj1M9UYLTk9IfX08VMMtLn7aKNrHe6za7KdTv3/mWf6NPw5QMIjUiayx0Gl" +
                        "5eGMFmXETmMrG+OXj+r9UnS+sdbLOgdRbY0OAxrXAHxa02Md/Ze3cuAz22u+pXTH8sZk3s+BcbXMH4PX" +
                        "pNzcTPoycMvbYx7XU5DWOG5u8bXNdt/m37XKhi9L6JgdKf0iyxl2I0Ofa3Iewna5xJfZ9Da1tv0H/vpn" +
                        "L5xiiAQTIZBPh/q8MoFfzGH3JEggAwML/rcXE4n12vx+q9AqzenXNyace5r7thna17X17rWfTr2vez2P" +
                        "as/pnScTqGIy9v1jtpdtAsosftdWQI9Pa69vtb+Y76C6fpv1f6D0jJu9A+/qDdgotsDwWDc411Vv91jP" +
                        "d7t/qrLZ9UPqv1Kyy2oXYm263HFLXtDS+lzmWGllnrez2bv6n+DU2PPjjAwjKcYRPFHJwRlpP8ARlGX/" +
                        "SYsmGcp8ZEZSkOGUOOUfl/SjKKbof1Trxep19XZ1Q55Zva4wHbiW+l7rvUs+gsf6lvY3pHXKS4C30i70" +
                        "zztDLGF3+f7V1n1e6R0vpWLbX02w3V2WF1jy8P9wAr2/ow1jdm1Yoq6CepV9Uq6dmWWdVpeaWM2Cuz1q" +
                        "/WyXtZ67H13ei79Jucxn+j/AEv6RNjmM/djIynpDhlwxh/NH3OGUfT/AFkywiAxSiBD5+KNymP1w4OLi" +
                        "9TmdDv6NT9TLf2xW63GszSxjawS/wBQsrcx1TgW7HMa17t2/wD9Jqbfq3jU1Oz/AKvdebTWQCfUs9OPz" +
                        "v091JZt/wCLuxV0ON0zoXTMb/m/Ywvxslj8ix+Q5paYfTTD3+zbbvtp9H02f4P/AEqo2/UH6tOyvT9e6" +
                        "u18uZji1hO0fuerXZfs/tp45iHFM8U4CcjP5Rkxzh/c/RWnl5cMBwwmYxEfm9vJCX99z8Tr3UOp/V/re" +
                        "JnObe/EoJbksAAcHb2w7YG1u/m/0T2s/SVp8e7oDfqb0ynrTXll1twpfUCX1uFt2+8Ob+bW13v/AJzf/" +
                        "obF0tHRug09Pv6RjhjKr6ybw182Frhs9d7yXWdva/6CVHROiO6WOi7W5WNjH3Me7c9rnE2+o57Nr6rXe" +
                        "o53s9NRnmMWvDGcI+4MlQ9BEeDg4h+7614wZNLlGcvbOP1eocXHx1/ivLO+r32Co53Qev1V45M/pLRW3" +
                        "/rllRdRa7/jMZbv1L67m9YwrvtoDrcZ4b6zRtDw4bvc0ez1Gfn7P5CpD6ifVdzftTcq00au3C2sshs7/" +
                        "wBL6e7azb7v0q6Xp2DgYGK2jp9basf6Tdhndu/wheS51m799zkuYzY5YzGzknek5QGOUK6GX6SeXw5I5" +
                        "AdMcK1hGZnGd9h+i//S9VSSSSU859afqs3qbHZuE0N6g1vuZoG3tA/m3z7W3N/wN3/Wrf0f8zP6p/Vx/" +
                        "SKXZGS4/bMloFlTXH062j6Ne1p9O25v59//AFun9H/O9AkkpSSSSSmn1jEszOm30VfzxbvokwPVrIux/" +
                        "d/x9dax6OgZwzMG6ws2ms3Z/BjKab76TW389n2nqWRb/wCg1K6RJWMXu+2eGuG5Xffh/l/hsGX2uMcV8" +
                        "VDbtxPPfVvo+Tg2VnKqsZbj4/2Y2bqDS/3Nfuq+z11ZVm5zPVa/N/Ss9a78+yyxNX9XpycO23FpdszM2" +
                        "/JcQ0ksudkOxi7T9J9PG9v+D/60uiSUkve457XR4uHi/dybf8//AA1kfa4I3fDYrir96Dx7+hda+wY2G" +
                        "KvdTTS2t7XVQx9V773NtvsacrZXS3H+xNxfz/V9ZGf0DqxdnbdjhnjNqrc92uOLn2XU20bR/NZstZm/4" +
                        "f1PQ/wdXps6pJSH39f5v5pXX7ywezp8/wAsd/3XH6BgWYzr7rabcey1tTCyw4+39EHAek3p7Kq9rN/pe" +
                        "pa31X1sq/0aDh9KzqmfV8WMAPTqnMyvcDtJo9D2/v8A6RbySgPucU/l21q6r2p/L/1NlHBwQviqxV1xX" +
                        "7sPm/w3K6j0r7b1FlttNd+OzEvqAsAcBZY6nb7HfvVss96yW9H605+A26oE4pwXG1rqoikMbl+va5js2" +
                        "7K3euyv07Psv2d/+k9Su3q0k7F7vCK4ar08d9/0UZPb4jfFd68NPGdHw3W4OLkV4bK6sazNvtzpZusa4" +
                        "ZWP6DWt/TOc99jHXer+h2Y1f857PSWH0XMzelY/2XFrwQOmCg2hzR9oNpx79n6Nr3+h6dFvqPyW7/Uy3" +
                        "/oLa/V9Xs0lMfd4jQjxcWms/wB7J+96f32KPt8Isy4eHXSP7sP3fV/3bzmL0N77Me27Hs2/bftGRVlGh" +
                        "whuLbjV3V1YTW4388+ln+l/ReqtDpFGVhMbhHGbXjB2TY2xr27WB2Q9+LjtpH5rsa3f/wAF6fpLTSVfN" +
                        "7lHj4eHSq4uH9Ph4WfFwacPFeu/Df6PFb//2f/tGNBQaG90b3Nob3AgMy4wADhCSU0EJQAAAAAAEAAAA" +
                        "AAAAAAAAAAAAAAAAAA4QklNBDoAAAAAAJMAAAAQAAAAAQAAAAAAC3ByaW50T3V0cHV0AAAABQAAAABDb" +
                        "HJTZW51bQAAAABDbHJTAAAAAFJHQkMAAAAASW50ZWVudW0AAAAASW50ZQAAAABDbHJtAAAAAE1wQmxib" +
                        "29sAQAAAA9wcmludFNpeHRlZW5CaXRib29sAAAAAAtwcmludGVyTmFtZVRFWFQAAAABAAAAOEJJTQQ7A" +
                        "AAAAAGyAAAAEAAAAAEAAAAAABJwcmludE91dHB1dE9wdGlvbnMAAAASAAAAAENwdG5ib29sAAAAAABDb" +
                        "GJyYm9vbAAAAAAAUmdzTWJvb2wAAAAAAENybkNib29sAAAAAABDbnRDYm9vbAAAAAAATGJsc2Jvb2wAA" +
                        "AAAAE5ndHZib29sAAAAAABFbWxEYm9vbAAAAAAASW50cmJvb2wAAAAAAEJja2dPYmpjAAAAAQAAAAAAA" +
                        "FJHQkMAAAADAAAAAFJkICBkb3ViQG/gAAAAAAAAAAAAR3JuIGRvdWJAb+AAAAAAAAAAAABCbCAgZG91Y" +
                        "kBv4AAAAAAAAAAAAEJyZFRVbnRGI1JsdAAAAAAAAAAAAAAAAEJsZCBVbnRGI1JsdAAAAAAAAAAAAAAAA" +
                        "FJzbHRVbnRGI1B4bEBiwAAAAAAAAAAACnZlY3RvckRhdGFib29sAQAAAABQZ1BzZW51bQAAAABQZ1BzA" +
                        "AAAAFBnUEMAAAAATGVmdFVudEYjUmx0AAAAAAAAAAAAAAAAVG9wIFVudEYjUmx0AAAAAAAAAAAAAAAAU" +
                        "2NsIFVudEYjUHJjQFkAAAAAAAA4QklNA+0AAAAAABAAlgAAAAEAAgCWAAAAAQACOEJJTQQmAAAAAAAOA" +
                        "AAAAAAAAAAAAD+AAAA4QklNBA0AAAAAAAQAAAB4OEJJTQQZAAAAAAAEAAAAHjhCSU0D8wAAAAAACQAAA" +
                        "AAAAAAAAQA4QklNJxAAAAAAAAoAAQAAAAAAAAACOEJJTQP1AAAAAABIAC9mZgABAGxmZgAGAAAAAAABA" +
                        "C9mZgABAKGZmgAGAAAAAAABADIAAAABAFoAAAAGAAAAAAABADUAAAABAC0AAAAGAAAAAAABOEJJTQP4A" +
                        "AAAAABwAAD/////////////////////////////A+gAAAAA/////////////////////////////wPoA" +
                        "AAAAP////////////////////////////8D6AAAAAD/////////////////////////////A+gAADhCS" +
                        "U0EAAAAAAAAAgABOEJJTQQCAAAAAAAEAAAAADhCSU0EMAAAAAAAAgEBOEJJTQQtAAAAAAAGAAEAAAADO" +
                        "EJJTQQIAAAAAAAQAAAAAQAAAkAAAAJAAAAAADhCSU0EHgAAAAAABAAAAAA4QklNBBoAAAAAA0kAAAAGA" +
                        "AAAAAAAAAAAAACBAAABYgAAAAoAVQBuAHQAaQB0AGwAZQBkAC0AMQAAAAEAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAQAAAAAAAAAAAAABYgAAAIEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAA" +
                        "QAAAAAAAG51bGwAAAACAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQAAAAAVG9wIGxvbmcAA" +
                        "AAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAAAIEAAAAAUmdodGxvbmcAAAFiAAAABnNsaWNlc" +
                        "1ZsTHMAAAABT2JqYwAAAAEAAAAAAAVzbGljZQAAABIAAAAHc2xpY2VJRGxvbmcAAAAAAAAAB2dyb3VwS" +
                        "URsb25nAAAAAAAAAAZvcmlnaW5lbnVtAAAADEVTbGljZU9yaWdpbgAAAA1hdXRvR2VuZXJhdGVkAAAAA" +
                        "FR5cGVlbnVtAAAACkVTbGljZVR5cGUAAAAASW1nIAAAAAZib3VuZHNPYmpjAAAAAQAAAAAAAFJjdDEAA" +
                        "AAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0bG9uZwAAAAAAAAAAQnRvbWxvbmcAAACBAAAAAFJnaHRsb" +
                        "25nAAABYgAAAAN1cmxURVhUAAAAAQAAAAAAAG51bGxURVhUAAAAAQAAAAAAAE1zZ2VURVhUAAAAAQAAA" +
                        "AAABmFsdFRhZ1RFWFQAAAABAAAAAAAOY2VsbFRleHRJc0hUTUxib29sAQAAAAhjZWxsVGV4dFRFWFQAA" +
                        "AABAAAAAAAJaG9yekFsaWduZW51bQAAAA9FU2xpY2VIb3J6QWxpZ24AAAAHZGVmYXVsdAAAAAl2ZXJ0Q" +
                        "WxpZ25lbnVtAAAAD0VTbGljZVZlcnRBbGlnbgAAAAdkZWZhdWx0AAAAC2JnQ29sb3JUeXBlZW51bQAAA" +
                        "BFFU2xpY2VCR0NvbG9yVHlwZQAAAABOb25lAAAACXRvcE91dHNldGxvbmcAAAAAAAAACmxlZnRPdXRzZ" +
                        "XRsb25nAAAAAAAAAAxib3R0b21PdXRzZXRsb25nAAAAAAAAAAtyaWdodE91dHNldGxvbmcAAAAAADhCS" +
                        "U0EKAAAAAAADAAAAAI/8AAAAAAAADhCSU0EFAAAAAAABAAAAAQ4QklNBAwAAAAAEIoAAAABAAAAoAAAA" +
                        "DoAAAHgAABswAAAEG4AGAAB/9j/7QAMQWRvYmVfQ00AAf/uAA5BZG9iZQBkgAAAAAH/2wCEAAwICAgJC" +
                        "AwJCQwRCwoLERUPDAwPFRgTExUTExgRDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBD" +
                        "QsLDQ4NEA4OEBQODg4UFA4ODg4UEQwMDAwMEREMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD" +
                        "AwMDP/AABEIADoAoAMBIgACEQEDEQH/3QAEAAr/xAE/AAABBQEBAQEBAQAAAAAAAAADAAECBAUGBwgJC" +
                        "gsBAAEFAQEBAQEBAAAAAAAAAAEAAgMEBQYHCAkKCxAAAQQBAwIEAgUHBggFAwwzAQACEQMEIRIxBUFRY" +
                        "RMicYEyBhSRobFCIyQVUsFiMzRygtFDByWSU/Dh8WNzNRaisoMmRJNUZEXCo3Q2F9JV4mXys4TD03Xj8" +
                        "0YnlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3EQACAgECBAQDBAUGBwcGBTUBA" +
                        "AIRAyExEgRBUWFxIhMFMoGRFKGxQiPBUtHwMyRi4XKCkkNTFWNzNPElBhaisoMHJjXC0kSTVKMXZEVVN" +
                        "nRl4vKzhMPTdePzRpSkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2JzdHV2d3h5ent8f/2gAMAwEAAhEDE" +
                        "QA/APVUkkklKWBhZH1nd9ZMirKqDekt3+m7a0N2iPQdVYD6r7bP8Mx//gf6NXfrD1Y9I6Tdmsa19rdra" +
                        "WOmC95DG7tv5rZ9RyH9WOq5fVukMzMuttdjnvaCyQ1wa7Z6jWuL3M/c+mn+1L2/d/Q4uD/CWe7H3Pb/A" +
                        "Eq4v8F1kkkkxepJJJJSkkkklKSSSSUpJJJJSkkkklKSSSSUpJJJJT//0PVVn9a61idHxPXv99j5bRQ0+" +
                        "6x37rf3WN/wln+DTdb63idGxPXv99j5bRQ0+6x3gP3WN/wln+DXG9M6Z1H619Rfn57y3FadtljZAgH+h" +
                        "4f7rG/4W3/0f/NpSvrH1PKzfqv067KcHXZeTbc4NENaKzdVXUz+QxjmfSRerDqXS+ifV/qHTwWVYlO62" +
                        "0agPvFT4yK/9Da71G/1/wDR2ekrX+MHBqo6V08Y7BVRj2mllbRAAcxxb/56XQ9AdTl/V3BBAsqfi11vY" +
                        "4AtMMFVrHNP0vouYtCOQY+WwT4eICc+OJ2PFxR/6DRljOTmc0b4SYQ4ZDcV6v8ApsPq99YcXreLvZ+jy" +
                        "a4GRjk6tP7zf36n/mPWsvO+u9Czvqxmt6t0hzhiB2h1cai4/wAxf/pcWz6LHu/4uz9L6VtnXfV76w43W" +
                        "8Xewenk1QMigmS0n85v79T/AMx6h5jl4iPvYTxYZf42OX7smXBnkZHFlHDlj/i5I/vxS9d65idDwftuW" +
                        "176y8Vhte2ZILv8I6tn0WO/OV6q1l1TLqzLLGh7T5OG5qwfrx1HL6b0ivIw3NZf67Wtscxry2WWkurFo" +
                        "exr/bs+j9BZPU+s/WV/V8Lp3TcoVvysWqwNcyvaXltllri99T9vtrTcfKzyREhKMQeL5j/m/mtdk5mEJ" +
                        "GJEpSHDpEfv/K9usrrv1gxeh10WZVdljL3lk1hp2wNxc4Pcz/orm8jrH106E4W9XY3Lw7Pa57AwbSf9H" +
                        "bSxnp2/uevT6T1l/Wh/V7sXHysrMbndLvcX4Nm1jLILd36ZlNde2xjf0Vn8v/RqbDyV5I8coSxy6wl8/" +
                        "wDVj/WYs3OVjkYxkJx6Sj8v9aX9V9NSXK1dT+sPQsPKzfrHbXks9jMSmvaHutO727666msr2/T3+p9D/" +
                        "tyjj2/4wuqY/wC0Me2vHqeN9NEMZub29Jt1dz9rvzPtNrP8xRDlJGz7mMQB4fcMvRKXaLIeZAocEzMji" +
                        "4APXGPeT3C5X6ofWHP6hjdSy+pWB7MYh7WsYGhjNr7Htbt97/o/no/1X+suT1G63pnU6vQ6jjCSAC0Pa" +
                        "0hr5YZ2Ws3N3fmP/nKli/UWw19I61YGteWM3BrxLTFdh2vb+cxPjgMcWeMwOMe1wy3+eW8Zf1lks4lkw" +
                        "GJPARk4h/cj+lH+q9Z0LreJ1zB+24jXsYHmtzbNu4ObB/wbrGfRc389aK4jp/1t6hjfVR/UckjKy3ZRx" +
                        "qJa1jB+jbY31GUCr2Ma2z+X+Yljs/xhZuK3qFOZUGvG6ukGqSDxtApsp/7cvTfucxfHOEAJcHFI6Sl/V" +
                        "Xfe4GuGM5kjjqI1jHxevz82nAwr82+fSx2OseGiTDRu9swh9J6nR1bp9PUMcObVdMNdEgtc6p7TsL2fT" +
                        "Z+8sKvq/Xbfq31O3qmGMfKw2OFdljPZYQP5z0LN7Hem78/+j2f4NVLPrdn4X1Wwcp8ZHUc51zRa9oDQK" +
                        "7HtdY6ur02uds9NjGf9cTRymQmhwn1+3ob14fc4v7vCuPNYwLNj0+5qOnFwf43E9okuKbj/AOMZ1Dcxm" +
                        "XVYXAEUNNJJB/6z9m/9mF0P1dz+pZ/TvW6ninEyWvcwtLXM3gRFoqs99f0tn9hNycuYR4hOEwDR4JahO" +
                        "PPxnhMJwsWOMaF//9Hs/rX9WT1VozcQxn0s2Bjj7bKwS/0fd7arNzv0Vn9i7/SU5n1T+s/oFnR+pfogw" +
                        "+lj2uGwtcDs+yZLfbssa72V2f8AW7f0v872q5v61fVVnVGOzMNrW57Ww9hgNvaBHp2T7W3Nb/NW/wDWr" +
                        "f0f8ylN760dMd1PomTj1t3XtAtoHJ31neGt/wCMbuq/64sT/F51dluLZ0mx36Skm7HB71vM2NH/ABVzv" +
                        "/BlH6qfWh7Ht6R1Vzg4O9LHuskODgdn2TJ3e71d3sqe/wD4qz9J/O5/1h6DcM5/Vfq6XZFT7HsubiOl9" +
                        "N+teQ1vpnfst3O9T/R/8SrnLShkxy5eZ4eI8eOR/Rm1OZjPHkjngOLhHBkiP0of+gtz63fWs3Of0XpM2" +
                        "OsPo5FrBuLi72HFx2j6b3/Qsf8A9br9/wDN6n1Q+q56PU7LyzOfkNDXMBltTJ3eiCPp2bv52z/tr/SWw" +
                        "+qf1SZ0ljc3Na1/UHNhrRBbS0j+br/etd/hbf8ArVX6P+e6ZDPmhGHsYPk/Tn1yy/71OHDKU/fzfP8Ao" +
                        "Q6Yo/8AfPKf4yP+Qav/AAy3/wA93LPH/i06N/4Uq/8APWQul+suF07OwasbqIt9GzIqYx9OhbY8+jU5x" +
                        "/0bnWel9H/CKi5n1ePUz1RgtOT0h9fTxUwy0uftoo2sd7rNrsp1O/f+ZZ/o0/DlAwiNSJrLHQaXl4YwW" +
                        "ZcROYysb45eP6v1SdL6x1ss6B1FtjQ4DGtcAfFrTYx39l7dy4DPba76ldMfyxmTez4Fxtcwfg9ek3NxM" +
                        "+jJwy9tjHtdTkNY4bm7xtc123+bftcqGL0vomB0p/SLLGXYjQ59rch7CdrnEl9n0NrW2/Qf++mcvnGKI" +
                        "BBMhkE+H+rwygV/MYfckSCADAwv+txcTifXa/H6r0CrN6dc3Jpx7mvu2GdrXtfXutZ9Ova97PY9qz+md" +
                        "JxOoYjL2/WO2l20Cyix+11ZAj09rr2+1v5jvoLp+m/V/oPSMm70D7+oN2Ci2wPBYNzjXVW/3WM93u3+q" +
                        "stn1Q+q/UrLLahdibbrccUte0NL6XOZYaWWet7PZu/qf4NTY8+OMDCMpxhE8UcnBGWk/wBGUZf9JiyYZ" +
                        "ynxkRlKQ4ZQ45R+X9KMopuh/VOvF6nX1dnVDnlm9rjAduJb6Xuu9Sz6Cx/qW9jekdcpLgLfSLvTPO0Ms" +
                        "YXf5/tXWfV7pHS+lYttfTbDdXZYXWPLw/3ACvb+jDWN2bViiroJ6lX1Srp2ZZZ1Wl5pYzYK7PWr9bJe1" +
                        "nrsfXd6Lv0m5zGf6P8AS/pE2OYz92MjKekOGXDGH80fc4ZR9P8AWTLCIDFKIEPn4o3KY/XDg4uL1OZ0O" +
                        "/o1P1Mt/bFbrcazNLGNrBL/AFCytzHVOBbscxrXu3b/AP0mpt+reNTU7P8Aq915tNZAJ9Sz04/O/T3Ul" +
                        "m3/AIu7FXQ43TOhdMxv+b9jC/GyWPyLH5Dmlph9NMPf7Ntu+2n0fTZ/g/8ASqjb9Qfq07K9P17q7Xy5m" +
                        "OLWE7R+56tdl+z+2njmIcUzxTgJyM/lGTHOH9z9FaeXlwwHDCZjER+b28kJf33PxOvdQ6n9X+t4mc5t7" +
                        "8SgluSwABwdvbDtgbW7+b/RPaz9JWnx7ugN+pvTKetNeWXW3Cl9QJfW4W3b7w5v5tbXe/8AnN/+hsXS0" +
                        "dG6DT0+/pGOGMqvrJvDXzYWuGz13vJdZ29r/oJUdE6I7pY6LtblY2Mfcx7tz2ucTb6jns2vqtd6jnez0" +
                        "1GeYxa8MZwj7gyVD0ER4ODiH7vrXjBk0uUZy9s4/V6hxcfHX+K8s76vfYKjndB6/VXjkz+ktFbf+uWVF" +
                        "1Frv+Mxlu/Uvrub1jCu+2gOtxnhvrNG0PDhu9zR7PUZ+fs/kKkPqJ9V3N+1NyrTRq7cLayyGzv/AEvp7" +
                        "trNvu/SrpenYOBgYraOn1tqx/pN2Gd27/CF5LnWbv33OS5jNjljMbOSd6TlAY5QroZfpJ5fDkjkB0xwr" +
                        "WEZmcZ32H6L/9L1VJJJJTzn1p+qzepsdm4TQ3qDW+5mgbe0D+bfPtbc3/A3f9at/R/zM/qn9XH9IpdkZ" +
                        "Lj9syWgWVNcfTraPo17Wn07bm/n3/8AW6f0f870CSSlJJJJKafWMSzM6bfRV/PFu+iTA9Wsi7H93/H11" +
                        "rHo6BnDMwbrCzaazdn8GMppvvpNbfz2faepZFv/AKDUrpElYxe77Z4a4bld9+H+X+GwZfa4xxXxUNu3E" +
                        "899W+j5ODZWcqqxluPj/ZjZuoNL/c1+6r7PXVlWbnM9Vr839Kz1rvz7LLE1f1enJw7bcWl2zMzb8lxDS" +
                        "Sy52Q7GLtP0n08b2/4P/rS6JJSS97jntdHi4eL93Jt/z/8ADWR9rgjd8NiuKv3oPHv6F1r7BjYYq91NN" +
                        "La3tdVDH1Xvvc22+xpytldLcf7E3F/P9X1kZ/QOrF2dt2OGeM2qtz3a44ufZdTbRtH81my1mb/h/U9D/" +
                        "B1emzqklIff1/m/mldfvLB7Onz/ACx3/dcfoGBZjOvutptx7LW1MLLDj7f0QcB6Tensqr2s3+l6lrfVf" +
                        "Wyr/RoOH0rOqZ9XxYwA9OqczK9wO0mj0Pb+/wDpFvJKA+5xT+XbWrqvan8v/U2UcHBC+KrFXXFfuw+b/" +
                        "DcrqPSvtvUWW201347MS+oCwBwFljqdvsd+9Wyz3rJb0frTn4DbqgTinBcbWuqiKQxuX69rmOzbsrd67" +
                        "K/Ts+y/Z3/6T1K7erSTsXu8IrhqvTx33/RRk9viN8V3rw08Z0fDdbg4uRXhsrqxrM2+3Olm6xrhlY/oN" +
                        "a39M5z32Mdd6v6HZjV/zns9JYfRczN6Vj/ZcWvBA6YKDaHNH2g2nHv2fo2vf6Hp0W+o/Jbv9TLf+gtr9" +
                        "X1ezSUx93iNCPFxaaz/AHsn73p/fYo+3wizLh4ddI/uw/d9X/dvOYvQ3vsx7bsezb9t+0ZFWUaHCG4tu" +
                        "NXdXVhNbjfzz6Wf6X9F6q0OkUZWExuEcZteMHZNjbGvbtYHZD34uO2kfmuxrd//AAXp+ktNJV83uUePh" +
                        "4dKri4f0+HhZ8XBpw8V678N/o8Vv//ZOEJJTQQhAAAAAABVAAAAAQEAAAAPAEEAZABvAGIAZQAgAFAAa" +
                        "ABvAHQAbwBzAGgAbwBwAAAAEwBBAGQAbwBiAGUAIABQAGgAbwB0AG8AcwBoAG8AcAAgAEMAUwA1AAAAA" +
                        "QA4QklNBAYAAAAAAAcABwAAAAEBAP/hDdBodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY" +
                        "2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+DQo8eDp4bXBtZXRhI" +
                        "HhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjAtYzA2MCA2M" +
                        "S4xMzQ3NzcsIDIwMTAvMDIvMTItMTc6MzI6MDAgICAgICAgICI+DQoJPHJkZjpSREYgeG1sbnM6cmRmP" +
                        "SJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4NCgkJPHJkZjpEZXNjc" +
                        "mlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvI" +
                        "iB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9I" +
                        "mh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6ZGM9I" +
                        "mh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9uc" +
                        "y5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wI" +
                        "ENTNSBXaW5kb3dzIiB4bXA6Q3JlYXRlRGF0ZT0iMjAxMS0wMS0xOFQwOTo1MTowNi0wNjowMCIgeG1wO" +
                        "k1ldGFkYXRhRGF0ZT0iMjAxMS0wMS0xOFQwOTo1MTowNi0wNjowMCIgeG1wOk1vZGlmeURhdGU9IjIwM" +
                        "TEtMDEtMThUMDk6NTE6MDYtMDY6MDAiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzQ0QzA5QUIxQ" +
                        "TIzRTAxMTgyMDFCMkEwMkU0N0MxOTgiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MzM0QzA5QUIxQ" +
                        "TIzRTAxMTgyMDFCMkEwMkU0N0MxOTgiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDozM" +
                        "zRDMDlBQjFBMjNFMDExODIwMUIyQTAyRTQ3QzE5OCIgZGM6Zm9ybWF0PSJpbWFnZS9qcGVnIiBwaG90b" +
                        "3Nob3A6Q29sb3JNb2RlPSIzIiBwaG90b3Nob3A6SUNDUHJvZmlsZT0ic1JHQiBJRUM2MTk2Ni0yLjEiP" +
                        "g0KCQkJPHhtcE1NOkhpc3Rvcnk+DQoJCQkJPHJkZjpTZXE+DQoJCQkJCTxyZGY6bGkgc3RFdnQ6YWN0a" +
                        "W9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjMzNEMwOUFCMUEyM0UwMTE4MjAxQ" +
                        "jJBMDJFNDdDMTk4IiBzdEV2dDp3aGVuPSIyMDExLTAxLTE4VDA5OjUxOjA2LTA2OjAwIiBzdEV2dDpzb" +
                        "2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdpbmRvd3MiLz4NCgkJCQkJPHJkZjpsaSBzd" +
                        "EV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjM0NEMwOUFCMUEyM0UwM" +
                        "TE4MjAxQjJBMDJFNDdDMTk4IiBzdEV2dDp3aGVuPSIyMDExLTAxLTE4VDA5OjUxOjA2LTA2OjAwIiBzd" +
                        "EV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdpbmRvd3MiIHN0RXZ0OmNoYW5nZ" +
                        "WQ9Ii8iLz4NCgkJCQk8L3JkZjpTZXE+DQoJCQk8L3htcE1NOkhpc3Rvcnk+DQoJCTwvcmRmOkRlc2Nya" +
                        "XB0aW9uPg0KCTwvcmRmOlJERj4NCjwveDp4bXBtZXRhPg0KICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgC" +
                        "iAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI" +
                        "Dw/eHBhY2tldCBlbmQ9J3cnPz7/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnRyUkdCIFhZW" +
                        "iAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLUhQI" +
                        "CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFjcHJ0AAABUAAAA" +
                        "DNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAACBAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAA" +
                        "BRiWFlaAAACQAAAABRkbW5kAAACVAAAAHBkbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAA" +
                        "CRsdW1pAAAD+AAAABRtZWFzAAAEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAAC" +
                        "AxiVFJDAAAEPAAACAx0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tc" +
                        "GFueQAAZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY2L" +
                        "TIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAA" +
                        "AAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAA" +
                        "AAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z2Rlc2MAAAAAAAAAFklFQyBodHRwOi8vd3d3L" +
                        "mllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgU" +
                        "kdCIGNvbG91ciBzcGFjZSAtIHNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCI" +
                        "GNvbG91ciBzcGFjZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlb" +
                        "mNlIFZpZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZSBWa" +
                        "WV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHZpZ" +
                        "XcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJVgBQAAAAVx/nbWVhcwAAA" +
                        "AAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAABDUlQgY3VydgAAAAAAAAQAAAAABQAKA" +
                        "A8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfA" +
                        "KQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFA" +
                        "UwBUgFZAWABZwFuAXUBfAGDAYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvA" +
                        "jgCQQJLAlQCXQJnAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA" +
                        "3IDfgOKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4QTwB" +
                        "P4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsGjAadBq8GwAbRB" +
                        "uMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gICwgfCDIIRghaCG4IggiWCKoIvgjSCOcI+wkQC" +
                        "SUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpUCmoKgQqYCq4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC" +
                        "8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mDUANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62D" +
                        "tIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImE" +
                        "kUSZBKEEqMSwxLjEwMTIxNDE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDF" +
                        "iYWSRZsFo8WshbWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRG" +
                        "ncanhrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e6R8TH" +
                        "z4faR+UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2YjlCPCI/AkHyRNJ" +
                        "HwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KHEooijUKQYpOClrKZ0p0CoCK" +
                        "jUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rLeEuFi5MLoIuty7uLyQvWi+RL8cv/jA1M" +
                        "GwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbpN" +
                        "yQ3YDecN9c4FDhQOIw4yDkFOUI5fzm8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gP" +
                        "mA+oD7gPyE/YT+iP+JAI0BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeR" +
                        "iJGZ0arRvBHNUd7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpNAk1KTZNN3E4lT" +
                        "m5Ot08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlxWqVb3V" +
                        "0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114XcleGl5sXr1fD19hX7NgBWBXY" +
                        "Kpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z5Nn6Wg/aJZo7GlDaZpp8WpIa" +
                        "p9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CGcOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMd" +
                        "Sh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553pGeqV7BHtje8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lg" +
                        "EeAqIEKgWuBzYIwgpKC9INXg7qEHYSAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi" +
                        "/yMY4zKjTGNmI3/jmaOzo82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgm" +
                        "EyYuJkkmZCZ/JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHp" +
                        "TilqaYapoum/adup+CoUqjEqTepqaocqo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsWCx1rJLs" +
                        "sKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pvgq+hL7/v3q/9cBww" +
                        "OzBZ8Hjwl/C28NYw9TEUcTOxUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3yzbLtsw1zLXNNc21zjbOts83z" +
                        "7jQOdC60TzRvtI/0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nhk2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3" +
                        "ynfr+A24L3hROHM4lPi2+Nj4+vkc+T85YTmDeaW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO607" +
                        "0DvzPBY8OXxcvH/8ozzGfOn9DT0wvVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t/" +
                        "///2wBDAAEBAQEBAQEBAQECAQEBAgIBAQEBAgICAgICAgIDAgMDAwMCAwMEBAQEBAMFBQUFBQUHBwcHB" +
                        "wgICAgICAgICAj/2wBDAQEBAQICAgQDAwQHBQQFBwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC" +
                        "AgICAgICAgICAgICAgICAgICAj/wAARCACBAWIDAREAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAA" +
                        "AECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0Kxw" +
                        "RVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4e" +
                        "XqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5" +
                        "ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDB" +
                        "AcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpK" +
                        "jU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOk";
                    resourceString += "paanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRA" +
                        "xEAPwD+/igAoAKACgAoAKAGu6Ro8kjiOOMF5JHICqoGSST0AoA/Fbxl/wAF0P2VvC/xJu/Bul+EvE3jL" +
                        "wjpl0+lX/xJ8Pw6d9jlKOUM9nb3FzHLNBnkO2wkZKqRjMc6NFSZ+wfgnxp4X+I/hDw1498E6xF4g8JeL" +
                        "7K38Q+HdasifLuLS6jEsbgMAynB5VgCpyCAQRVmbR1FABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAYPirQYfFXhjxH4XuLl7O" +
                        "38SWF5oM93a482JLy3e3Z03cblD5Ge9AH8RPjP/AIJcftveFPiTe/Dmy+Bmq+L9l0bHSPGnhlYpdBvYG" +
                        "kKxXAvpHSGBHUbis7IyZw4U1jys6lUR/YJ+yF8FdU/Z2/Zp+D3wY13U49X13wNpKWWvX1mS0BvrmeS+u" +
                        "EhZlQtFHLOyRsVBKgEgHitUjnk7s+kKZIUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAU" +
                        "AFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAH+ev8A8" +
                        "FEP2sfGf7VP7UfxP8W3Xi+91T4d+HNbvtA+EGiG4lFjYaNp9wbS2mt4AxSOS4WITSuOSzHnAGP9oPBXw" +
                        "6wvD3D+Hoqko15wUqrtq5SV2m92o35Utkkf4peN3iPiuIuIcRWdVyoQm40lfSMIuyaWycrcze92f1P/A" +
                        "PBDj4ufFP4vfsR/bPipr154ou/BHizVvh/4O1/xBLNcXk+h2mnabeQrJPOzPKIZruaFCT8qIqDha/z5+" +
                        "llw3l+W8V8uEgoKpSjOSjZJTcpp2S0V1FN922+p/od9EjiXMcz4T5sXNzdOrKEJSu24KMGrt6uzk0uyS" +
                        "XQ/Ymv5lP6fCgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK" +
                        "ACgAoAKACgAoAKACgAoAKACgCC6uraytri9vbhLSztEe6u7u6dY4ooo1Ls7s5AVVAJJJwBQB8sftdfGz" +
                        "T/hj+xt8cvjh4a1iG5h07wVqOv+CNdspVaCe71KwMGlyxyKcMsk1xEVI6g8V974W8PLNuI8FhGrxnVjz" +
                        "f4U7y/8lTPgPFXiJ5Tw3jsWnaVOlLl/xNWj/wCTNH+crX+4J/hif3b/AAP1Wz/4J8f8EkPCPjt9GhuNZ" +
                        "+HvgBfiddaNqG+NLrxJ4mP9qx21y64fH23UUgYg5CjC8AV/kXxZh5cZ+JFXD8zUatf2d10p0/dbXT4Yu" +
                        "S89z/X/AISxEOCvDWliOROdKh7Sz61KnvJPr8c1F+Wx9PfsVftq/Cb9t74TWnxF+HV2NN1/TRFp/wARP" +
                        "h3qEqPqOgai6E+XJgL5kEm1jBOFCyKDwrq6L8D4p+FmY8KZi8NiVeDu4TS92ce67Nfajun3TTf6B4U+K" +
                        "2W8W5asThnaaspwb96Euz7p/Zls12aaX2HX5mfpwUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAB" +
                        "QAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAEF1dW1lbXF7e3CWlnaI91d3d06xxRRRq" +
                        "XZ3ZyAqqASSTgCgD+Uj/gpz/wAFOtS/aA1XUP2a/wBm/V3h+ErXA0Pxf400+TyZfFtyZBF9mgcldunBu" +
                        "CSR555P7v7+UpG8IW1Z+kn/AAWu1WH4Z/8ABNXxB4G0uYwWWv6l4P8AhrbDB3Pb2N7FqYXO1sZXTBnkZ" +
                        "HGTnB/pz6JOWLEcaUZtfwoVJf8AkvJ/7d/W5/Lv0u80eH4KrQTt7WdOP/k3P/7b/Wx/Fp8OPCUvj74h+" +
                        "A/AsLOs3jXWdL8JRNBjeG1K+iswVyCM5k44r/VPPMyWDwVbEPanCUv/AAFN/of5Q5HlrxuNo4db1Jxj/" +
                        "wCBNL9T+0H/AILt61qPhT/gnvqXh7QNPuDo/ifxP4X8Ia0NNjleC1062km1WNpygYJF59hCgZiBvZBnJ" +
                        "AP+XP0RcLDEcaRqVJLmhTqSV93J2i7d3aUnp0Tex/qh9L/F1MNwVKnTi+WdWnF22UVeSv2V4xWvVpb2P" +
                        "5Ef2Yf2nviz+yP8WdD+L/wg1w6bremn7JrOjXe99O1nTndWmsb6FWXzIZNo7hlYB0KuqsP9JuPuAcu4k" +
                        "y6eDxkLweqa+KMukovo19zWjum0f5o+H/iBmXDWZQxuCnaa0afwzj1jJdU/vTs000mf3n/sVftq/Cb9t" +
                        "74TWnxF+HV2NN1/TRFp/wARPh3qEqPqOgai6E+XJgL5kEm1jBOFCyKDwrq6L/kD4p+FmY8KZi8NiVeDu" +
                        "4TS92ce67Nfajun3TTf+xPhT4rZbxblqxOGdpqynBv3oS7Pun9mWzXZppfYdfmZ+nBQAUAFAHKeOPHPg" +
                        "/4aeE9c8d+PvEdp4S8H+Gof7Q13xFrkqwW1tFuEYLM3dmYKqjlmIABJAoBI8j+A37V/7PP7TkGuTfAz4" +
                        "oWXj1/DbImu2FvDe2N7bLIzIkj2upwW03lsVIWQJtOODSTuNxaPoemIKACgAoAKAPgbxH/wVC/YQ8H/A" +
                        "BV1z4K+LP2gbTw18RvDWqTeDNf0nXtG8S2lpaajbzGCSOXUZ9OWyVVcYMhn2d92K/YsD4A8X4nLoY6jg" +
                        "nOhOKnFqVNtxaumoqfPt05b+R+NY76QXB+FzGeBrY1Qrwk4SThUSUk7NObhyb9ea3mfesUsU8UU8EqzQ" +
                        "TKssM0TBkdGGQykcEEdDX4/KLTs9z9jjJNXWqZJUlBQAUAFABQB8U/8FGPir4y+Cf7En7RPxK+H2qPof" +
                        "jPQNDW10DW7YlZrKbUr+30o3ELD7ssS3JeNuzAHtX6p4I8PYXNeK8FhcTHmpSneS6NRTlZ+TtZ+R+U+O" +
                        "PEWKynhPHYrDS5asYWi+qcpKN15q915n8hP/BK34hePvFn/AAUe/ZwuvFPjjWPEtzqurapLqlx4g1O9v" +
                        "JLlv+Ec1A5la5kcueBy2a/0o+kJk2Dw3A+OVKlCCjGNuWKVvfjtZaH+Z30d86xmJ46wLrVpzcpyvzSbv" +
                        "+7lvd6n93Gt63o3hrRtV8ReItVttC0DQrabWNb1vWJo7a0s7S2jM0s00sxVEjRFLMzEAAZNf5Bn+w588" +
                        "fBH9sv9mP8AaO1/W/CvwW+L2neOPEnh6NrzU9Et4r6zufIR1jaaFNRgtzPErMoaSLcoJGTyKSaZTi0fT" +
                        "dMkKACgAoAKAPl34zftqfst/s9+LNI8DfGL4y6Z4L8W60kdzaaFcR3t3PFDLnZJc/2fBOLaNtp2vOUU9" +
                        "jSbRSi2fS+n6hYatYWWq6Vew6npepwx6hpupafIk0FxBMgkjkjkjJV0dSCrAkEHIpklugAoAKACgAoAK" +
                        "ACgAoAgurq2sra4vb24S0s7RHuru7unWOKKKNS7O7OQFVQCSScAUAfyf/8ABUb/AIKjXPxwudb/AGe/2" +
                        "e9be0+DVo7af458c6ezRy+K5Y2w0EDDBXTlI5PWc8n93gPlKR0U6dj8mv2bvAHif4nfHj4TeC/CPhqfx" +
                        "brGq69pbnRdPi80vawXkc9w8mcKsUcSM8jsQqqCSQBUouT0P6SP+Dh6eeH9if4bxxTPFHdfE/RILlI2K" +
                        "iRB4W8RShWA6jcitg9wD2r+xPoVwT4qr3W2Gn/6cpH8Y/Tam1wpQSe+Jh/6bqn8tH7E1tBeftmfsj2l1" +
                        "Ctxa3XxO8BW1zBKAyPG/iqxVlYHqCDg1/oJ4qzceF8yadmsNW/9NyP89PCeClxTliauniaP/pyJ/or+M" +
                        "PB/hb4geFtf8E+NtAtfFPhHxTazaJ4h8Pa3Ck9reWs6FHjkRwQQQfw6jmv8TMszPEYLEQr0JuFSDTjJO" +
                        "zTWzTP9wMzyzD43DzoV4KdKaalFq6ae6aP4if8AgqH/AMEvPFP7Fnim4+JHw3t7rxT+zR4puvL0fWJN8" +
                        "914Yup3+TTtRfkmMk4t7g/f+4/7zBf/AFb8AfH7D8U4dYbEtQx8FqtlUS+1Hz/mj03Wm3+TX0gvo+4jh" +
                        "TEPFYVOeAm9Hu6bf2J+X8suuz13+B/2Yf2nviz+yP8AFnQ/i/8ACDXDput6afsms6Nd7307WdOd1aaxv" +
                        "oVZfMhk2juGVgHQq6qw/YePuAcu4ky6eDxkLweqa+KMukovo19zWjum0fjfh/4gZlw1mUMbgp2mtGn8M" +
                        "49YyXVP707NNNJn95/7FX7avwm/be+E1p8Rfh1djTdf00Raf8RPh3qEqPqOgai6E+XJgL5kEm1jBOFCy" +
                        "KDwrq6L/kD4p+FmY8KZi8NiVeDu4TS92ce67Nfajun3TTf+xPhT4rZbxblqxOGdpqynBv3oS7Pun9mWz" +
                        "XZppfYdfmZ+nBQAUAfl9/wV38DeNviX+yFP4D+Hnhy98XeLvE/inw7p+k+HPD8Lz3N0wnkmICJ/CoQuz" +
                        "HhQCxIAzUz2LpvU+AP+CTn7CX7XP7NP7TGqfEL4yfC6TwL4H1Twnqnhp9SGveHb7zbq5vrC6hhe30rUL" +
                        "mbnyC3zJgFeSDipjFpl1Jpo/pArQxCgAoAKACgD/O0/4KJf8n1/taf9j74j/wDTjJX+13gp/wAkjlv/A" +
                        "F4p/wDpKP8AETxu/wCSvzL/AK/1P/Smf3XfsTXNxefsZfsj3l5O91d3Xwx8A3N1dXLs8kkj+FbFmZmYk" +
                        "liTkk9a/wAjvFWEY8UZkkrJYmt/6ckf6+eFFSUuFsslJ3bw1H/03E+na+CPvwoAKACgAoA/OL/grj/yj" +
                        "o/ae/7BWl/+pHp1fuH0bv8Akt8B/il/6bmfhn0lf+SHzD/DH/05A/kh/wCCR3/KRf8AZh/7Cuqf+o5qN" +
                        "f6PfSR/5IjH/wCGP/pyB/mx9Gr/AJLjL/8AFL/03M/sU/4KV6J4h8S/sQfHnw54T0u71vxJr9npOiaLo" +
                        "uhRSz3l5PdeIbCBYIo4AXdpN23aBznFf43y2P8AZyG5+Jn/AATV/wCCen7Z3wO/bA+DXxf+Jnwfm8G/D" +
                        "jR4tfPiPWZ9d8NyyRRah4X1Gyt1ls7PUZbk7riaIFfKJU4LAAEiIxdzWc00f1NVqYBQAUAFABQB/I/+2" +
                        "9+w1+1r+01+23+0t4y+Dvwfv/GPhe11bTdMXxJf32laTZzPb+HtPiMdvNrt3ZrN5eArCIttxg4xispRb" +
                        "Z0Rkkj+j/8AYq+H/jn4U/sp/Av4cfErTG0Xxz4M0G30HxFpEt1bXptpYHdVi86zlnicKm0DY5AHA6VpH" +
                        "Yxk9T6hpkhQAUAFABQAUAFAEF1dW1lbXF7e3CWlnaI91d3d06xxRRRqXZ3ZyAqqASSTgCgD+T//AIKjf" +
                        "8FRrn44XOt/s9/s9629p8GrR20/xz4509mjl8VyxthoIGGCunKRyes55P7vAfKUjop07H42fC74XePPj" +
                        "R488N/DP4Z+G5/FfjTxXONP0fR9PAyxxueSR2wscUagvJI5CooLMQBUJGjdj+1H9gH9gHwH+xT4D3v5H" +
                        "iv41eK4I1+IPxBWM4UZEn9n6f5gDR2kbAZOA0rAO4GERNoxsc053Pj3/g4L0ObVv2GvDF/Fu2eGPiHoG" +
                        "uXOxQRsk0bWdNG4kjA3XY59cCv62+hni1T4tqRf26E1/wCTU5f+2n8h/TTwjqcI05L7GIg//JKkf/bj+" +
                        "S79lTxHF4P/AGof2bvFs7pFB4W8feD/ABHNJchmjVLHxDaXJLhCCVATnBzX+jXiHgXieH8dRW86FWP3w" +
                        "kj/ADd8OscsLxBgKz2hXpS+6cWf6Tlf4Yn+7ZzfjDwf4W+IHhbX/BPjbQLXxT4R8U2s2ieIfD2twpPa3" +
                        "lrOhR45EcEEEH8Oo5ruyzM8RgsRCvQm4VINOMk7NNbNM4czyzD43DzoV4KdKaalFq6ae6aP4if+Cof/A" +
                        "AS88U/sWeKbj4kfDe3uvFP7NHim68vR9Yk3z3Xhi6nf5NO1F+SYyTi3uD9/7j/vMF/9W/AHx+w/FOHWG" +
                        "xLUMfBarZVEvtR8/wCaPTdabf5NfSC+j7iOFMQ8VhU54Cb0e7pt/Yn5fyy67PXf4H/Zh/ae+LP7I/xZ0" +
                        "P4v/CDXDput6afsms6Nd7307WdOd1aaxvoVZfMhk2juGVgHQq6qw/YePuAcu4ky6eDxkLweqa+KMukov" +
                        "o19zWjum0fjfh/4gZlw1mUMbgp2mtGn8M49YyXVP707NNNJn95/7FX7avwm/be+E1p8Rfh1djTdf00Ra" +
                        "f8AET4d6hKj6joGouhPlyYC+ZBJtYwThQsig8K6ui/5A+KfhZmPCmYvDYlXg7uE0vdnHuuzX2o7p9003" +
                        "/sT4U+K2W8W5asThnaaspwb96Euz7p/Zls12aaX2HX5mfpwUAfnt/wVB/ac8f8A7JX7IHjf4r/C1baLx" +
                        "9Le6X4P8OatqsKXMOnS6nc+W915EoZJXjjVvLVwU3kFgygq37R4A8BYPiPiWlhMXf2NpSkk7OXKvhutU" +
                        "m7Xa1tezT1X4p9IHj/G8N8M1sZhLe2vGMW1dR5n8Vno2leyel7XTWj/ABr/AOCN37eX7W/7SP7XGo/Dz" +
                        "43fGi+8feDYfB+s+IotC1Cy0i3jF7bXunxRS7rG0gfKrM4xuxz0r+nfpO+EHDeRcNxxOBwqpVXVjG6cn" +
                        "o1K61k10R/Lv0XfGLiXPeJZYbH4qVWkqM5WaitU4pPSKfVngH/BSH/gpD+218Fv22vj58MPhh8fNQ8Je" +
                        "A/CWoafZ+HfDtnp+hzR2sc2h2V06q91ZSyHMkrN8zHrX2Xgd4HcKZrwpg8VisHGpWqRk5Scpq9pyXSSW" +
                        "yXQ+M8dPHTizKuLMZhMJjJU6NOUVGKjB2vCL6xb3b6nxB/w9x/4KL/9HPar/wCCvw5/8rq/V/8AiW7gj" +
                        "/oAj/4FU/8Akz8l/wCJleOP+hhL/wABp/8AyB6B8P8A/gtb/wAFD/A2rQ3+ofGG0+I2nI/nT+G/iB4f0" +
                        "Wa0mPAw0umW9jdKOOiTr+dePnP0V+CsXTcY4Z0pfzQnNNfKTlH74s9nJfpW8b4OopSxSrR/lnCDT+cVG" +
                        "X3SR+7H7Mv/AAVU8C/8FBPCt18BLzxxqP7Gf7UWtxhfAvifw7LYahpmo6jGhCCybVoHjkLt9+xnQOynE" +
                        "UzONy/yNx59HrF8GYhZhGlHMMvj8cZJxlGPXm5XdW6Ti7J6yilo/wCv+AfpE4PjTDvLpVpZfmEl7kouM" +
                        "oyl05eZWd+tOSu1pGTeq/G79qP9tX/grN+yN8Y/EnwY+K37Rmp22taMReaPrVlpXh42Gs6XK7Lb39m76" +
                        "aC0MoQ9QGVgyMAysB/Tvh/4V+HPEmWU8bhMDFwlo05TvGS3jL3919zVmtGj+XfELxW8SOGs0qYHGY6Sn" +
                        "HVNRhaUXtKPubP707p6pn5EePPHXiz4neM/E/xD8d6y/iHxl4zvbjxH4n125SGOS7vbqQyyyssCRoCzE" +
                        "nCqB7V/SWUZRhsBhaeGw8eSlTSjFa6JbLW7P5ozjN8TmGKqYnES56tSTlJ6at6t6WX3H2b4O/4Kh/t6f" +
                        "D/wh4V8B+D/ANorUtE8I+CdNsfCPhbRYNN0CRLPTtNtUs7aBWmsHdhHFGqgsxJxySa/L8z8AOD8biamI" +
                        "rYGMqlSTlJ809ZSd29JW1bvofqWV/SC4xwWGp4ehjpRpU4qMVyw0jFWS1jfRK2p/W5/wSO/aq+LP7W/7" +
                        "JR+IXxsMd34z8J+I9T+Hc3iyG1jshrdrY2NjfJfPFAkcIfN40LmJQhaMnAORX+cP0kPDzLuG+I/q2Buq" +
                        "U6cZ8t78jbkuW7u7e7dX1s/Q/0n+jV4i5lxLw39Zx9nVp1JQ5rW50lF81lZX95xdla8e9z89v28/wDgv" +
                        "Bp/w88Q658KP2O9I0/xprejvJpev/GnxOr3Ojw3CqUdNKtInT7S0bH/AI+JWEW5SFjlQh6/aPCD6Ic8b" +
                        "Rhi86lKnCWsaUdJNf35a8t/5V71nrKL0PxTxi+mDDA154PJYxqTjpKrLWKf9yOnNb+Z+7daRktT8JfFX" +
                        "/BT/wDb+8Y6nLq2q/tUeKrG5lLOYPCt1DodqN2OFt9GitYgBjj5f61/XOXeAfBuFp8kMvpNf3k5v75Nv" +
                        "8T+QMx+kBxniqnPPMaqf91qC+6CivwPfvgN/wAFr/26Pg5q1ifFXj2H45+EYnQX3hf4oWsEs7xfdfytS" +
                        "s0hu0kI+60jyKCASh5B+O4w+itwlmdN+yovDVOkqbdvnB3jb0Sfmj7Tg76V3F+V1F7assTS6xqJX+U1a" +
                        "Sfq2vJn9Y37Dv7e/wAGf26vAFz4m+H0r+HPGvhwRQ+P/hfrk0b6lpMso+WRWQKLi1kIIjnVQDghlRgVH" +
                        "+dPix4PZpwjjFSxPv0p/BUS92Xl5SXWL+Ta1P8AR3wk8ZMr4vwTq4b3KsLc9Nv3ovv/AHovpJL1Sehwf" +
                        "/BXH/lHR+09/wBgrS//AFI9Or2Po3f8lvgP8Uv/AE3M8f6Sv/JD5h/hj/6cgfyQ/wDBI7/lIv8Asw/9h" +
                        "XVP/Uc1Gv8AR76SP/JEY/8Awx/9OQP82Po1f8lxl/8Ail/6bmf2m/tyfHTxJ+zV+yb8b/jd4OsbfUPFf" +
                        "gXSVufDkGrKz2y3t7ewabDLKikF1ia4EhTI3bcZGc1/lr4TcJUM94jwmBrNqnVl71t7JOTS7Xta/S9z/" +
                        "VTxc4vr5Dw3i8fRSdSlD3b7XbUU33s3e3W1j+bb/gmB/wAFGv20vj9+3l8Evhj8W/jpe+L/AAB4wfxRN" +
                        "4h8Lzabodrbzmz8IatqcAzY2ULoI54EcBWH3QOnFf3L4++CHC2TcIYvFYPCKnWp+z5Zc021erCL3k07p" +
                        "ta9z+E/o/eOXFWc8Y4TCYzGOpRqe05o8sEnalOS2imrNJ6dj+j79sz9s/4RfsR/CmT4l/FG5kv77UpG0" +
                        "nwN4F0Zo/7T13UFUOYoBIQqRxqQ00zfKi46syK38PeF/hdmXFeY/VcIrJazm/hhHu+7eyS1b8k2v7o8U" +
                        "vFPLOE8u+tYtttu0IL4py7LslvJvRLu2k/5Kfj1/wAFwv24fi7qd6ngbxVZfAXwjI7Cy8P/AA7s7ea9E" +
                        "XIXz9S1KOadpADy0Pkqf7or/R3g/wCifwnltNe3pvFVesptpX8oRaVvJ8z8z/NrjH6WvFuZ1H9XqLC0u" +
                        "kYJN285yTd/Ncq8j44h/wCCg37c0GpHVU/a3+ITXRQQ+VN4r1iS2wrBv+PeScw545OzJHGcE1+my8GeE" +
                        "nT5P7NoW/69xv8Afa/4n5fHxq4uVTn/ALSxF/8Ar5K33Xt+B96fs7f8F3v2xPhVqenWfxen079oTwTG6" +
                        "RX9n4ktbbStbjtx1+zajpUMal++64hmz046j8g42+iJwzmNOUsGpYWr0cW5Qv5xk3p/hlE/YuCPpg8UZ" +
                        "dUjHGuOLpdVJKM7eU4pa/4oyP6yP2Tv2tPhD+2X8J7P4tfB/Up5dME7aJ4j8O63EsGp6NqccSTPaXUaM" +
                        "67gsisrozIykEMeQP8AOjxF8Ocy4XzF4PGRXNa8ZLWMo7KUX8mrNJp7o/0f8OPEjLOKctWMwUny3tKL0" +
                        "lGW7jJarZp3Taa2Z/Nn/wAFSf8AgqT+2F8Mv2wviR8GPgx8SD8K/AnwrOn6FaWmhafpdzcajcXOl22oz" +
                        "XV1NqNtcNu3XBREQqoVRwWJJ/ub6P30fuGcfwzQxuNoe3rV+ZtuUkopScUkotdrtu7bfayP4S+kL9IXi" +
                        "fL+J6+BwNf2FGhypJRi3JuKk23JPvZJWSS73Z/RH+wT8S/F/wAVP2Mf2f8A4ofEzxE3iHxh4q8Ox654q" +
                        "8S3628DXE3nShpXECRRr8qjOFA4r+KfGDIsNl/FGMwuFhyUoVLRiruystNbs/tzwcz7FZjwrgsXip89W" +
                        "dO8pOyu7vXSyPxA/bh/4L4aloPirXPht+xjo+m6pYaJLJpmofG/xZC17BeTRkq7aRZ7kRolYfLcT7hJy" +
                        "Vj27Xb+r/Cf6HtOth4YrO5Si5K6pRdml/flvfvGNmusr3S/kzxb+mRUo4ieFyOMZRi7OtJXTf8Acjtbt" +
                        "KV0+kbWb/Enxj/wUq/b28c3V1ea1+1f4zspbzb5yeDtWk8OxDawYbIvD4skj5HOxRkcHiv6ryzwL4Pwk" +
                        "VGGXUWl/NHn/GfM38z+Ts08eOMsZJyqZlWTf8suRfJQ5Uvkdn8NP+CsH/BQH4X6hBeaZ+0hrPiu1Rle6" +
                        "0j4li28R29wigDYzatHNMgO3kxSI3XnJNeXnv0deDcwg4ywMIPvTvBr/wABaT+aa8j1ch+kdxpl81KOO" +
                        "nUXapaon/4Em18mn5n9Fv8AwT0/4LVeC/2o/FPh74KfHXwvb/Cz40+I5F0zwnrPh1ppPDev3ZUkQILp5" +
                        "JrK4cjEcUjyK54EgYqh/ibxp+ixiuH8PPHYCo62FgryUre0gu+llKK6tJNfy2TZ/cHgn9KzC8Q4iGBzC" +
                        "mqGLm7Rcb+zm+2t3CT6JuSf812kfuxX8jH9fBQBBdXVtZW1xe3twlpZ2iPdXd3dOscUUUal2d2cgKqgE" +
                        "kk4AoA/k/8A+Co3/BUa5+OFzrf7Pf7PetvafBq0dtP8c+OdPZo5fFcsbYaCBhgrpykcnrOeT+7wHylI6" +
                        "KdOx+Nnwu+F3jz40ePPDfwz+GfhufxX408VzjT9H0fTwMscbnkkdsLHFGoLySOQqKCzEAVCRo3Y/tR/Y" +
                        "B/YB8B/sU+A97+R4r+NXiuCNfiD8QVjOFGRJ/Z+n+YA0dpGwGTgNKwDuBhETaMbHNOdz9Caog/N3/grl" +
                        "8OZviX/AME9P2jdMs4PO1Hwxptl8RrNgCTGnh3VbbVrpsD/AKdYJh7ZzX7l9G7O1gONMDKT92cnB/8Ab" +
                        "8XFf+TNH4V9JXI3j+CcdGKvKEVNf9uSUn/5KmfwIW1zPZ3Fvd2szW91aulzbTxEq6SIwZWUjoQRkV/sT" +
                        "OClFpq6Z/jTTm4yTTs0f6XvwM+JVj8ZPgv8J/izp0iSWnxI8O6N41TyeiNqWnxXTpjAwUZypBGQRg1/h" +
                        "LxbkU8rzTE4OW9GpKH/AIDJq/z3P96eEc+hmmVYbGR2rU4z/wDAop2+Wx6pXzx9Ec34w8H+FviB4W1/w" +
                        "T420C18U+EfFNrNoniHw9rcKT2t5azoUeORHBBBB/DqOa7sszPEYLEQr0JuFSDTjJOzTWzTOHM8sw+Nw" +
                        "86FeCnSmmpRaumnumj+In/gqH/wS88U/sWeKbj4kfDe3uvFP7NHim68vR9Yk3z3Xhi6nf5NO1F+SYyTi" +
                        "3uD9/7j/vMF/wDVvwB8fsPxTh1hsS1DHwWq2VRL7UfP+aPTdabf5NfSC+j7iOFMQ8VhU54Cb0e7pt/Yn" +
                        "5fyy67PXf4H/Zh/ae+LP7I/xZ0P4v8Awg1w6bremn7JrOjXe99O1nTndWmsb6FWXzIZNo7hlYB0KuqsP" +
                        "2Hj7gHLuJMung8ZC8HqmvijLpKL6Nfc1o7ptH434f8AiBmXDWZQxuCnaa0afwzj1jJdU/vTs000mf32f" +
                        "sb/ALV/gT9s74D+Gfjd4EtpdITUJJtB8WeFr91kuNG1qzCG5tHkQBZABIkkcgA3RujEKSVH+O3id4d4z" +
                        "hfN6mBxDUrWcZLaUHtK3TZpro01drV/7KeF3iNg+Ksnp4/DpxveMoveM1vG/XdNPqmnZPRfU1fnx+hn4" +
                        "z/8F4v+Uf3iH/safDP/AKUyV/T/ANEP/ksof9eqn5I/lv6YX/JFz/6+0/zZ+H//AAb/AH/J9erf9iF4g" +
                        "/8ATjpdf1h9Mn/kkY/9f4f+kzP5K+hh/wAlfL/rxP8A9KgfLn/BXH/lIv8AtPf9hXS//Uc06vv/AKN3/" +
                        "JEYD/DL/wBOTPz76Sv/ACXGYf4o/wDpuB/Q/wD8E0/2A/2Nvi3+w5+z/wDEX4k/s9+H/GHjfxPp2o3Wv" +
                        "+JNXhna5upItdvrZGcpKoyEjVRx0FfxX47eMXE+W8WY3DYXG1KdKEo8sU1ZXhF9u7P7a8BvBrhfMuEcF" +
                        "icVgqdStOMuaTTu7Tku/ZI9c+Pv/BEb9h/4u+Hb+DwH4Km+BHjUxt/ZPizwBd3ktsswA2C406/nlt5Iw" +
                        "R8wjEbnP3xxXzfB30reLMtrp4iqsTS6xmle3lNJST9eZeR9Lxl9E3hLM6DWHpPC1ekoN2v5wk3Fr05X5" +
                        "n8ff7Tv7N3xX/Yx+Omt/CT4hA6d4p8LSQa94Y8U6G8sdvqVhJIXs9SsZflbYxjOCMMkishwyED/AEu4C" +
                        "45y7ijKIYzDa053Uou14v7UJL5+jTTWjR/mRx/wJmXCubzweJ0qQs4yV7Sj9mcX209U009Uz+tT9hDXf" +
                        "gL/AMFVf2XfAfir9qL4YaL8VvjH8Cprn4Z+LNR8RwE3DSvHBPHeqYnRtt7AsbSfw+csm0AcV/nJ4u4PO" +
                        "PDziCtSyrEToYXEpVIqL06px/7cd0uvK43P9JPB/GZN4i8PUa2bYeFfFYZunJyWvRqWn86s305lKx/J7" +
                        "+2/4N8L/Dv9r/8AaS8C+CdFh8N+EfCXjHXdB8N6DpwKwWdnbXzxxRRhiSFVRgZNf6KeFGaYjG8NYHEV5" +
                        "udWdGDk3u20rtn+cXi1leHwPE2Pw9CChSp1pxjFbJJuyR/Xz+yP/wAE5f2HvHH7KX7MfjXxb+zX4b13x" +
                        "V4v+HvgvxR4m1y+huDPeahqHhuzu7ieQrMAXkkkZmwOpr/NXxI8buLMJxFj6FHHVI06derGKTVlGNSSS" +
                        "WnRKx/pn4a+BvCWL4cy+vWwFOVSph6UpNp3cpU4tt67tu54J/wWe+O+jfsc/sieCP2YvgFpFl8Mj8a2v" +
                        "/CsGleCoItPi0zwpYLHLqiwx2oUI15JdxxOxGXV5jksSR9j9F3hCrxPxLVzTMJOt9XtK825OVR35Lt78" +
                        "qi2l0aj0PjfpT8YUuF+GaOVZdGNH6zzRtBKKjTjZzsltzOSTfVOXXU/nV/4J4fsI+Lv28fjRJ4IsdTk8" +
                        "KfDjwdDF4g+KvjuGETPY2UrskFvbo5CNdXboyxBjhVV5CGCFW/tjxq8XcNwhlft5R569R8tOF7XfVvry" +
                        "x3dt20tL3X8QeCXg/ieMc19hGXJQprmqTtey6JdOaT0V9km9bWf9j/wu/4JcfsFfCjw5B4e0v8AZr8N+" +
                        "L2WH7Je6/8AFGxh8TajdOV2vK0usLOI3Y8/uVjVT91VHFf5j8QfSA4wzGu6k8dUp63UabdOK8rRtdf4m" +
                        "2+rZ/qFw99Hvg7LaCpQwFOppZyqJVJPzvK9n/hSS6JH58/t7/8ABD/4MfEHwN4j+IP7JPhpPhf8XdEhl" +
                        "1iD4e6bPKfD/iERKZHto4bhnFncuBiFoisRbCug3eYv7N4PfSvzTBYuGHzip7bDSdudr34eba+KK+1e8" +
                        "rapu1n+LeMf0S8qxuEqYnJ6fscTFX5E/cnbok/hk/s2tG+jSvzL+Yj9kr9o/wAa/sfftEeA/jN4ba5gn" +
                        "8JXy2HjXw2jGE6poksqxajp0ySYGZIwdm8fJKqPjcgx/e/iPwPheJskrYKrZqcbwlvyzXwyXo97bxbWz" +
                        "P4A8NuOsXwxndHHUrp05WnHbmg/ji/VbX2kk90f2j/8FUNf0nxX/wAEyP2gfFGgXi6joXiTw9oOv6LqE" +
                        "QIWe0vNd0y4hkG4A4ZHBGa/y3+j5g6mH49wVKorThUnFrs1Caa+8/1S+kRjKWJ4AxtWm7wnThJPunODT" +
                        "+4/k5/4JHf8pF/2Yf8AsK6p/wCo5qNf6K/SR/5IjH/4Y/8ApyB/nF9Gr/kuMv8A8Uv/AE3M/re/4K4/8" +
                        "o6P2nv+wVpf/qR6dX+cP0bv+S3wH+KX/puZ/pP9JX/kh8w/wx/9OQP5Sv8Agi7/AMpLf2bP+5x/9QHXK" +
                        "/0O+lH/AMkJjv8AuF/6epn+dH0V/wDkvcB/3F/9M1D6j/4OF9f8TXn7Yvw88OalPKPDOheAtO1DwxYuG" +
                        "EAkv9Z1MXU6Z4LyNbojEdo1HavgPoXYOhHhivVil7SVeSk+ukYcq+V216s/QvpsY2vLiihSk37ONCLiu" +
                        "nvTnzP1dkn6I8w/4JWeEP8Agl/r9zq91+2p4vEXxQW+VPB/hX4lSXWkeC1skVCszXtnKsUsxcsHS8kjj" +
                        "C4wj8sPf+kJmXH9GMVkdL/Z+X3pU7Sq37crV0rbOCbv1Wx8/wDR3yzw/rSk89q/7Rze7GpeNK3fmTs3f" +
                        "dTajbo9z+rDS/2Jf2AfGnhO2k8PfswfCzxB4X1WFVsPEHhjwt4al8+IHh4tQsYPMJ4++suT61/nliPFX" +
                        "jLC4lqpmGJhUi9YyqVNH5xbt8mj/RXD+E/BmLwydPL8LOnJaSjTp6ryklf5pn5Q/thf8EBPhp48C+J/2" +
                        "PfEFv8ACHxNLMW1PwD4+vNSu/DM8bksXt7lIr28tXUk/KRKhGAojxz/AET4Z/TGx+D/AHWcwdenbScFF" +
                        "VF6q8YyXn7r7tn85eJ30M8BjP3uSzWHqX1hNydN+jtKUX5e8uyR9+/8Evf2DNZ/YM+C3ibwj4y8Y2njL" +
                        "4g/EHVl8VeK7jwws40mzEFqlpBbWr3ccMsoUBmaV40yWxsG3Lfjnj94v0uMM0p1qNJ06NKPLHmtzO7u2" +
                        "7NpdEkm9t9dP2b6Pvg7V4OyqpRr1VUr1Zc0uW/KrKyUbpN9W20r3tbTX+TP/grj/wApF/2nv+wrpf8A6" +
                        "jmnV/ov9G7/AJIjAf4Zf+nJn+b/ANJX/kuMw/xR/wDTcD+hH+3vE3hr/g3/AIdU8I3M1nrB+GUWlvcWI" +
                        "JlWxv8AV1sL7G3kA2s0oZuwye1fxj9ToV/GRwrJOP1m+vdRvH/yZI/tT65iKHgwp0W1L6tbTtKVpf8Ak" +
                        "rZ/JB8F7H4Tal8VfAtj8dte1bwz8Ibi/iXx9rnge0ivdVgsACzfZ4pmVcswCs+GKKS4SQqEb/R/imtmV" +
                        "PLq0sBCM8So+4pu0W/Nr77aXejaTuv82OFaOW1MxoxzCcoYZy99wV5KPkn919bLVKTVn/bD+yX+zv8A8" +
                        "EgPHvha0sf2dvAPwy+MYigEt3F4ut7PxP4iCgLulurbxUs97AWIzhokUchQBxX+VviNxr4l4PEOWZVsT" +
                        "h9dOVunD0Tp2g/vb7s/1c8NuCPDLGYdRy2jhsRprzJVJ+slUvNfcl2R2fx5/wCCQ/7Cfxz0S/tIvgxYf" +
                        "CHxJMjLpfi/4MRR6BLaSEcN9itVFjKucZWSA8dCp5ry+EPpJ8XZTVUnipV4dY1ffT/7efvr5S9bnqcY/" +
                        "Rn4PzelKKwscPU6Spe41/26vcfzj6WPy6/Zd/4IL/FX4N/tV/Dz4q+PvjN4d1v4WfCTxDYfETw0PCiao" +
                        "uv6rc6Lex6hYx3Nrd2y29qjSxKZtlzMdoKr97cv7/4gfS/y7NOHq+Ew+FqRxFem4S5uXkippxk00+aWj" +
                        "drxjrq9rP8An3w++h1mOV8RUMXiMVTlh6FRTjy83PJwalFNNcsVdK9pS00W91/T1X8Dn9/hQB4p+0V8E" +
                        "tH/AGjPgt4/+C+u+INR8Lab47sjpcuveGJ3gurd1kWZCQrKJYiyASwsdsiEqcZyE0OLsz+Fv9qD9l/4p" +
                        "fsmfFLVPhd8UdL8m5h3XvhvxJZK507WtOLlY7u0kYDKnGGU/MjZVgCKxasdUZXPb/8Agnh+2m37FPxom" +
                        "8Xap4Wg8U+BPGtvD4X8fxw20Daxa2Kz+aJ9PuJAGV42+Z4dwSYABsMqOji7CnG6P7bPh38RPBXxY8FeH" +
                        "PiL8OvEdt4r8GeK7ZNU0LXdLfdFNE2QQQQGR0YFXRgGRgVYBgRWxytHaUAc34x8KaL488IeKvA/iS2+2" +
                        "eHfGem33hTX7P5f3tlqNq9nOnzBh80chHINd2WZjVweJp16TtOnJST7OLuvxRw5pl1LGYaph6qvCpFxk" +
                        "u6krP8ABn+ad8Wvht4g+DnxR+Ifwo8VRGLxF8OdZ1LwXq+5GjEk2nXb2pkQNn5JNm9DkgqQQSDmv91uH" +
                        "M9o5nl9DF0vgrQjNekle3qtn5n+DXEmRVsrzCvg6y9+jOUH6xbV/R7ryP7BP+CCH7Rdr8T/ANk3Uvglq" +
                        "moCXxd+z5qk2nW9rKcyP4e1yaXU7KXLHLbJzcw4Awqog7gV/mj9MLgmWA4jjjoR/d4qKd/78EoyXzXK/" +
                        "Ntn+nH0OOOI5hw3LATl+9wkmrf3Jtyi/lLmXkkj90a/kk/rsKAP5UP+Cw//AAVe0vxfY+Lv2Qf2btVt9" +
                        "X8MXW/QPjT8ULTy7iC+2PiTStMc7lMQZcT3C/eI2Rnblm/0N+jN9Haphp085zOLjUWtKm9Gu05+f8sem" +
                        "71sl/nV9J36RtPFQq5LlklKm/dq1Fqn3hDy/ml12Wl2/wCbrwf4P8U/EDxToHgnwToF14p8XeKbqHRPD" +
                        "3h7RIXnury6ncIkcaICSST+HU8V/ceZ5nh8Fh51681CnBNyk3ZJLdtn8K5ZlmIxuIhQoQc6s2lGKV229" +
                        "kkf3xf8Evv2O9f/AGJ/2WtM+GPjPU4dQ8f+LNWu/if49g0x/NtLHUtRs7SxFpDIOJBDBZRK7j5WfcVyu" +
                        "Cf8evH3xNo8VcQSxVCLVGEVThfRuMXJ8zXS7k2lula+p/sj9H7wwrcJ8PRwteSdapN1J21SlJRXKn1so" +
                        "pN7N3tofolX4oftx+M//BeL/lH94h/7Gnwz/wClMlf0/wDRD/5LKH/Xqp+SP5b+mF/yRc/+vtP82fh//" +
                        "wAG/wB/yfXq3/YheIP/AE46XX9YfTJ/5JGP/X+H/pMz+SvoYf8AJXy/68T/APSoHy5/wVx/5SL/ALT3/" +
                        "YV0v/1HNOr7/wCjd/yRGA/wy/8ATkz8++kr/wAlxmH+KP8A6bgf1vf8Ejv+UdH7MP8A2CtU/wDUj1Gv8" +
                        "4fpI/8AJb4//FH/ANNwP9J/o1f8kPl/+GX/AKcmfo7X4efuZ/NV/wAHG/w60S4+HH7OXxaS1ji8R6Tre" +
                        "p/Dqe9RQJp7LULD+040cgfMsUlk5QE/KZGx941/dX0Ic7qxx2Owd3yShGduicXyt/NSV+9l2P4O+nJkd" +
                        "KWBwOMsvaRnKnfq1JcyXycXbtd9zxT/AINwfEWpwfET9qDwksxOjanovh3xFPbsSQLmxvru2RlHQZS7Y" +
                        "H1wPSvqfpw4Km8Fl9a3vKc4/JqL/wDbUfKfQYx1RY7MKN/dlCEvmnJL8JM/GX/goFqEGp/tyftcXNsGE" +
                        "cfxE8W6e3mgA+Zaa1cWj9CeN0Zx7V/UPg1RdPhPLU/+gem/vgn+p/LXjRWVTi7M2v8AoIqr7ptP8j+7f" +
                        "9h3/kyr9j//ALJd8P8A/wBROwr/ACL8WP8Akqsz/wCwmt/6ckf6/wDhJ/ySmWf9g1H/ANNxP5pv+DjB7" +
                        "w/tJfAeNzJ/Z6+B5HtQ27yvObXrwS7e27aE3Y7Y9q/uv6Eij/YWMf2vbfhyRt+v4n8G/Thcv7ewa+z7H" +
                        "8eeV/0/A/Dr4b/8Lx8jVv8AhUP/AAlf2bfD/bv/AArf+19m/D+V5/8AZfGcbtu73x3r+sc8/sm8frnsr" +
                        "629py/O3N+Nj+SMi/te0vqXtbaX9nzfK/L+Fz0z/jNX/qqP/l2V4P8Axiv/AFDf+Uz3/wDjK/8AqJ/8q" +
                        "B/xmr/1VH/y7KP+MV/6hv8AymH/ABlf/UT/AOVDzS5+C/xzvLie8vPhP4suru6d7m6urnQtYeSSR2LMz" +
                        "M0BJYk5JPWvehxTlMYpLE0kl/fj/meDU4VzeUnKWGqtv+5L/I/ru+Pket2//BBKzs/EdtcWetad8LfAm" +
                        "l31lqsTwXMJtb7SLZY5I5FVlZFQKQwzxzzX+bPB0qT8YHKk04PE1mmtU7qbun5n+l3GcasfBxRqpqaw1" +
                        "FNNWas6as15H863/BI7/lIv+zD/ANhXVP8A1HNRr+2PpI/8kRj/APDH/wBOQP4h+jV/yXGX/wCKX/puZ" +
                        "/W9/wAFcf8AlHR+09/2CtL/APUj06v84fo3f8lvgP8AFL/03M/0n+kr/wAkPmH+GP8A6cgfylf8EXf+U" +
                        "lv7Nn/c4/8AqA65X+h30o/+SEx3/cL/ANPUz/Oj6K//ACXuA/7i/wDpmof1kf8ABQP/AIJ3/C/9vXwNp" +
                        "Wn+INRfwR8UPBS3DfD74labAs72wuADJaXkBZPtFo7KrFdysjDKMMuH/wA6fBrxqzDg/FylTj7TD1Lc9" +
                        "Nu17bSi/syW17NNaNOyt/o/40eCOX8Y4OMakvZ4infkqJXtfeMlpzRe9rpp6pq7T/kp/aE/4JDftzfs+" +
                        "zajeT/Ceb4r+ELEvJH4y+DTPrkTxINxd7KJFv4gq8sXtwo5wxAJr/Rzgv6SnCWcqMViVQqv7NX3Nf8AF" +
                        "8D8rSv5H+bXGv0Z+LslcpPDOvSX26Xv6f4V7687xt5nxR8O/jJ8dv2efEV5cfDL4jeJfhD4jt5RFrFt4" +
                        "a1DUNJkeSE48u7gjeMSAHgpKpHqK/VM74YyjOqCWKoU68GtOaMZb9YvW3qmflOR8UZxkldvC16mHmnry" +
                        "ylHbpJaX9Gj9gf2dv8Agvz+1R8ObvTtL+O2haT8ffCaFIb7UWgh0DxEkY+XdHc6bGLVyo5IktSzkDLrk" +
                        "mv5p41+hzw9joyngJywtTorucPmpPmXylZdnsf03wR9MviLAyjDMIRxVPq7KE/k4rlfzjd91uf1L/snf" +
                        "tefBf8AbN+GMPxP+DWtSXFrbyDTPFHhXXEjg1jRL4rv+z3sEbyKpZfmR0ZkcfdY4IH+ffiL4a5pwvj3h" +
                        "cbBJtXjJaxmu8XZfNNJrqtj/Qvw38TMq4py9YvBTbSdpRekoPtJXfyabT6Pc/ij/wCCuP8AykX/AGnv+" +
                        "wrpf/qOadX+qH0bv+SIwH+GX/pyZ/lL9JX/AJLjMP8AFH/03A/rs/4JxeG9B8Y/8E3P2c/CXinSYNe8M" +
                        "+J/BTeH/EOh6nGJba8srx7i3nhlRuGSRHKsPQ1/m344Y6theOcdWpScakK3NFrdNWaa80z/AEs8DMDRx" +
                        "XAmBo1oqVOdHlkns07pp+TR+FP7YP8AwQF+K/hjXdb8XfsgavbfETwRdySX1n8LfFd7DYa/pyu277Pb3" +
                        "d6UtruNOdrSyRSYwCJGyx/rjwz+mNl2Iowo5zF0qq0dSKbhLzcVeUW+yUl10Wh/IXid9DPMcPWnWyWSr" +
                        "UXqqcmozj5KTtGSXduL6avU/DH4mfBD48fs8eIILP4p/DTxH8J9ds5x/Zt54j0+904PNGSyva3LKqS42" +
                        "kq8TkcZBr+tch4syjOqLlhK9OvBrVRkpaf3luvRo/kXP+Es4ySuo4vD1KE09HKLjr/dez9U2fXfwM/4K" +
                        "zft4fAZrC10f433vxB8OWOF/wCEU+MK/wDCSW0ka8LH9ovW+2xooGFWK5QAcDivzXi36OfCGcXc8IqU3" +
                        "9ql7j9bL3G/WLP0zhH6SHGGT8qhi3Vpr7NX94vS799L0kj+iz9g/wD4LbfCv9pzxT4d+EHxo8LJ8F/i5" +
                        "4kkTSvDep2t19o8M61eucJBFLcbZbSeUnbFFLvV2wolLsqH+JvF76KmYZBh54zA1PrGGgryVrVILu0tJ" +
                        "JbtqzS15bJs/uDwe+ljl2f4iGCx1P6viZu0Xe9Ob6JN6xb2Sd03pzXaR+5lfyWf1yFABQB8x/tYfsn/A" +
                        "At/a/8Ahbf/AA2+JNh5NzD5l94M8Z2MaHUdC1EptW4t2bGVOAJYidsi8HBCsqauVGVj+Iz9qD9l/wCKX" +
                        "7JnxS1T4XfFHS/JuYd174b8SWSudO1rTi5WO7tJGAypxhlPzI2VYAisWrHTGVz6Y/4J5/8ABQzxr+xd4" +
                        "1GkaubnxX8B/FdyknjfwRG+6WzlbEZ1HThIQqXCKBvTIWZQFYghHRxlYmcLn9ofw7+Ingr4seCvDnxF+" +
                        "HXiO28V+DPFdsmqaFrulvuimibIIIIDI6MCrowDIwKsAwIrY5mjtKAP49/+C/37Ktx8P/jl4X/ag8NaW" +
                        "V8IfGu3j8PeNrm2T91beKNJtliRn2qAv2uzjQr1LPDKx61/ph9DjxCjjMpqZVVl+9w75oedOTv/AOSyb" +
                        "v2Uoo/zG+mb4dywWb081pR/dYlcs/KpFW/8milbu4yZ+cH/AATg/a6uP2Mv2pPBfxOv5pm+HmthvA3xY" +
                        "0603MZdB1CRPMmVB96S1lSO4QDltmzIDGv3Dxw8No8UcP1cLFL28ffpt/zx2XpJXi+179D8M8DPEuXC3" +
                        "ENLFSb9hL3KiX8kt3bvF2ku9rdT/QY0rVdM13S9N1vRdQh1bRtZt4dV0nVdNlSa3uba4jE0UsUkZKujo" +
                        "wZWBwQciv8AGXEYepRqSpzi4yi2mno01o010aZ/tNh8RTrU41KclKMkmmtU09U0+qa2P5bv+Cuf/BXP+" +
                        "1P+En/ZV/ZV8T/8Sv8AfaB8YPjBoE3/AB9dYptK0qaI/wCq6rcXCn5+UQ7NzP8A6A/Ru+jd7P2ebZtT9" +
                        "7R0qTW3ac136xi9t3rZL/Pb6S30lvae0yjKKnu6xq1YvfvCD7dJSW+y0u3/ADV+D/B/in4geKdA8E+Cd" +
                        "AuvFPi7xTdQ6J4e8PaJC891eXU7hEjjRASSSfw6niv7pzPM8PgsPOvXmoU4JuUm7JJbts/g/LMsxGNxE" +
                        "KFCDnVm0oxSu23skj+3b/gl5/wS88LfsWeFrf4kfEi3tfFP7S/im18vWNYj2T2vhi1nT59O05+QZCDi4" +
                        "uB9/wC4n7vJf/KTx+8fsRxTiHhsM3DAQei2dRr7UvL+WPTd67f6y/R9+j7h+FMOsVikp4+a1e6pp/Yh5" +
                        "/zS67LTf9fq/mo/poKAPxn/AOC8X/KP7xD/ANjT4Z/9KZK/p/6If/JZQ/69VPyR/Lf0wv8Aki5/9faf5" +
                        "s/D/wD4N/v+T69W/wCxC8Qf+nHS6/rD6ZP/ACSMf+v8P/SZn8lfQw/5K+X/AF4n/wClQPlz/grj/wApF" +
                        "/2nv+wrpf8A6jmnV9/9G7/kiMB/hl/6cmfn30lf+S4zD/FH/wBNwP63v+CR3/KOj9mH/sFap/6keo1/n" +
                        "D9JH/kt8f8A4o/+m4H+k/0av+SHy/8Awy/9OTP0dr8PP3M/nt/4OLf+TYPgf/2Pq/8AqPajX9n/AEJf+" +
                        "R/i/wDrx/7fA/ir6cH/ACT+E/6//wDtkz40/wCDcf8A5LX+0f8A9itpX/p2NfqH03v+RVgf+vsv/ST8s" +
                        "+g1/wAjbHf9eo/+lH5pf8FWvhzrnw1/b+/aRsNatpIo/FWuN8RtDupVKpc2OvwpqaPGSAGVGleIkdGRh" +
                        "1Br91+jxndHHcG4GUH8EORrs4Pl19bJ+jTPwb6ReR1sBxnj41F8c/aJ91Nc2no216po/o1/4Jc/8FRv2" +
                        "aPGP7P3wc+AnxN8f2Pwm+Lnwt0PTPhnFp/jmVNP0zV7TRraPTbOezv5ttuXeGOMNDI6yb921WX5q/iL6" +
                        "QH0f8+wuc4rMMLRlXw1acql4e9KLk3KSlFe9ZNuzSata7T0P7k+j59IPIcVkuFy/FVo0MTQhGnab5YyU" +
                        "UoxcZP3btJXTad72TWpzX/Bez9mPUfjN+zv4G/aK8CWx1zUvgNJd3XiNNKAm+0eFNbSBprsGLcXW1lt4" +
                        "pMjgRvI5OBXf9D/AI9hled1stxD5Y4m3LfS1SF7R8uZNrzkorqcH0xuAJ5rklHMsOuaWFbcra3pzteXn" +
                        "ytJ+UXJ9D+ff/gmp+3jq37CPxwn8U3+nTeI/hR8QIbfw38VvDGnlBctbQzGS3vrXfgG4tDI5RGIV1d0J" +
                        "UsHX+y/HXwhp8X5SqUZKGJpNypye12tYv8AuysrvdNJ62s/4u8BvGGpwfm7rSi54aqlGpFb2T0kv70bu" +
                        "y2abWl7r+2D4U/trfsnfGrw1Z+Kvh3+0D4W1awu41uZdPv9Ys9O1O03/wAN1Y6g8NzA2e0ka57ZHNf5W" +
                        "8ReFfEeVV3SxOCqxa6qLlF+kopxfybP9XOHPFfhvNcOq2GxtKUWtnJRkv8AFGTUl80j1D/hePwU/wCiw" +
                        "eFv/Cg0n/4/Xgf6p5r/ANA1X/wCX+R9B/rdlP8A0FUv/A4/5noel6rpeuafaatoupW+saVfp59jqelzR" +
                        "3FvMhON0ckRZWHHUGvFxGHqUpuE4uMlumrNeqZ7eHxNOtBTpyUovZp3T9Gj4M/4KpaFe+Iv+Ce/7Uun2" +
                        "Cl57fw6uuyBQW/c6XqVrqcxwPSO3Y57V+v/AEe8ZChxpl8pbOpb5yi4r8Wfjv0iMHOvwVmMY7qnf5RlG" +
                        "T/BM/je/wCCYPxQ8M/Bz9vP9nDx94y12Hwz4ZstXvNA1bXtSKJbWqa7ot7oKvM8hCxx7rwB5GICLliQB" +
                        "mv9OfHzIK+Z8H47D0YOdRwUklu+SUZ6d37ui6vQ/wAvPo/8QYfK+McDiK81CmpuLk9lzwlDV9F72r6LX" +
                        "of2Bf8ABWyWKf8A4Jx/tNTwSrNBNpOkywzRMGR0bxFpxDKRwQR0Nf5pfRwi1xxgE9+aX/pEz/Tb6Sck+" +
                        "Bse1qnCP/pyB/Kd/wAEXf8AlJb+zZ/3OP8A6gOuV/ob9KP/AJITHf8AcL/09TP86vor/wDJe4D/ALi/+" +
                        "mah++X/AAVq/wCCqHxX/Ym+I/w++DPwW8IaLfeJvEmgx/EnxF4q8eQXV7BFZXWpXmmW9va29pc2uJN9h" +
                        "K0juzDaVAXOSP49+jl9HvLuK8DWxuOqzVOE/ZxjBpO6jGTbbT0tJWStre76H9k/SS+kRmXCeOoYHA0oO" +
                        "pOHtJSmm1ZylFJJOOt4u7d9LWXU9D/YX/4LM/s//tI+GdL8PfHLxHo/wE+OMR+xalpOvXLWPhzVXyAs2" +
                        "nX2oOUj8wkD7PPL5gbhTIPmrxPFv6L+c5HXlUwEJ4rCbppXnHynGKu7fzRVratR2Pb8IfpS5LnuHjTx9" +
                        "SGFxezUnaEvOEpOyv8Ayyd76Jy3P0O+L/wM/ZX/AGhfDB1j4y/D3wh8SvDixZt/F/iK30+ZreJsR7oNT" +
                        "UrJCDkDdHKvbmvxbhri3iHJcRyYKvVozv8ADFyV35w2fzTP23ibhHh3O8Pz46hSrQt8UlF2XlPdfJo/j" +
                        "x/4KlfAT/gnf8Edb0Sz/Y9+LVx4k8eXd60XjL4a6FqUfibw5pOniGQ701Ys8iXCyhUNu007YJLGMqA/+" +
                        "mX0fuMONc2pTlnOGUKKXu1HH2c5SuvsbONteZRitrc19P8AMP6QvBvBGU1YRyXEudZy9+mpe0pxjZ7T1" +
                        "aley5XKT3vy21+lv+DdK78UJ+1D8brG0af/AIQq58Avd+IFjB+zHVIfEOmpp5kP9/ypbvZ7bq+E+m1Tw" +
                        "74fwknb2qr2j35XCfNbyuoX+R979B+piFxBi4xv7J0Ly7cynDlv52c7fM+C/wDgrj/ykX/ae/7Cul/+o" +
                        "5p1fr/0bv8AkiMB/hl/6cmfjv0lf+S4zD/FH/03A/qU/ZW+NVt+zn/wSA+GHxxutFfxGvwz+HknieDQI" +
                        "ZRB9suIp5lghaUhtiPIyh32kquSASMH/P7xC4WlnfiXiMAp8ntsRy829k0ru3WyvZdX1R/oT4d8VxyPw" +
                        "yw+PcOf2OH5uXa7Tdlfom7Xetl0Z+Vv7M//AAcJeP7j4pR6d+1d4E0K0+E+vO0H/CRfCnT9Si1DQHc/J" +
                        "K8F1e3Zu7dekiqBKBll3keW39B8efQwwccv5sorTeJj9mpKPLPyuox5Zdm/d6O26/njgH6auNlmPLm9G" +
                        "Cw0vtU4y5odm05S5o90ve6q+z/pB+H/AMaf2cf2nPChb4f/ABB8LfGTwvrUW290ayurDUtyMu4x3VjNu" +
                        "kjYDlo5oww7iv4eznhbPMhxH+0UauHqRejacfnGS0fqnY/ujJeKsiz/AA3+zV6WIpyWqTUvlKL1Xo0mf" +
                        "k3+3l+w5/wSH0Hw34g8UfFjU9E/Zi8VxxS3drc/CPUrfT9UnlUEiO38OQi4huMt95YbQNj+NRyP6L8IP" +
                        "FnxJrV4UsJGeMp3S/eRcorzdV2cfVzt5PY/m/xi8I/DOjQnVxkoYKpZteykoyfkqSupeihfzW5/GxdNb" +
                        "WWt3LeG765ns7S6dtB1OeIWl48ccx8iVo4ZZRHIQAxVZG2ngMcZr/TympSpL2qSbWq3W2qu0rr5K/Y/y" +
                        "6qOMKr9k20n7r2e+jsm7P0bt3P9NH4dSeIJfh94El8WLInimXRtLk8SpeLtmGoNZRG4Eg7N5m7I9a/wc" +
                        "ztUVjayo29nzy5bbct3a3yP98cjlWeCoutf2nJHmvvzWV7/ADOyrzD1AoAKAPmP9rD9k/4W/tf/AAtv/" +
                        "ht8SbDybmHzL7wZ4zsY0Oo6FqJTatxbs2MqcASxE7ZF4OCFZU1cqMrH8Rn7UH7L/wAUv2TPilqnwu+KO" +
                        "l+Tcw7r3w34kslc6drWnFysd3aSMBlTjDKfmRsqwBFYtWOmMrn0x/wTz/4KGeNf2LvGo0jVzc+K/gP4r" +
                        "uUk8b+CI33S2crYjOo6cJCFS4RQN6ZCzKArEEI6OMrEzhc/tD+HfxE8FfFjwV4c+Ivw68R23ivwZ4rtk" +
                        "1TQtd0t90U0TZBBBAZHRgVdGAZGBVgGBFbHM0eVftXfs3+Df2svgL8QPgX42/0aw8X2udH1yNA82latb" +
                        "MJ7K9iGVJMMyqWUEb03IThjX23h3xxiuHM4o4+hq6b1XSUXpKL9V16Oz3R8R4jcC4XiTJq2X19FUWj6x" +
                        "ktYyXo+nVXWzP8AO/8AjR8H/HfwC+KXjb4PfEvR30Pxr4CvpNE1mycHY+0B4p4WIG+GeNlliccMjKw4N" +
                        "f7U8LcS4POMvpY3Cy5qVWN0/wA0+zTumujTR/iTxVwxjMmzGrgsVHlq0pWa/JrumrNPqmmfYvh3/gp5+" +
                        "0/4V/Y+n/Y60HxL/Z/haSaWwtvHcMkw1228NzxkSaLBMD8luzk/OPnCExAhOK/Msb4CZBiOJlnVSnepa" +
                        "/JpyOa2qNdZW6bX956n6fgfH/iDDcMPJadS1O7XPrzqm96afSN+u9vdWh8H+D/B/in4geKdA8E+CdAuv" +
                        "FPi7xTdQ6J4e8PaJC891eXU7hEjjRASSSfw6niv17M8zw+Cw869eahTgm5Sbsklu2z8eyzLMRjcRChQg" +
                        "51ZtKMUrtt7JI/t2/4Jef8ABLzwt+xZ4Wt/iR8SLe18U/tL+KbXy9Y1iPZPa+GLWdPn07Tn5BkIOLi4H" +
                        "3/uJ+7yX/yk8fvH7EcU4h4bDNwwEHotnUa+1Ly/lj03eu3+sv0ffo+4fhTDrFYpKePmtXuqaf2Ief8AN" +
                        "LrstN/1+r+aj+mgoAKAPzB/4LAfBD4l/Hz9h/x34P8AhN4YuPGfi/R9S0fxnH4V0dDLf3trptyXuEtYl" +
                        "+aaZUcusS5Z8FUDMQp/ffo08V4DJ+LKNbGVFTpSjKHM9k5LS76K+l3ot3ZXZ/P/ANJvhLH5zwlWo4Om6" +
                        "lWMoz5VrJqL15V1dtbLV2sruyPxs/4IPfsp/tAeC/2mfGvxj+IHwq1z4d+A9D8Kah4Pj1Tx3pl5pL3up" +
                        "6lf2MscNtFfxxPKFjt5HkdVKrgAkFhX9O/S88Q8mxWQ0sFh8RCrWlVjK0JKVoxUk22m0tWkk9XrbZn8u" +
                        "/Q98Os6wmf1cbicNOlRjSlG84uN5SlFpJSSb0Tba0Wl90fPX/BXr9jL9pO6/br+J3j3wd8G/EnxD8F/F" +
                        "1tJ8QeD/EHgPRdR1eF5I9Hs9OuLaY6fDKIpo7iBwEYglCrDrx9p9GvxQyKPCOHw9bFU6VWhzRlGc4xfx" +
                        "SkmuZq6aa1XW66HxP0mPCzPpcX4jEUMLUq0q/LKMoQlJfDGLT5U7NST0e6s+p/UT/wTz+EXjL4EfsW/s" +
                        "9/Cz4hWI0vxr4a0Mz+I9IyGeyudSvrjVTbSFSR5kIuRHJgkblOCRzX8A+NPEuFzfinG4vDPmpTn7r7qK" +
                        "UbrydrryZ/oL4J8M4rJ+FcFhMSuWrCHvLs5Nys/NXs/NH2bX5efqZ+Kf/BdL9n/AOLPx2/ZV8HS/CPwb" +
                        "e+PtT+G/iu38X+IvDfhmCW81NtNk0u8095re2gVpJvLknTeqAsFJbG1WI/qf6JPGWW5RxDVWMqqlGtSc" +
                        "Yyk7R5uaMrNvRXSdm9L6btH8p/S84MzLOOHaTwdJ1ZUaqlKMVeXLyyjdJauzaulrbXZM+Ev+Dfz4QfFr" +
                        "4a/GH9oK++Ivwu8ReAbLU/DWmWmnXnjXRNT0qK4lTVC7JG99DEHYDkgEnFfrv0yeJctx2WYKOGxFOq1U" +
                        "k2oTjK3u9bN2Px/6GHDGZYDNMbLE4epSUqcUnOEopvm6XSufrz/AMFC/wDgm78Lv29fCemz6lqJ8BfGP" +
                        "wbby2fgT4mWUAuAIHfzjY38G5DPas5LKAwaJiWQ4Z0f+bPBbxyzDg/EyUY+1wtR3nTbtrtzRfSVt9LSS" +
                        "s9k1/THjZ4FZfxjhouUvZYqmrQqJX035ZLrG+2t4t3W7T/kW/aF/wCCWP7bf7Omtz2OufBfUviJ4eMnk" +
                        "ab45+DttdeI9MuVJwHZbGI3Nvk8YuYYznpnIz/pHwX9IPhTO6SlTxUaU7awqtQkvvfLL/t2TP8ANPjb6" +
                        "PHFmR1XGphJVoX0nSTqRf3Lmj/29FH9TH/BGf4SfG34cfsPQ+C/2jPD9/pT63r2s6j4K8C+PYmF1YeFL" +
                        "2ys4UtZ7O7XfCklyl1KIZFB2yZIAbFf59/Sg4kyrHcWOvls4y5YRU5w2dROT5lJaNqPKuZdV5H+hf0Wu" +
                        "Gs2wPCSoZnCUeapJwhPdU2orlcXqk5c75X0e2p+Yv7dn/BBfxTHr+tfEr9iiS31fQtUll1K++BfiG8is" +
                        "7qwkkbeU0m8vGSGSDk7YriRGQDAeTOB+9+Ef0v8O6MMLnl4zjZKtFXT/wAcVqn5xTT7Lr+AeL/0O8Qq0" +
                        "8VkVpQk23Rk0mv8Eno15Saa7vp+FfiT9i79r3wjqk+jeIf2YPH2n39uSpUeEtcmikAO3dFNBbPHImRwy" +
                        "MQfWv63wPilw1iaanTzCg0/+nkE/mm7r0aufyHjvCvibDVHCpl9dNf9OptfJpWa807GB/wyt+0//wBG4" +
                        "ePf/CP8Q/8AyJXZ/wARCyD/AKDqH/g2H/yRx/8AEO+IP+gCv/4Kn/8AIn9Uv/BAv4N/tG/Cb4RfG+b4y" +
                        "+Gda8DeA/FWraPdfC3wf44t7nT7lLq2t7xNVvI7O8SOWOK4ElqocgBzGSOhJ/z3+mJxPkeY5lhFgqkKl" +
                        "aEZe0lBqSs3Hki5K6bVpu3S+p/oh9DXhfPMtyzFvHU50qM5xdOM04u6UueSi7NKV4K/Xl0P3e8S+HND8" +
                        "Y+HPEHhHxPpketeGvFVld+HPEOj3gJhu7G+ga1nhcAg7ZI3ZTz0NfyHgMdVwteFalLlqQalFrdNO6a9G" +
                        "f2Dj8DRxVCdGrFSpzi4yT2aas0/VaH8Lf7b3/BJv9pD9l/4kalH4A8A618Zfgzrt3PJ4A8ZeBtPudXvI" +
                        "LZmLx2mqW+nxPJBcxJhTIUEUv3kOdyJ/rb4UfSLyPP8DF4itDD4qKXPGclFN9ZQcnZxfa/NHZ9G/wDIj" +
                        "xZ+jhnvD+PksNRniMLJvknCLk0ukZqKupJdbcst090v26+Dv7MH7VXiP/giV48+AfjfQ7+T4veIbG+1H" +
                        "4bfDvxWzw6rZaLaaxa6lZ6ZIt2QYpXW1kMELkbBIkZ2YIX+UuJuPuHqHitRzChOP1aEkqk46xc3FxlNW" +
                        "3S5lzNb2bV93/WXC/h/xFX8J62XV4S+szi3ThLSSgpRlGDvs3yvlT2uk7bL8yv+CNX7Hn7Suhft2/D74" +
                        "n+Mvgx4j+H/AIJ+EVv4ivPFeuePtHv9Gi87UfDmoaDBbQHUYofNmMt4rFEyVVSTgYr95+k94mZFW4RrY" +
                        "WjiqdWrXcFFQkpO0Zxm2+VuytHd7tpI/AvoueGOfUeMKGLr4WpSpUFNyc4ygryhKCS5kru8tlsk2z+ir" +
                        "/goL/wTq+F37engjTrbWr4+B/ix4OjmT4f/ABNsIBO8CS/O9new7k8+0d8Nt3Bkb5kYZdX/AIn8GfGzM" +
                        "OD8XJwXtMNUtz027X/vRfSSXya0a2a/t/xp8D8v4xwkVUfssTTvyVEr2v8AZkusW9e6eqe6f8hH7Q//A" +
                        "ASv/bb/AGctT1CPXvgzqPxA8LWZZrfx/wDCGC48Q6XNCM/vXWzi+0268c/aYY/yIJ/0o4K+kHwpnlOLp" +
                        "4qNKo/sVWoST7avll/27Jn+Z3G30eOLMjqSVTCyq019uknOLXfRc0f+3oo+H/8AhXfxA+1fYf8AhBtY+" +
                        "2+Z9k+x/wBmXvm+bu2bNnl53Z4xjOa/WP7awfLze2hbe/Mv8z8k/sTG83L7Gd9rcrvf7j7S/Z9/4Je/t" +
                        "s/tG6lp0fhf4J6p4M8M3zKZfH3xWt7jw9pEULf8tla+jWe4Tt/o0Upz24OPy3jPx+4UySEnVxcalRfYp" +
                        "tTlfto7Rf8AicT9V4L+j7xZnlSKpYSVOm/t1E4Rt31V5L/CpH9kn/BP/wDYO+H/AOwb8JbrwX4d1E+Lf" +
                        "Hni6aHWvib8Q7m3S3k1K6hjMcMMMYLGO0tw7eVGzMcs7E5Ygf5ieMni9jeL8yVepH2dGmmqcL35U9231" +
                        "lLS7stkuh/qJ4MeD2C4Oy10KUvaVqjTqTtbma2SXSMdbK73b6n8yX/BW39jT9p7Uv27/in428KfBLxJ4" +
                        "+8I/FufSta8EeIfAOjahrNtcY0mz06SCRtPilEU6TQspjkwSMMMqwNf3n9HDxPyCnwhh6FbF06VSgpKc" +
                        "ZyjFr3pSTXM1dNPdea3R/Av0k/C3iCpxhiK9HCVKtKu4uEoRlJP3YxafKnZpp6PyezP6kf2QfgJeeC/2" +
                        "G/g1+z18bPDVrf3MXg2Lwd8SfBuo+XdWxXUYJDd2M2wsj7VnMT7SVJBwSMGv8/vErjCOK4txWY4Go0vb" +
                        "OVOS0futcsl1W1117n+hHhlwbLC8I4XLcdTTfsVGpB6r3k+aL6Peztp2P5z/wBtT/ggx8XvAet6343/A" +
                        "GRJV+Knw7upHvoPhjqt1FbeJtJR2LGGCW7ZIb6GMfdYyJNjC7JGBc/234WfS+y3GUoUM4/cV1p7RK9OX" +
                        "m0ruDfXRx63itF/D3it9DvM8HWnXyb9/Qbv7NtKpHyTdlNLo7qXS0nq/wAPvGfwE+OXw61N9F8ffBzxT" +
                        "4L1aMlDp/ijQNVsZTjuouYE3DuCMgjkV/WGV8YZTjqfPh8VSqR7xnF/kz+Ss14OzfA1OTEYWrTl2lCS/" +
                        "NGp8P8A9mn9ob4rajDpXw3+B/ivxrezP5OPD2gancRxnIBMsqQ+XGoyMs7ADua58546yXLoOeJxdKmv7" +
                        "04r7le7+R0ZLwHneYzUMLhKtR/3YSf3u1l8z+ir/gm9/wAEQ/F/g7x34U+O/wC2FFZ6fJ4RuLfxH4O+B" +
                        "9hNb6i8l/Awlhm1ieEyW/lxOA628TPvOPMYKGjf+J/HH6V2GxWEqZfk137ROMqrTjo9GqadndrTmaVui" +
                        "bs1/b/gX9EzE4XGU8wzqy9m1KNFNS95ap1Grxsnrypu/VpXT/qAr+BD/QIKACgAoAKAPmP9rD9k/wCFv" +
                        "7X/AMLb/wCG3xJsPJuYfMvvBnjOxjQ6joWolNq3FuzYypwBLETtkXg4IVlTVyoysfxGftQfsv8AxS/ZM" +
                        "+KWqfC74o6X5NzDuvfDfiSyVzp2tacXKx3dpIwGVOMMp+ZGyrAEVi1Y6YyufU3/AATl/wCChfif9jDxx" +
                        "JoXiU3Xib4C+MplPjDwpC5eTTLltqDU7BG4EqqAJYxgSoMH5lQq4ysTOFz+0DwR438JfEnwl4f8eeA/E" +
                        "Ft4p8H+KbaPV9A1/SJBJb3NvIOGU8EEEFWVgGVgVYAgitjmaPyM/wCCpX/BO3wz+3f8MbH4z/BG60+8+" +
                        "O/gnT5W8KaxpM8Etn4u0mAyS/2W9zE/leYHLG1mJ2q5KOQrFk/pr6OnjrPhfGfVcU28DVev/TuT050u3" +
                        "8yW6V1qrP8AmH6R/gNDinB/WsKksdRjp/08iteRvo/5G9E3Z2Tuv4yNP+EPxT1T4kw/Byx+HeszfFae+" +
                        "Hhpfh02nXSayt/naYHtJEWRHHVgyjA5OBzX+pNbiXL6eBeNlXh9XUebn5ly2782z+R/lXR4ZzGpj1go0" +
                        "J/WXLl5OV8/N25d0/XY/tV/4Jef8EvPC37Fnha3+JHxIt7XxT+0v4ptfL1jWI9k9r4YtZ0+fTtOfkGQ";
                    resourceString += "g4uLgff+4n7vJf8Ayx8fvH7EcU4h4bDNwwEHotnUa+1Ly/lj03eu3+rH0ffo+4fhTDrFYpKePmtXuqaf2" +
                        "Ief80uuy03/AF+r+aj+mgoAKACgDwn9pn476T+zJ8DvH3x21/wxqPjHQvh3BbaprOgeE/s51CS2nvoLJ" +
                        "5IhdyRRkQibzX3OPkVsZOAfruA+EKmfZtRwFOpGnOq2lKV+W6TdnZN62stN2j4/j7jClkGUVswqU5VIU" +
                        "km4xtzWbSurtLS93rsmaPhH45+B/F3wA0D9pCCeTTvh3rnhOD4xSS3oTz7TSpNKGryCVUYqJIo8hwDgM" +
                        "CM1hmXCWLw2czyxq9eNV0tNnLm5Vbyb28joyzi7CYnJoZmm1QlSVXXdR5eZ380t/M8W/Yg/bd+G37dnw" +
                        "08S/Er4b6BqnhW18Ka3L4I1bQPGQsxerLHZW18kwFjPOnlSLc7VJYHcrDHHP1Xiv4U47hHH08LiZxm5w" +
                        "5043ta7VtUndW18mj5Twl8WcBxhgKmKwsJQUJuDjO172Tvo2rO+nmmbPwY/a+8E/HT4/wD7RXwE8F+Gd" +
                        "UN1+zTcWGieN/HN59jGkz6jfeYotbbypnlLo9vOr70XBjPqK5eKPDXF5Rk2CzCvUjbGJuEFfmUVbV6Ws" +
                        "04tWb3OrhbxNwmb51jsuoU5XwbSnN25XJ30Wt7pqSd0tmfWtfnB+khQAUAFABQAUAfCP/BRH9sfUv2G/" +
                        "gFZ/GjSvAcHxFurrxBp3gk+H9Qv5NNjVL62u7gy+bHBcHK/ZsbdvOevFfrvgp4Y0+Lc4eBnWdJKnKfMo" +
                        "82zirWuu/c/H/G7xQqcI5MsdCiqzdSMOVy5d1J3vZ9ux93V+RH7AFABQB89ftVftF+F/wBk34C+PP2gf" +
                        "Geh3/iTw14A/sv+0tF8MC3N9N/aus2miR+V9rkij+WS8Vmyw+UHHOBX2nh7wTiOI84o5dQnGFSrzWcr2" +
                        "XLGU3eyb2jbbc+K8ROOMPw3k1bMa8JTp0uW6ja75pxgrXaW8k99j5W+If8AwUY1bwbceDn8LfsSfGj4x" +
                        "aD418N6D8SdM8XfCbwjLrGlLDr2npqCWrXNu5QzwrIFlVSQD3NfoWS+CVPFKr7XNcHh506k6bjUqcsrw" +
                        "k43s9bO2h+dZ3441MK6XsspxmIhUpwqKVKlzRtOKla60ur2fmeDfD//AILM6Z8WdCfxT8K/2Evjl8S/D" +
                        "MdxJpUniP4f+E49ZsFuoVV5ITcadPNGJFDqWXdkAjI5FfX5z9F+pl1b2WLzfBUalr8s6nK7PZ2kk7abn" +
                        "x+S/Slp5lR9rhMnxtane3NClzq63V4tq+q0P2b0+6a+sLG+a1ksmvIYrprK8XZNCZED7JF7MucEetfy9" +
                        "Wp8k3G97O11s/Q/qWjU54KVmrq9nuvU+Mv+Cf8A+1rqP7a37O2m/HLVPBEPw+u7/VtU8Nnw7YXz6jGq6" +
                        "dKsYk86SGAkvu6beK/UfGTw4hwrncsBCq6qUYy5muX4ulrv8z8t8GPEmfFeSRx86KpNzlHlT5vh63st/" +
                        "Q+2a/Kj9XCgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAPmP9rD9k/4W/tf/AAtv/ht8SbDybmHzL7wZ4" +
                        "zsY0Oo6FqJTatxbs2MqcASxE7ZF4OCFZU1cqMrH8Rn7UH7L/wAUv2TPilqnwu+KOl+Tcw7r3w34kslc6" +
                        "drWnFysd3aSMBlTjDKfmRsqwBFYtWOmMrl34bftgftDfCP4QfED4F+APiNd6D8OfiRj+3NJgOZbff8AL" +
                        "cfYpj89t9pT5J/LI3rwaLg4o+1P+CZn/BQv4t/s1eKNM+CVt4K1D41/Dbx9qUUOk/DvQGL61p+pXbiNp" +
                        "NJEmUbzfvSW7lUZhuDRkuzOMrEzhc/sds4YLg2+szaT/Z+q3NtHDMLtbc3cMZ/e+RJJA0inYxOQrsuck" +
                        "E9a6fay5eW7tvbpfucXso83NZc1rX627GjUGgUAFABQAUAeZ/Gn4baf8Y/g/wDFL4S6qUXT/iX4e1jwL" +
                        "czTAkRDVdPlshJwCQUMgYEcggEc173C2eTyzM8PjIfFRqRn/wCAyTt87WPA4qyKGaZZiMHP4a1OUP8Aw" +
                        "KLV/le5/NZ4F/aM8Sab/wAEM/FfwmDSR/F6y8U3v7EVnolwQt295retC9ezZSeSNMu5oVx/cx2Jr+6c3" +
                        "4IoVPFqnjP+YZ0li2+loQtzf+DIqXz9D+EMo44r0/CKpg9frSqvCJdbzndx/wDBcnH5eTPpP9i6w8Pf8" +
                        "E+f20f2zf2dtUuhZ/Dey+F3hT9oXQJmHlpPB4P0CGy1aeMvjLyyzzs5PLeXuPQ18L4pVq3GfC2V5lBXr" +
                        "vE1KMvJ1ZtwT8klFLtex934V0aHBXFWa5ZN2oLDU68fNUoJTa823Jvva54b+z5+0J4t/Y0/4JseMv2uV" +
                        "02yvv2h/wBvD4narqfgk+J38u1hvNVu7q3iubvzWTNvb/Yru6VmIVjKgYhWr6zjPgvDcUcdUsn5msFlm" +
                        "Gip8u7UUm1H+9LmhHTVcrsro+R4K41xPC3AdXOeWLx2Z4mThzbJybScv7seWctdHzK7szt/jT8bP2iv2" +
                        "Q/hvov7TGif8FOPDP7V3irw5e6TJ8ZP2ep5PCJ0vVbLUr2G0nj0aLSZmuIjA8yjdGitsDSnaFMZ8rhbh" +
                        "XJOJcdPK6mQVMDTmpeyr/veaLim06jkuV3SejbV7R1bUj1uKuLM84ZwMM0p8QU8dUg4+1ofuuWSk0mqa" +
                        "i+ZWbWqSdry0ScX/RH4O8U6X458IeFfGuhuZNF8YabY+KdHkkxua11C1S7iJ2kjJSQdDX8U5nl9TCYmp" +
                        "QqfHTk4v1i7P8Uf27leY08Xhqden8FSKkvSSuvwZ+Dnw38Zft+ftdftR/tv/AfwL+06/wAD/hF8D/Gl/" +
                        "Yn4gWvh/TdW1qCC5nubXTdG09ZBaqsKi0lmnmMhlGEXcA3P9e55lfB3DfD+U5hiMB9ZxOJop8nPKMG0k" +
                        "51Jb6+8lFW5d3bQ/jzIs04z4m4hzfL8PmH1bDYas1zqEZTSbahTjtp7rcnfm2V9Tl/2dviB/wAFJP2iv" +
                        "iN8cf2G9Z/ab074dX/7Luq3Vt8QP2m9E0Czv/FOv2FzOYNJtILV3ggiDiGSaW4BEwXYjEsGL+hxtk3A2" +
                        "SYHCZ9DASqrGxXJh3NxpwaV5yb1btdJR1je7WlrefwRnXHeeY7F5BPMI0XgpPnxCgpVJpu0IqOiV7NuW" +
                        "krWT1vf65/4Jx/tAftAXvxl/aq/Yx/aZ8bw/FXx7+zRe6dc+FfirDaR2d1rOi6krlftUduNgdEMDrktJ" +
                        "+8ZWZtm4/m3jfwbk0Mry7O8rpOhRxilzU73UZx/lb11fMui91NJXsfpXgZxpnU80zHI81rKvWwbjy1LW" +
                        "c4S/mS0ulyvq/eabdrnyx+1d4n+P/7O/h/x7471b/gsTok37QngW2u/F2k/s+T6P4N02xv4bONrgaV/Z" +
                        "cc803nTRrshkliJkfjAJ3L+heHeAybO61HDw4Zn9SqtRdbmqyab05+eyVk9Wk9F6Wf554jZhnWSUa2In" +
                        "xRD67STkqHLSipJa8nJdu7WibWr063XD/8ABT347XX7TX/BHf4BfHTUdMh0bV/iF4k8Nalr2mad5n2aL" +
                        "Ubez1ixuxCJiWERngcoGJIXAJbqfW8A+EY5D4m4zARk5RpU6iTe7i3Tcb262av59EeR9IDjCWf+GGCzC" +
                        "UVGVWpTbS2Ukqila+trp28ur3PsXS/2hvjt+3l+1JP4P/ZT+IV18Lv2Ov2fr6TSvjJ8ePDltp1xdeM9e" +
                        "QK7aTpEmoxXKeSqFf3yJwrGQkhoA/5jiOC8o4Q4fVbNqKrZnio3pUZOSVKH881Fp3v9lvdculptfqGH4" +
                        "2zjjHiF0MoruhleFlarWiot1Z/yU3JNWt9pLZ82t4J8V8dP2p/iN8df2yviT+y34D/as0T9jT4Mfs/WN" +
                        "ifif8UdQm0KPxD4i1/UoROun6a2vSoscUAJEjxgMrI24sHQV6vCPh7gco4YoZriMunmGKxUn7OmlPkhC" +
                        "LtzT5Fq30T0aatazPJ4v8RMdnHFNfKcPmMMvwuFivaVG4c85yV+WHO9EurWqad73R137Dn7T/xOsP2tf" +
                        "if+xP8AEz4/aV+1h4e0zw1F8Xvg38ffDf8AZJu5LBbmCzudM1I6LJLC80bT5DM2/wCQliVkRU83xZ4Bw" +
                        "E+HMPnmFwcsDN1PZVaMua17NqcOdJpO2y01VtU2/T8I/EDMIcSYjIsVjYY6EaftaVaPLfluk4T5G02r7" +
                        "vXRtu0kl6j/AMFov+UaX7Sf/cnf+p9odfP/AEXP+S7wP/cX/wBM1D6H6VH/ACQWP/7hf+nqZ9mfsrf8m" +
                        "wfs4f8AYheD/wD1HrSvzDxC/wCR/jv+v9X/ANLkfqXh3/yT+A/68Uv/AEiJ+XP/AAb/AH/Jimrf9j74g" +
                        "/8ATdpdfv8A9Mn/AJK6P/XiH/pUz+e/oYf8khL/AK/z/wDSYH7gV/KB/Wp/K5/wSx+Cn7bfx0/Y1ay+E" +
                        "X7UkX7Lfwv8La3rcHg+Pw34ft9X1bxHrcjx3M899dXE0bW1pEWSFEhyWO8spAXP+hH0g+KuFMo4n5sZl" +
                        "7xuInCHNzTcYwhqkopJ80nq23tok97f53/R44U4szfhflweYLBYeE58vLBSlUno25NtcsVoklvq2tr/A" +
                        "Khf8E4f2mfj7+1B+zt8c/A/xO8QWWlftNfAvW9d+Cl/8QrawgltJNShtGSy1Ka1iSKCRorjeJI0VVcRg" +
                        "7RvNfgPjhwHk+QZ3hK+Fg5YDEwhVULu/K370E3dq8bWbbavvof0F4GcfZzxBkeMw+KnGOYYac6TnZW5k" +
                        "vdm0rJ2le6SSdtlc+Af2pvjt8c/2O9Euvit4a/4K0aD+0T8Y/A+o2H/AAn/AOzXq2neEobXVra51CG0u" +
                        "La30/SJ55LR4fM3yIAkgiDOroVG79k8PuEcp4mqrCVeHJ4TC1Iy5K6lUbi1FtNykkpJ2snquayad9Pxj" +
                        "xD4vzfhik8XS4khi8VSlHnoONJKSckmlGLbi1e7Wj5btNW1+nf+CjH7Yn7RHgew/wCCePin9lnUxpmsf" +
                        "tK6miweBtWjtprPWpdZtNHfTLK8eaISCMS34DmNo2IJ5HBHwPgj4ZZJi551SzaPNHBx+NXTgoupzyjZ2" +
                        "vaOl7ryZ9/44+J+d4SGSVcplyyxkvgdmpuSp8kZXV7Xlraz80cV+03oH/BTD9ij4bj9r1v2y4/2hIfBN" +
                        "xp+qfGz4I614W07S9AfTry6itZU05rUtIIoZJlUuqwybMyZGCh9XgPGcCcVY7+xv7L+quopKlVVSUp8y" +
                        "Ta576XaV7NyV/d7M8rj7Bce8KYD+2f7VWLVNxdWi6cYw5W0nyW1sm7XSi7e90sdP+2/+2R+0Ra+MP8Ag" +
                        "mfr/wCx/r628X7Yljrctn4I8WQ2z6TdSappuhPpU+oMIHnRbFtYaaYRuMiPBHWvP8KPDHJJYbPqecwu8" +
                        "BKF5xb5lyyqc6jrZ8/JZXT3ueh4teKOdxxWQVMlnZZhGdoSS5XzRp8jlpdcntHKVmtrHF/tOv8A8FGv+" +
                        "CeXhfRf2r9Q/a5b9qr4eaPqWl2Hx4+Fnizwzpui2cdpqN0lmJdPazMxgjM0qxK0ZjZHZCyyKWQerwEuC" +
                        "ONcRPKI5b9SryjJ0akakpu8Ve0r2u7Jtp3TSaTi7M8rj98c8E4eGcSzP69QjKKrU5U4wVpO142vZXaSt" +
                        "ZptNqSuj2X9rr9tvxd4p+NXwB/Zd/Z/+Nmh/s5WHxd8KQfHv4iftH/EAaU39keF79JPsVrp8WrSpbteX" +
                        "HlkkMcjchVgN7D5fw28KcNh8qxma5jhJ4uVCq6MKEOb3qitzOTiubljf8HdPRH1PiX4sYnEZrgspy7Fw" +
                        "wkcRSVadefL7tN35VFSfLzSt+Ks1qzz/wCE37SnxN/Z2/bV+CP7PWu/tiab+218Cv2lbbU9L0PxIJdAu" +
                        "vEPhPxHp0PnKk8ugyyl4LgtGq+aQCHYqB5TF/Z4j4FwGd8K4vMaeWSy7F4Nxbj76hUhJ20U0rOOr07K7" +
                        "fMreLw3x5j8k4rwmW1M0jmWDxiklL3HOnOKvq4N3UtFr3dkuV34/wCGXxE/b8/a1/az/bh/Z28B/tKx/" +
                        "Br4Q/BXxlcRX3xCg0LTdU8Q6dY3F1e2enaNpiSCBFjl+xyySTs3mL5YAb5irenn2ScHcOcOZTmWIwH1j" +
                        "E4iirQ55RhJpRc6k93dcySivdd9tLrzMgzzjPiTiTN8tw+P+r4bDVnefJGU4puShTgtFZ8rbk/eVlrrZ" +
                        "/Rn7AHxx/aX0P8Aab/aW/YW/ai8dr8Y/E3wSsdM8deAvi8tlb6fPqGiX627BbmOAfMzLfQMpZmZGEiM7" +
                        "gKR8R4ycJ5FVyHAZ9lVH6vTxMpQnSu5KM1fZv8AwyXRNcrSWp9x4McXZ9Rz/H5Bm1b6xUw0YzhVsouUH" +
                        "bdLf4ovq0+ZNvQ/YOv5oP6cCgAoAKACgAoAKAPmP9rD9k/4W/tf/C2/+G3xJsPJuYfMvvBnjOxjQ6joW" +
                        "olNq3FuzYypwBLETtkXg4IVlTVyoysfxWfHT9jT47/Ab472/wCz7r/g+51/xlr9ylp8PJvDUEtxb+Jbe" +
                        "4l8qCewIGWDHh1PzRtkPgg1i0dKkmj+pb/gm3/wTb8NfsgeGoPiD8QYLbxL+0R4ltvL1XVY9s9t4ctp1" +
                        "+awsG5Bcg4nnH3/ALq/JkvpGNjCc7n6s1ZmFABQAUAFABQAUAfzD6V+yd8XU/4K66t8MX8DaqP2Xl+Jk" +
                        "f7bh8WDTr1dDGsQ+H5dVjRLgp9nLf2hdC3MecgKcDFf3viPEXLX4bRxXto/2h9W+qcvMuflc1F6X5vgX" +
                        "NfzP4Bw/hxma8S5YX2Mv7P+s/W+blfJzKDktfh+OXLbfQ9N/wCC23wb+Ndz8Sfgf8YPgB4I1fxp4i8ee" +
                        "FfF/wCzH8RLbwlp15fuujavFi2Wf7HG+yNjqV0dz4UMB1yceD9FTifKo4HF4PMasKcKVWliIc0kvei9b" +
                        "Xau/chotbHvfSx4WzWWPwmNy6jOpOrSq4efLFy92S0vZOy9+er0ukfRf/BQT9hLxh4r/YI+BXwl+B3hu" +
                        "18deL/2T7rwt4j0XwNdpG8XiW10LSpNJvbfyptiSvOJfPZWIMm1lGWcA/E+DPi7hsPxhi8Zj6jpUscqk" +
                        "XNb03OSlF3WyVuVNbXT2R9x40+D+KxPBuDweApqrVwLpyUHtUUIuMlZ2u3fmae9mt2fMvg/4z/8ExPEF" +
                        "rouhav/AMEt/Eml/F66Ntp+v/CXSvhCl/f2V9L+7kVXCw+ZCkiuA5VXKqT5YOVH3mZ8LcfUZTqQ4gpyw" +
                        "yu1UeJsmunezatpdq7+LqfBZXxV4f14wpz4eqRxTspUlheaSfXtdJ31sm0vhT0P6KNG0fSvD2kaVoGha" +
                        "dDo+h6HbQaPo2k6bGsNva2ltEsEMMUaAKqIihVUDAAxX8T4rE1K9WVSpJynJttvVtvVtvu2f29hcLToU" +
                        "o06cVGEUkktEktEkuyWx+UH/BOvwV4y8L/tSf8ABULWPEvhLU/Duk+LviVbar4U1TXbC6tLfVLUS6sTN" +
                        "aSXCIs8Y3r80ZI5HPNf0V42ZrhcRw/w/ClUjOVPDtSSabi7Q0kk9H5M/nHwPyrFYfiHiCdWlKEamITi3" +
                        "FpSV56xbWq80cz+wt4F8b+Hv+CjX/BTjxR4g8HarofhnxbqXh2Xwr4i1jT7u2sdTSJr3e1pcTxrHMF3D" +
                        "JRjjNd3i3m+Er8EZBSp1YyqU4z5oqSbj8PxJO6+ZweEOT4uhxxn9WpSlGnUlDlk4tKXxfC2rP5Hmfw1+" +
                        "HXx0tf2+v8AgrX4j8B+F9V8O+IPGnga3074J+NtTsbi00278Qjw9BFZNbXlykcEhjuQu7a+Bg5xivez3" +
                        "O8olwdw5SxFSM4U6zdWCaclDnfNeKu1eN+h4OQ5Hm8eMuJKuHpyhOpQSpTaai58i5bSdk7St10Pz/8Ag" +
                        "VrHwk8MfsTfE/8AZut/2GPGPjb/AIKDeMNH8aeD/HGs674FN1qlrqOtR6hbR6rNrWqJ5lrBbW0oKou1j" +
                        "KhABLmU/snF2GzLEcVYfM3m9KnktOdKUEq1ouMeVuCpx0k5SW7uuV+XKfi/CGKy3D8J4jK1lFapnVSFW" +
                        "M26N5KU+ZKbqS1ioxeys+Zba8z9K/aB+EXxY1X/AIIWfsufD3S/hh4i1Lx9o/iW1udW8D2Gi6lNrFrGm" +
                        "o+IizTWccJmRQJFyWQfeHqK8Pg3iXLqfi3mGJniKaoypu03OKi/dpbSvZ7Pr0Pe404ZzKp4Q5fhoYeo6" +
                        "0aivBQk5L3qu8bXW66dT6m8ZfBXxl/wSz/al8JfGr9mP4c634x/Y4+Of2LwD8e/gp8P7PUdbvPDl/ZwF" +
                        "LfV7S3hE87gKGlBIbJ82JmXzYiv57lnFWF8QeH6mBzSvCnmeGvOjVm4wU03rCTdktbLp9mST5ZX/Q804" +
                        "UxXh5xDSx2VUJ1MrxNoVqUFKbhJLScUrt6XfX7UW1zRt5F8bPhL4C/Zs/bl+Nvx2/aP/ZKuv2pf2Uv2o" +
                        "YNK8YeGviPovheLxNeeDtZitws0M9tKqtBFKZHLZ2l0ERXe6Oo+l4V4jxme8JYTAZZmSwWY4JyjKDqez" +
                        "VWN9Gmt2rK29nzXsmmfM8V8N4PIeLsXmGZ5a8bl2NUZRqKn7R0pJapp7J3d9rrltdpo/Qf9hfXv2J/H3" +
                        "xB8V6/+y/8Ashal8Gr/AMO6TFHJ8WdY8ADwrY6jb6hMjSWVpdt80jjy0eRCFyMEbgMj8Y8W8HxVg8FTp" +
                        "5rmUcQpy/hqt7RxcVpKUem7SevZ2P2vwixnCmNxtSplWWSw7hH+I6Ps1JSesYy6vRNrTurnRf8ABXvwr" +
                        "4o8bf8ABO79oXwx4M8N3/i7xLqf/CJ/2b4e8MWdxf31x5PjnRriTyoLRJJH2Rxs7YU4UEngGuL6NeY4f" +
                        "Cca4KrXqRp017S8pNRSvRqJXbsldu3qdv0mMuxGL4IxtKhTlUqS9naMU5N2rU27JXbsk36H1z+zNp9/p" +
                        "P7N/wCz7pWq2U2manpngjwpp+pabqEbwz288Og2sckckcgDI6MCGUgEEYNfm3HlaFTPMbODTi61RprVN" +
                        "Obs0+qZ+lcA0Z08iwUJpxlGjTTT0aahG6a6NH5r/wDBC7wL43+Hn7FWqaD4/wDB2q+B9dfxvruoJovjD" +
                        "T7vTLswSafpqpIIb2ON9jFCA2MHB9K/dPpbZvhMbxVGph6sakPYwV4yUlfmnpdNq5+EfRDyfF4LhSVPE" +
                        "UpUp+2m7Si4u3LDWzSdj9lq/mA/qQ/I7/giV4K8ZeAf2FtB8PeO/CWp+Ctfj8S+IruTQ/FthdabeLFLc" +
                        "RlHMN5HG4VgODjBr+kPpV5rhcZxdOph6kakPZwV4tSWz6ptH81fRPyrFYLhCFPEUpU5+0m7Si4u110aT" +
                        "Pg74QfCP9piD9lz/gsVoXw18Fa/4a+Jnjzx/rOofD+G407ULG81nSZNWle/GmeYkbztcWBmjhMWdzMoG" +
                        "SRX6/xLxJkL4g4YqYqrCdClQip+9FqMuVcvPvblnyt32Sdz8e4Z4az9cP8AFFPC0qkMRVrzcPdknOPM+" +
                        "bk2vzQ5krbtqx82+ONX+CHjj/gnFP8As3fsufsL+Lbj9omHRPD0fxo8at4DaO/0a+0bU9P1bV57nWJom" +
                        "ubmS6mtdkMEZyY5AAqBBHX3OU4bNsJxwszzXN6SwXPP2UPbaSUoyjBKCfLFRTu5Pqt3fmPhM2xOU4vgZ" +
                        "5ZlOUVXjlCHtZ+x96DhKMpt1GuaTk1aMV0eyS5T6L/4KJX/AI38EeAf+CJup+FfBs/iP4keENR8LX/hz" +
                        "4fXgazub/W9PsvC8lvpzi4CmJ5Z41iO8DaTz0r4nwUo4TF4ziqNWqoUKkailNapQk615K26Sd9Nz7jxu" +
                        "rYvCYPhOdGk516cqbjB6NziqNoO+zclbXY9b/a9/bl8Rfts/BXXf2Qf2Xv2b/iK3xp+MTWPhTxza/Erw" +
                        "zNoll4QsBexT3h1G4mkeONv3flF2wihi27cFU/N+GvhLQ4VzWGc5rjsP9Vw95Q9nUU3Vdmo8qSu9723d" +
                        "rWtdr6XxM8Xa/FmVTyXKcBiPreItGftKbgqSunLnbdlta+yu3e9k+H/AOCgvhvxd+yr49/4IveEvhZ4V" +
                        "n+LPiv4CR+INB0vwppAWK78R/2BpvhWC8jgDA4nuooZSgCk72GFJwD63gzjsNxDg+Ka2LqKhTxTg3J7Q" +
                        "55VnFvyi2r+S1a3PJ8acBieHcZwrRwlN16mF50orepyRoqSXnJJ283onsb/AO2f+114h/4KLfCeH9i79" +
                        "lX4A+O28X/FfVNDg+K/iD4peG7jQ9N8H6dpup2+sN9undpVSRZ7aMuc7dgYIXdlU8fhd4bUeCcxed5tj" +
                        "KHsqEZ+zjTmpyqylFx91aXVm7db2bsk2dnin4l1+OMtWR5Rgq/ta8oe0lUpuEaUYyUveetndK/S10rtp" +
                        "Ef7av7J1n+z7+0h+z5+0rq/7N0v7XH7MvhbwFpn7Pnxj8C6fo8euavph0K2ktrPWY7OQkH90sQ3t8q7H" +
                        "R3TzEYPws8RZZ1keNyyGOWBx868q1KblyRlztOVNy9b6bu6aT5WifFXw4jkue4LNJ4B4/AQoRoVYKPPK" +
                        "PImo1FH0trsrNNrmTPoz9k3xj/wTp+Kfxt8G2X7O/7D2p+E/F2lx3fiez+Ld58M00PS9AmsYpBtl1F+Y" +
                        "p3YGOPapBbK7s4B+I8Rss42y/KqssyzaM6UrRdNV+eU07bR6pbvrbWx9z4b5pwPmObUo5blEqdWN5Kq8" +
                        "PyRg1fefRt6LpfS5Z/4JweBfG/hb9tX/gq/r3ifwdqvhzQvGXjfQNQ8Ia1r2n3dnaarBHqHidnks5riN" +
                        "EnRRMhLRkgbl9RUeOGb4TEcK8O06VWM506M1JKSbi+WjpJJ3T0e/Zl+BeT4vD8V8R1KtKUIVK0HFuLSk" +
                        "uatrFtWa1W190dL8HvBXjKx/wCCxv7W3jm98JanZ+Cta+GvhrStG8YXVhdR6Xd3US6Lvhhu3QQySL5bb" +
                        "lViRg5HBrh4mzXCz8MctoRqRdWOIqNxuuZJ+01cb3S1Wtjv4YyrFQ8UMyxEqUlSlh6aUnF8ra9ndKVrN" +
                        "6PRM+k/2Gv2wNf/AGxvBHj7xhr/AMBdb+As3grxDceB7bR/GU0lw1+kEEcpmV5bOyKyIX2SxBWCNgb2z" +
                        "x8L4s+GlHhjF0aNPGQxSqU1O8Va121b4paPdO6uuiPvPCPxNrcUYStWqYOeFdOo4Wk73sk7/DHVbNWdn" +
                        "1Z9vV+UH6yFABQAUAFABQAUAZF54f0HUdV0bXdQ0S0vtc8O/aP+Ef1m8toZbuw+2RiGf7PM6l4vNQBX2" +
                        "EbhwcigDXoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA/PX9tL" +
                        "9kDxv8AtL/F79iX4ieFPE2laDpn7MXj20+K/i2x8Qm7E+oWdvqmlXzQ2n2aGVfNK2DgeYVGSOeuP2jwt" +
                        "8S8JkOWZrhq1OUpYyg6cXG1otxmryu1p7y2uz8U8VfDLF59meU4mjUjGOCrqpJSveSUoO0bJ6+697LY/" +
                        "Qqvxc/az4N/ag/ZR8ZfHP8AaY/Yg+N3h7xHpmkaB+y9rHiXxH4u0nWTdC81CLWotLjiWz8iKRNyGxbd5" +
                        "jKORjPNfr/APiJhcpyHNsDUhKU8bCnGLVrR5HO/Ndp68ytZM/HfEDw5xWb5/lGPp1Ixhgp1JSTveSmoW" +
                        "5bJrTld7tH3lX5AfsQUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQ" +
                        "AUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQB//2Qs=";
                    this._resources = new DevExpress.XtraReports.Serialization.XRResourceManager(resourceString);
                }
                return this._resources;
            }
        }
        private void InitializeComponent() {
            DevExpress.XtraCharts.XYDiagram xYDiagram1 = new DevExpress.XtraCharts.XYDiagram();
            DevExpress.XtraCharts.PointSeriesLabel pointSeriesLabel1 = new DevExpress.XtraCharts.PointSeriesLabel();
            DevExpress.XtraCharts.PointOptions pointOptions1 = new DevExpress.XtraCharts.PointOptions();
            DevExpress.XtraCharts.LineSeriesView lineSeriesView1 = new DevExpress.XtraCharts.LineSeriesView();
            DevExpress.XtraReports.UI.XRSummary summary1 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary2 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary3 = new DevExpress.XtraReports.UI.XRSummary();
            DevExpress.XtraReports.UI.XRSummary summary4 = new DevExpress.XtraReports.UI.XRSummary();
            this.Detail = new DevExpress.XtraReports.UI.DetailBand();
            this.pageFooterBand1 = new DevExpress.XtraReports.UI.PageFooterBand();
            this.reportHeaderBand1 = new DevExpress.XtraReports.UI.ReportHeaderBand();
            this.topMarginBand1 = new DevExpress.XtraReports.UI.TopMarginBand();
            this.bottomMarginBand1 = new DevExpress.XtraReports.UI.BottomMarginBand();
            this.GroupFooter1 = new DevExpress.XtraReports.UI.GroupFooterBand();
            this.GroupHeader2 = new DevExpress.XtraReports.UI.GroupHeaderBand();
            this.label25 = new DevExpress.XtraReports.UI.XRLabel();
            this.label24 = new DevExpress.XtraReports.UI.XRLabel();
            this.label19 = new DevExpress.XtraReports.UI.XRLabel();
            this.label18 = new DevExpress.XtraReports.UI.XRLabel();
            this.label4 = new DevExpress.XtraReports.UI.XRLabel();
            this.label1 = new DevExpress.XtraReports.UI.XRLabel();
            this.line7 = new DevExpress.XtraReports.UI.XRLine();
            this.pageInfo2 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.pageInfo1 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.label32 = new DevExpress.XtraReports.UI.XRLabel();
            this.label30 = new DevExpress.XtraReports.UI.XRLabel();
            this.label31 = new DevExpress.XtraReports.UI.XRLabel();
            this.label29 = new DevExpress.XtraReports.UI.XRLabel();
            this.label44 = new DevExpress.XtraReports.UI.XRLabel();
            this.label41 = new DevExpress.XtraReports.UI.XRLabel();
            this.line6 = new DevExpress.XtraReports.UI.XRLine();
            this.pageInfo3 = new DevExpress.XtraReports.UI.XRPageInfo();
            this.label198 = new DevExpress.XtraReports.UI.XRLabel();
            this.pictureBox2 = new DevExpress.XtraReports.UI.XRPictureBox();
            this.chart1 = new DevExpress.XtraReports.UI.XRChart();
            this.line8 = new DevExpress.XtraReports.UI.XRLine();
            this.label9 = new DevExpress.XtraReports.UI.XRLabel();
            this.label7 = new DevExpress.XtraReports.UI.XRLabel();
            this.label26 = new DevExpress.XtraReports.UI.XRLabel();
            this.label12 = new DevExpress.XtraReports.UI.XRLabel();
            this.label10 = new DevExpress.XtraReports.UI.XRLabel();
            this.RepVentaNeta = new XtraReportSerialization.RepVentaNetaDataSet();
            this.line5 = new DevExpress.XtraReports.UI.XRLine();
            this.line3 = new DevExpress.XtraReports.UI.XRLine();
            this.label16 = new DevExpress.XtraReports.UI.XRLabel();
            this.label17 = new DevExpress.XtraReports.UI.XRLabel();
            this.label11 = new DevExpress.XtraReports.UI.XRLabel();
            this.label13 = new DevExpress.XtraReports.UI.XRLabel();
            this.label20 = new DevExpress.XtraReports.UI.XRLabel();
            this.label14 = new DevExpress.XtraReports.UI.XRLabel();
            this.TableTableAdapter = new System.Data.OleDb.OleDbDataAdapter();
            this.oleDbCommand1 = new System.Data.OleDb.OleDbCommand();
            this.oleDbConnection1 = new System.Data.OleDb.OleDbConnection();
            this.Title = new DevExpress.XtraReports.UI.XRControlStyle();
            this.FieldCaption = new DevExpress.XtraReports.UI.XRControlStyle();
            this.PageInfo = new DevExpress.XtraReports.UI.XRControlStyle();
            this.DataField = new DevExpress.XtraReports.UI.XRControlStyle();
            this.Movimiento = new DevExpress.XtraReports.UI.CalculatedField();
            this.Utilidad = new DevExpress.XtraReports.UI.CalculatedField();
            ((System.ComponentModel.ISupportInitialize)(this.chart1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(xYDiagram1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(pointSeriesLabel1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(lineSeriesView1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.RepVentaNeta)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this)).BeginInit();
            // 
            // Detail
            // 
            this.Detail.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.label25,
                        this.label24,
                        this.label19,
                        this.label18,
                        this.label4,
                        this.label1});
            this.Detail.HeightF = 18.00003F;
            this.Detail.Name = "Detail";
            this.Detail.Scripts.OnBeforePrint = "Detail_BeforePrint";
            // 
            // pageFooterBand1
            // 
            this.pageFooterBand1.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.line7,
                        this.pageInfo2,
                        this.pageInfo1});
            this.pageFooterBand1.HeightF = 24.25003F;
            this.pageFooterBand1.Name = "pageFooterBand1";
            // 
            // reportHeaderBand1
            // 
            this.reportHeaderBand1.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.label32,
                        this.label30,
                        this.label31,
                        this.label29,
                        this.label44,
                        this.label41,
                        this.line6,
                        this.pageInfo3,
                        this.label198,
                        this.pictureBox2});
            this.reportHeaderBand1.HeightF = 168.2916F;
            this.reportHeaderBand1.Name = "reportHeaderBand1";
            // 
            // topMarginBand1
            // 
            this.topMarginBand1.HeightF = 33F;
            this.topMarginBand1.Name = "topMarginBand1";
            // 
            // bottomMarginBand1
            // 
            this.bottomMarginBand1.HeightF = 22F;
            this.bottomMarginBand1.Name = "bottomMarginBand1";
            // 
            // GroupFooter1
            // 
            this.GroupFooter1.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.chart1,
                        this.line8,
                        this.label9,
                        this.label7,
                        this.label26,
                        this.label12,
                        this.label10});
            this.GroupFooter1.HeightF = 424.5818F;
            this.GroupFooter1.Level = 1;
            this.GroupFooter1.Name = "GroupFooter1";
            // 
            // GroupHeader2
            // 
            this.GroupHeader2.Controls.AddRange(new DevExpress.XtraReports.UI.XRControl[] {
                        this.line5,
                        this.line3,
                        this.label16,
                        this.label17,
                        this.label11,
                        this.label13,
                        this.label20,
                        this.label14});
            this.GroupHeader2.GroupFields.AddRange(new DevExpress.XtraReports.UI.GroupField[] {
                        new DevExpress.XtraReports.UI.GroupField("Total", DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending)});
            this.GroupHeader2.HeightF = 25.08332F;
            this.GroupHeader2.Name = "GroupHeader2";
            this.GroupHeader2.RepeatEveryPage = true;
            this.GroupHeader2.Scripts.OnBeforePrint = "GroupHeader2_BeforePrint";
            // 
            // label25
            // 
            this.label25.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Abonos", "{0:$#,#0.00}")});
            this.label25.Font = new System.Drawing.Font("Arial", 7F);
            this.label25.LocationFloat = new DevExpress.Utils.PointFloat(602.0001F, 0F);
            this.label25.Name = "label25";
            this.label25.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label25.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label25.StylePriority.UseFont = false;
            this.label25.StylePriority.UseTextAlignment = false;
            this.label25.Text = "label25";
            this.label25.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label24
            // 
            this.label24.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Final", "{0:$#,#0.00}")});
            this.label24.Font = new System.Drawing.Font("Arial", 7F);
            this.label24.LocationFloat = new DevExpress.Utils.PointFloat(712.0001F, 0F);
            this.label24.Name = "label24";
            this.label24.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label24.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label24.StylePriority.UseFont = false;
            this.label24.StylePriority.UseTextAlignment = false;
            this.label24.Text = "label24";
            this.label24.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label19
            // 
            this.label19.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Cargos", "{0:$#,#0.00}")});
            this.label19.Font = new System.Drawing.Font("Arial", 7F);
            this.label19.LocationFloat = new DevExpress.Utils.PointFloat(492.0001F, 0F);
            this.label19.Name = "label19";
            this.label19.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label19.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label19.StylePriority.UseFont = false;
            this.label19.StylePriority.UseTextAlignment = false;
            this.label19.Text = "label19";
            this.label19.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label18
            // 
            this.label18.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Inicio", "{0:$#,#0.00}")});
            this.label18.Font = new System.Drawing.Font("Arial", 7F);
            this.label18.LocationFloat = new DevExpress.Utils.PointFloat(382.0001F, 0F);
            this.label18.Name = "label18";
            this.label18.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label18.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label18.StylePriority.UseFont = false;
            this.label18.StylePriority.UseTextAlignment = false;
            this.label18.Text = "label18";
            this.label18.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label4
            // 
            this.label4.CanGrow = false;
            this.label4.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.CuentaNombre")});
            this.label4.Font = new System.Drawing.Font("Arial", 7F);
            this.label4.LocationFloat = new DevExpress.Utils.PointFloat(91F, 0F);
            this.label4.Name = "label4";
            this.label4.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label4.SizeF = new System.Drawing.SizeF(291F, 18.00003F);
            this.label4.StylePriority.UseFont = false;
            this.label4.StylePriority.UseTextAlignment = false;
            this.label4.Text = "label4";
            this.label4.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            this.label4.WordWrap = false;
            // 
            // label1
            // 
            this.label1.CanGrow = false;
            this.label1.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Cuenta")});
            this.label1.Font = new System.Drawing.Font("Arial", 7F);
            this.label1.LocationFloat = new DevExpress.Utils.PointFloat(0F, 0F);
            this.label1.Name = "label1";
            this.label1.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label1.Scripts.OnBeforePrint = "label1_BeforePrint";
            this.label1.SizeF = new System.Drawing.SizeF(90F, 18F);
            this.label1.StylePriority.UseFont = false;
            this.label1.StylePriority.UseTextAlignment = false;
            this.label1.Text = "label1";
            this.label1.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            this.label1.WordWrap = false;
            // 
            // line7
            // 
            this.line7.BorderColor = System.Drawing.Color.Gray;
            this.line7.ForeColor = System.Drawing.Color.Gray;
            this.line7.LocationFloat = new DevExpress.Utils.PointFloat(0F, 0F);
            this.line7.Name = "line7";
            this.line7.SizeF = new System.Drawing.SizeF(822.0002F, 2.166621F);
            this.line7.StylePriority.UseBorderColor = false;
            this.line7.StylePriority.UseForeColor = false;
            // 
            // pageInfo2
            // 
            this.pageInfo2.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo2.Format = "Página {0} de {1}";
            this.pageInfo2.LocationFloat = new DevExpress.Utils.PointFloat(440.6547F, 2.16662F);
            this.pageInfo2.Name = "pageInfo2";
            this.pageInfo2.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo2.SizeF = new System.Drawing.SizeF(381.3455F, 18F);
            this.pageInfo2.StyleName = "PageInfo";
            this.pageInfo2.StylePriority.UseFont = false;
            this.pageInfo2.StylePriority.UseTextAlignment = false;
            this.pageInfo2.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // pageInfo1
            // 
            this.pageInfo1.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo1.LocationFloat = new DevExpress.Utils.PointFloat(0F, 2.166621F);
            this.pageInfo1.Name = "pageInfo1";
            this.pageInfo1.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo1.PageInfo = DevExpress.XtraPrinting.PageInfo.DateTime;
            this.pageInfo1.SizeF = new System.Drawing.SizeF(313F, 18F);
            this.pageInfo1.StyleName = "PageInfo";
            this.pageInfo1.StylePriority.UseFont = false;
            this.pageInfo1.StylePriority.UseTextAlignment = false;
            this.pageInfo1.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label32
            // 
            this.label32.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.EmpresaNombre")});
            this.label32.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label32.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label32.LocationFloat = new DevExpress.Utils.PointFloat(509.0001F, 23.66664F);
            this.label32.Name = "label32";
            this.label32.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label32.SizeF = new System.Drawing.SizeF(313.6666F, 18.00001F);
            this.label32.StyleName = "Title";
            this.label32.StylePriority.UseFont = false;
            this.label32.StylePriority.UseForeColor = false;
            this.label32.StylePriority.UseTextAlignment = false;
            this.label32.Text = "label41";
            this.label32.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopRight;
            // 
            // label30
            // 
            this.label30.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Direccion4")});
            this.label30.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label30.LocationFloat = new DevExpress.Utils.PointFloat(509.0001F, 77.66666F);
            this.label30.Name = "label30";
            this.label30.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label30.SizeF = new System.Drawing.SizeF(313.6667F, 18F);
            this.label30.StylePriority.UseFont = false;
            this.label30.StylePriority.UseTextAlignment = false;
            this.label30.Text = "label31";
            this.label30.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopRight;
            // 
            // label31
            // 
            this.label31.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label31.LocationFloat = new DevExpress.Utils.PointFloat(509.0001F, 59.66666F);
            this.label31.Name = "label31";
            this.label31.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label31.SizeF = new System.Drawing.SizeF(313.6666F, 18F);
            this.label31.StylePriority.UseFont = false;
            this.label31.StylePriority.UseTextAlignment = false;
            this.label31.Text = "[Direccion3]";
            this.label31.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopRight;
            // 
            // label29
            // 
            this.label29.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Direccion2")});
            this.label29.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label29.LocationFloat = new DevExpress.Utils.PointFloat(509.0001F, 41.66667F);
            this.label29.Name = "label29";
            this.label29.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label29.SizeF = new System.Drawing.SizeF(313.6666F, 18F);
            this.label29.StylePriority.UseFont = false;
            this.label29.StylePriority.UseTextAlignment = false;
            this.label29.Text = "[Direccion2]";
            this.label29.TextAlignment = DevExpress.XtraPrinting.TextAlignment.TopRight;
            // 
            // label44
            // 
            this.label44.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Reporte")});
            this.label44.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label44.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label44.LocationFloat = new DevExpress.Utils.PointFloat(0.999999F, 141.2916F);
            this.label44.Name = "label44";
            this.label44.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label44.SizeF = new System.Drawing.SizeF(368.2083F, 18F);
            this.label44.StyleName = "Title";
            this.label44.StylePriority.UseFont = false;
            this.label44.StylePriority.UseForeColor = false;
            this.label44.StylePriority.UseTextAlignment = false;
            this.label44.Text = "label198";
            this.label44.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label41
            // 
            this.label41.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.EmpresaNombre")});
            this.label41.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label41.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label41.LocationFloat = new DevExpress.Utils.PointFloat(272.3333F, 121.2916F);
            this.label41.Name = "label41";
            this.label41.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label41.SizeF = new System.Drawing.SizeF(329.6668F, 18.00001F);
            this.label41.StyleName = "Title";
            this.label41.StylePriority.UseFont = false;
            this.label41.StylePriority.UseForeColor = false;
            this.label41.StylePriority.UseTextAlignment = false;
            this.label41.Text = "label41";
            this.label41.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleCenter;
            this.label41.Visible = false;
            // 
            // line6
            // 
            this.line6.BorderColor = System.Drawing.Color.Gray;
            this.line6.ForeColor = System.Drawing.Color.Gray;
            this.line6.LocationFloat = new DevExpress.Utils.PointFloat(0F, 139.2916F);
            this.line6.Name = "line6";
            this.line6.SizeF = new System.Drawing.SizeF(822.0002F, 2F);
            this.line6.StylePriority.UseBorderColor = false;
            this.line6.StylePriority.UseForeColor = false;
            // 
            // pageInfo3
            // 
            this.pageInfo3.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.pageInfo3.LocationFloat = new DevExpress.Utils.PointFloat(602.0002F, 121.2916F);
            this.pageInfo3.Name = "pageInfo3";
            this.pageInfo3.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.pageInfo3.PageInfo = DevExpress.XtraPrinting.PageInfo.DateTime;
            this.pageInfo3.SizeF = new System.Drawing.SizeF(219.9999F, 17.99999F);
            this.pageInfo3.StyleName = "PageInfo";
            this.pageInfo3.StylePriority.UseFont = false;
            this.pageInfo3.StylePriority.UseTextAlignment = false;
            this.pageInfo3.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label198
            // 
            this.label198.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Titulo")});
            this.label198.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label198.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
            this.label198.LocationFloat = new DevExpress.Utils.PointFloat(0.999999F, 121.2916F);
            this.label198.Name = "label198";
            this.label198.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label198.SizeF = new System.Drawing.SizeF(271.3333F, 17.99999F);
            this.label198.StyleName = "Title";
            this.label198.StylePriority.UseFont = false;
            this.label198.StylePriority.UseForeColor = false;
            this.label198.StylePriority.UseTextAlignment = false;
            this.label198.Text = "label198";
            this.label198.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // pictureBox2
            // 
            this.pictureBox2.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox2.Image")));
            this.pictureBox2.LocationFloat = new DevExpress.Utils.PointFloat(0.999999F, 10F);
            this.pictureBox2.Name = "pictureBox2";
            this.pictureBox2.SizeF = new System.Drawing.SizeF(259.3751F, 97.95833F);
            // 
            // chart1
            // 
            this.chart1.AppearanceName = "Pastel Kit";
            this.chart1.BorderColor = System.Drawing.Color.Black;
            this.chart1.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.chart1.DataMember = "Table";
            this.chart1.DataSource = this.RepVentaNeta;
            xYDiagram1.AxisX.Label.Font = new System.Drawing.Font("Arial", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            xYDiagram1.AxisX.Range.SideMarginsEnabled = true;
            xYDiagram1.AxisX.VisibleInPanesSerializable = "-1";
            xYDiagram1.AxisY.NumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Currency;
            xYDiagram1.AxisY.Range.SideMarginsEnabled = true;
            xYDiagram1.AxisY.VisibleInPanesSerializable = "-1";
            this.chart1.Diagram = xYDiagram1;
            this.chart1.IndicatorsPaletteName = "Default";
            this.chart1.Legend.Font = new System.Drawing.Font("Arial", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.chart1.Legend.HorizontalIndent = 0;
            this.chart1.Legend.TextOffset = 0;
            this.chart1.Legend.VerticalIndent = 0;
            this.chart1.LocationFloat = new DevExpress.Utils.PointFloat(0.9998798F, 40.83335F);
            this.chart1.Name = "chart1";
            this.chart1.Scripts.OnBeforePrint = "chart2_BeforePrint";
            this.chart1.SeriesDataMember = "CuentaNombre";
            this.chart1.SeriesSerializable = new DevExpress.XtraCharts.Series[0];
            this.chart1.SeriesTemplate.ArgumentDataMember = "GraficaArgumento";
            this.chart1.SeriesTemplate.DataFilters.ClearAndAddRange(new DevExpress.XtraCharts.DataFilter[] {
                        new DevExpress.XtraCharts.DataFilter("Grafica", "System.Int32", DevExpress.XtraCharts.DataFilterCondition.Equal, 1)});
            pointSeriesLabel1.Font = new System.Drawing.Font("Arial", 6F);
            pointSeriesLabel1.LineVisible = true;
            pointSeriesLabel1.ResolveOverlappingMode = DevExpress.XtraCharts.ResolveOverlappingMode.Default;
            this.chart1.SeriesTemplate.Label = pointSeriesLabel1;
            pointOptions1.ValueNumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Currency;
            this.chart1.SeriesTemplate.PointOptions = pointOptions1;
            this.chart1.SeriesTemplate.ValueDataMembersSerializable = "GraficaValor";
            this.chart1.SeriesTemplate.View = lineSeriesView1;
            this.chart1.SizeF = new System.Drawing.SizeF(821.0002F, 378.7484F);
            // 
            // line8
            // 
            this.line8.LocationFloat = new DevExpress.Utils.PointFloat(0.0001271566F, 0F);
            this.line8.Name = "line8";
            this.line8.SizeF = new System.Drawing.SizeF(822.0001F, 2F);
            // 
            // label9
            // 
            this.label9.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Cargos", "{0:$#,#.00}")});
            this.label9.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label9.LocationFloat = new DevExpress.Utils.PointFloat(492.0001F, 2F);
            this.label9.Name = "label9";
            this.label9.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label9.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label9.StylePriority.UseFont = false;
            this.label9.StylePriority.UseTextAlignment = false;
            summary1.FormatString = "{0:$#,#.00}";
            summary1.IgnoreNullValues = true;
            this.label9.Summary = summary1;
            this.label9.Text = "label9";
            this.label9.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label7
            // 
            this.label7.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Abonos", "{0:$#,#.00}")});
            this.label7.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label7.LocationFloat = new DevExpress.Utils.PointFloat(602.0001F, 2F);
            this.label7.Name = "label7";
            this.label7.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label7.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label7.StylePriority.UseFont = false;
            this.label7.StylePriority.UseTextAlignment = false;
            summary2.FormatString = "{0:$#,#.00}";
            summary2.IgnoreNullValues = true;
            this.label7.Summary = summary2;
            this.label7.Text = "label7";
            this.label7.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label26
            // 
            this.label26.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Final", "{0:$#,#.00}")});
            this.label26.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label26.LocationFloat = new DevExpress.Utils.PointFloat(712.0002F, 2.000032F);
            this.label26.Name = "label26";
            this.label26.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label26.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label26.StylePriority.UseFont = false;
            this.label26.StylePriority.UseTextAlignment = false;
            summary3.FormatString = "{0:$#,#.00}";
            summary3.IgnoreNullValues = true;
            this.label26.Summary = summary3;
            this.label26.Text = "label26";
            this.label26.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label12
            // 
            this.label12.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label12.LocationFloat = new DevExpress.Utils.PointFloat(0F, 2.000046F);
            this.label12.Name = "label12";
            this.label12.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label12.SizeF = new System.Drawing.SizeF(89.99999F, 18F);
            this.label12.StylePriority.UseFont = false;
            this.label12.StylePriority.UseTextAlignment = false;
            this.label12.Text = "Total";
            this.label12.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label10
            // 
            this.label10.DataBindings.AddRange(new DevExpress.XtraReports.UI.XRBinding[] {
                        new DevExpress.XtraReports.UI.XRBinding("Text", null, "Table.Inicio", "{0:$#,#.00}")});
            this.label10.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Bold);
            this.label10.LocationFloat = new DevExpress.Utils.PointFloat(382.0001F, 2F);
            this.label10.Name = "label10";
            this.label10.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label10.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label10.StylePriority.UseFont = false;
            this.label10.StylePriority.UseTextAlignment = false;
            summary4.FormatString = "{0:$#,#.00}";
            summary4.IgnoreNullValues = true;
            this.label10.Summary = summary4;
            this.label10.Text = "label10";
            this.label10.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // RepVentaNeta
            // 
            this.RepVentaNeta.DataSetName = "RepVentaNetaDataSet";
            this.RepVentaNeta.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            // 
            // line5
            // 
            this.line5.LocationFloat = new DevExpress.Utils.PointFloat(0F, 20.00003F);
            this.line5.Name = "line5";
            this.line5.SizeF = new System.Drawing.SizeF(822.0002F, 3.958321F);
            // 
            // line3
            // 
            this.line3.LocationFloat = new DevExpress.Utils.PointFloat(0F, 0F);
            this.line3.Name = "line3";
            this.line3.SizeF = new System.Drawing.SizeF(822.0002F, 2F);
            // 
            // label16
            // 
            this.label16.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label16.LocationFloat = new DevExpress.Utils.PointFloat(712.0001F, 2F);
            this.label16.Name = "label16";
            this.label16.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label16.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label16.StylePriority.UseFont = false;
            this.label16.StylePriority.UseTextAlignment = false;
            this.label16.Text = "Final";
            this.label16.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label17
            // 
            this.label17.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label17.LocationFloat = new DevExpress.Utils.PointFloat(382.0001F, 2F);
            this.label17.Name = "label17";
            this.label17.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label17.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label17.StylePriority.UseFont = false;
            this.label17.StylePriority.UseTextAlignment = false;
            this.label17.Text = "Inicio";
            this.label17.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label11
            // 
            this.label11.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label11.LocationFloat = new DevExpress.Utils.PointFloat(492.0001F, 2F);
            this.label11.Name = "label11";
            this.label11.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label11.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label11.StylePriority.UseFont = false;
            this.label11.StylePriority.UseTextAlignment = false;
            this.label11.Text = "Cargos";
            this.label11.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label13
            // 
            this.label13.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label13.LocationFloat = new DevExpress.Utils.PointFloat(89.99999F, 2F);
            this.label13.Name = "label13";
            this.label13.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label13.SizeF = new System.Drawing.SizeF(292F, 18F);
            this.label13.StylePriority.UseFont = false;
            this.label13.StylePriority.UseTextAlignment = false;
            this.label13.Text = "Descripción";
            this.label13.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // label20
            // 
            this.label20.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label20.LocationFloat = new DevExpress.Utils.PointFloat(602.0001F, 2.000031F);
            this.label20.Name = "label20";
            this.label20.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label20.SizeF = new System.Drawing.SizeF(110F, 18F);
            this.label20.StylePriority.UseFont = false;
            this.label20.StylePriority.UseTextAlignment = false;
            this.label20.Text = "Abonos";
            this.label20.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleRight;
            // 
            // label14
            // 
            this.label14.Font = new System.Drawing.Font("Arial", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label14.LocationFloat = new DevExpress.Utils.PointFloat(0F, 2F);
            this.label14.Name = "label14";
            this.label14.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            this.label14.SizeF = new System.Drawing.SizeF(90F, 18F);
            this.label14.StylePriority.UseFont = false;
            this.label14.StylePriority.UseTextAlignment = false;
            this.label14.Text = "Cuenta";
            this.label14.TextAlignment = DevExpress.XtraPrinting.TextAlignment.MiddleLeft;
            // 
            // TableTableAdapter
            // 
            this.TableTableAdapter.SelectCommand = this.oleDbCommand1;
            this.TableTableAdapter.TableMappings.AddRange(new System.Data.Common.DataTableMapping[] {
                        new System.Data.Common.DataTableMapping("Table", "Table", new System.Data.Common.DataColumnMapping[0])});
            // 
            // oleDbCommand1
            // 
            this.oleDbCommand1.CommandText = resources.GetString("oleDbCommand1.CommandText");
            this.oleDbCommand1.CommandTimeout = 0;
            this.oleDbCommand1.Connection = this.oleDbConnection1;
            // 
            // oleDbConnection1
            // 
            this.oleDbConnection1.ConnectionString = "Provider=SQLOLEDB;Data Source=.;Initial Catalog=V4600;User ID=SA;Password=INTELIS" +
                "IS";
            // 
            // Title
            // 
            this.Title.BackColor = System.Drawing.Color.White;
            this.Title.BorderColor = System.Drawing.SystemColors.ControlText;
            this.Title.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.Title.BorderWidth = 1;
            this.Title.Font = new System.Drawing.Font("Times New Roman", 20F, System.Drawing.FontStyle.Bold);
            this.Title.ForeColor = System.Drawing.Color.Maroon;
            this.Title.Name = "Title";
            // 
            // FieldCaption
            // 
            this.FieldCaption.BackColor = System.Drawing.Color.White;
            this.FieldCaption.BorderColor = System.Drawing.SystemColors.ControlText;
            this.FieldCaption.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.FieldCaption.BorderWidth = 1;
            this.FieldCaption.Font = new System.Drawing.Font("Arial", 10F, System.Drawing.FontStyle.Bold);
            this.FieldCaption.ForeColor = System.Drawing.Color.Maroon;
            this.FieldCaption.Name = "FieldCaption";
            // 
            // PageInfo
            // 
            this.PageInfo.BackColor = System.Drawing.Color.White;
            this.PageInfo.BorderColor = System.Drawing.SystemColors.ControlText;
            this.PageInfo.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.PageInfo.BorderWidth = 1;
            this.PageInfo.Font = new System.Drawing.Font("Times New Roman", 10F, System.Drawing.FontStyle.Bold);
            this.PageInfo.ForeColor = System.Drawing.SystemColors.ControlText;
            this.PageInfo.Name = "PageInfo";
            // 
            // DataField
            // 
            this.DataField.BackColor = System.Drawing.Color.White;
            this.DataField.BorderColor = System.Drawing.SystemColors.ControlText;
            this.DataField.Borders = DevExpress.XtraPrinting.BorderSide.None;
            this.DataField.BorderWidth = 1;
            this.DataField.Font = new System.Drawing.Font("Times New Roman", 10F);
            this.DataField.ForeColor = System.Drawing.SystemColors.ControlText;
            this.DataField.Name = "DataField";
            this.DataField.Padding = new DevExpress.XtraPrinting.PaddingInfo(2, 2, 0, 0, 100F);
            // 
            // Movimiento
            // 
            this.Movimiento.DataMember = "Table";
            this.Movimiento.DataSource = this.RepVentaNeta;
            this.Movimiento.Expression = "[Mov] + \' \' + [MovID]";
            this.Movimiento.Name = "Movimiento";
            // 
            // Utilidad
            // 
            this.Utilidad.DataMember = "Table";
            this.Utilidad.DataSource = this.RepVentaNeta;
            this.Utilidad.Expression = "[SubTotal]-[CostoTotal]";
            this.Utilidad.Name = "Utilidad";
            // 
            // InformeContBalanza
            // 
            this.Bands.AddRange(new DevExpress.XtraReports.UI.Band[] {
                        this.Detail,
                        this.pageFooterBand1,
                        this.reportHeaderBand1,
                        this.topMarginBand1,
                        this.bottomMarginBand1,
                        this.GroupFooter1,
                        this.GroupHeader2});
            this.CalculatedFields.AddRange(new DevExpress.XtraReports.UI.CalculatedField[] {
                        this.Movimiento,
                        this.Utilidad});
            this.DataAdapter = this.TableTableAdapter;
            this.DataMember = "Table";
            this.DataSource = this.RepVentaNeta;
            this.DisplayName = "InformeContBalanza";
            this.Margins = new System.Drawing.Printing.Margins(12, 11, 33, 22);
            this.Name = "InformeContBalanza";
            this.PageHeight = 1100;
            this.PageWidth = 850;
            this.ScriptLanguage = DevExpress.XtraReports.ScriptLanguage.VisualBasic;
            this.ScriptsSource = resources.GetString("$this.ScriptsSource");
            this.StyleSheet.AddRange(new DevExpress.XtraReports.UI.XRControlStyle[] {
                        this.Title,
                        this.FieldCaption,
                        this.PageInfo,
                        this.DataField});
            this.Tag = "EXEC spInformeContBalanza [EstacionTrabajo]";
            this.Version = "10.2";
            ((System.ComponentModel.ISupportInitialize)(xYDiagram1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(pointSeriesLabel1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(lineSeriesView1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.chart1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.RepVentaNeta)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this)).EndInit();
        }
    }
}
namespace XtraReportSerialization {
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RepVentaNetaDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RepVentaNetaDataSet : global::System.Data.DataSet {
        private _TableDataTable table_Table;
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepVentaNetaDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RepVentaNetaDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new _TableDataTable(ds.Tables["Table"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _TableDataTable _Table {
            get {
                return this.table_Table;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RepVentaNetaDataSet cln = ((RepVentaNetaDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Table"] != null)) {
                    base.Tables.Add(new _TableDataTable(ds.Tables["Table"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table_Table = ((_TableDataTable)(base.Tables["Table"]));
            if ((initTable == true)) {
                if ((this.table_Table != null)) {
                    this.table_Table.InitVars();
                }
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RepVentaNetaDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.table_Table = new _TableDataTable();
            base.Tables.Add(this.table_Table);
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_Table() {
            return false;
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RepVentaNetaDataSet ds = new RepVentaNetaDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        public delegate void _TableRowChangeEventHandler(object sender, _TableRowChangeEvent e);
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _TableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            private global::System.Data.DataColumn columnEstacion;
            private global::System.Data.DataColumn columnEmpresa;
            private global::System.Data.DataColumn columnEmpresaNombre;
            private global::System.Data.DataColumn columnCuenta;
            private global::System.Data.DataColumn columnCuentaNombre;
            private global::System.Data.DataColumn columnTipo;
            private global::System.Data.DataColumn columnInicio;
            private global::System.Data.DataColumn columnCargos;
            private global::System.Data.DataColumn columnAbonos;
            private global::System.Data.DataColumn columnPeriodo;
            private global::System.Data.DataColumn columnFinal;
            private global::System.Data.DataColumn columnGraficaArgumento;
            private global::System.Data.DataColumn columnGraficaValor;
            private global::System.Data.DataColumn columnGrafica;
            private global::System.Data.DataColumn columnTitulo;
            private global::System.Data.DataColumn columnReporte;
            private global::System.Data.DataColumn columnDireccion2;
            private global::System.Data.DataColumn columnDireccion3;
            private global::System.Data.DataColumn columnDireccion4;
            private global::System.Data.DataColumn columnTotal;
            private global::System.Data.DataColumn columnEtiqueta;
            private global::System.Data.DataColumn columnVerGraficaDetalle;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableDataTable() {
                this.TableName = "Table";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _TableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _TableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstacionColumn {
                get {
                    return this.columnEstacion;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpresaColumn {
                get {
                    return this.columnEmpresa;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpresaNombreColumn {
                get {
                    return this.columnEmpresaNombre;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CuentaColumn {
                get {
                    return this.columnCuenta;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CuentaNombreColumn {
                get {
                    return this.columnCuentaNombre;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipoColumn {
                get {
                    return this.columnTipo;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InicioColumn {
                get {
                    return this.columnInicio;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CargosColumn {
                get {
                    return this.columnCargos;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbonosColumn {
                get {
                    return this.columnAbonos;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PeriodoColumn {
                get {
                    return this.columnPeriodo;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalColumn {
                get {
                    return this.columnFinal;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GraficaArgumentoColumn {
                get {
                    return this.columnGraficaArgumento;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GraficaValorColumn {
                get {
                    return this.columnGraficaValor;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GraficaColumn {
                get {
                    return this.columnGrafica;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TituloColumn {
                get {
                    return this.columnTitulo;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReporteColumn {
                get {
                    return this.columnReporte;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Direccion2Column {
                get {
                    return this.columnDireccion2;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Direccion3Column {
                get {
                    return this.columnDireccion3;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Direccion4Column {
                get {
                    return this.columnDireccion4;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EtiquetaColumn {
                get {
                    return this.columnEtiqueta;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VerGraficaDetalleColumn {
                get {
                    return this.columnVerGraficaDetalle;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow this[int index] {
                get {
                    return ((_TableRow)(this.Rows[index]));
                }
            }
            public event _TableRowChangeEventHandler _TableRowChanging;
            public event _TableRowChangeEventHandler _TableRowChanged;
            public event _TableRowChangeEventHandler _TableRowDeleting;
            public event _TableRowChangeEventHandler _TableRowDeleted;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_TableRow(_TableRow row) {
                this.Rows.Add(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow Add_TableRow(
                        int Estacion, 
                        string Empresa, 
                        string EmpresaNombre, 
                        string Cuenta, 
                        string CuentaNombre, 
                        string Tipo, 
                        double Inicio, 
                        double Cargos, 
                        double Abonos, 
                        int Periodo, 
                        double Final, 
                        string GraficaArgumento, 
                        double GraficaValor, 
                        int Grafica, 
                        string Titulo, 
                        string Reporte, 
                        string Direccion2, 
                        string Direccion3, 
                        string Direccion4, 
                        bool Total, 
                        bool Etiqueta, 
                        bool VerGraficaDetalle) {
                _TableRow row_TableRow = ((_TableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Estacion,
                        Empresa,
                        EmpresaNombre,
                        Cuenta,
                        CuentaNombre,
                        Tipo,
                        Inicio,
                        Cargos,
                        Abonos,
                        Periodo,
                        Final,
                        GraficaArgumento,
                        GraficaValor,
                        Grafica,
                        Titulo,
                        Reporte,
                        Direccion2,
                        Direccion3,
                        Direccion4,
                        Total,
                        Etiqueta,
                        VerGraficaDetalle};
                row_TableRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_TableRow);
                return row_TableRow;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _TableDataTable cln = ((_TableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _TableDataTable();
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEstacion = base.Columns["Estacion"];
                this.columnEmpresa = base.Columns["Empresa"];
                this.columnEmpresaNombre = base.Columns["EmpresaNombre"];
                this.columnCuenta = base.Columns["Cuenta"];
                this.columnCuentaNombre = base.Columns["CuentaNombre"];
                this.columnTipo = base.Columns["Tipo"];
                this.columnInicio = base.Columns["Inicio"];
                this.columnCargos = base.Columns["Cargos"];
                this.columnAbonos = base.Columns["Abonos"];
                this.columnPeriodo = base.Columns["Periodo"];
                this.columnFinal = base.Columns["Final"];
                this.columnGraficaArgumento = base.Columns["GraficaArgumento"];
                this.columnGraficaValor = base.Columns["GraficaValor"];
                this.columnGrafica = base.Columns["Grafica"];
                this.columnTitulo = base.Columns["Titulo"];
                this.columnReporte = base.Columns["Reporte"];
                this.columnDireccion2 = base.Columns["Direccion2"];
                this.columnDireccion3 = base.Columns["Direccion3"];
                this.columnDireccion4 = base.Columns["Direccion4"];
                this.columnTotal = base.Columns["Total"];
                this.columnEtiqueta = base.Columns["Etiqueta"];
                this.columnVerGraficaDetalle = base.Columns["VerGraficaDetalle"];
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEstacion = new global::System.Data.DataColumn("Estacion", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstacion);
                this.columnEmpresa = new global::System.Data.DataColumn("Empresa", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpresa);
                this.columnEmpresaNombre = new global::System.Data.DataColumn("EmpresaNombre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpresaNombre);
                this.columnCuenta = new global::System.Data.DataColumn("Cuenta", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCuenta);
                this.columnCuentaNombre = new global::System.Data.DataColumn("CuentaNombre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCuentaNombre);
                this.columnTipo = new global::System.Data.DataColumn("Tipo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipo);
                this.columnInicio = new global::System.Data.DataColumn("Inicio", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInicio);
                this.columnCargos = new global::System.Data.DataColumn("Cargos", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCargos);
                this.columnAbonos = new global::System.Data.DataColumn("Abonos", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbonos);
                this.columnPeriodo = new global::System.Data.DataColumn("Periodo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodo);
                this.columnFinal = new global::System.Data.DataColumn("Final", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinal);
                this.columnGraficaArgumento = new global::System.Data.DataColumn("GraficaArgumento", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGraficaArgumento);
                this.columnGraficaValor = new global::System.Data.DataColumn("GraficaValor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGraficaValor);
                this.columnGrafica = new global::System.Data.DataColumn("Grafica", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrafica);
                this.columnTitulo = new global::System.Data.DataColumn("Titulo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitulo);
                this.columnReporte = new global::System.Data.DataColumn("Reporte", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReporte);
                this.columnDireccion2 = new global::System.Data.DataColumn("Direccion2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDireccion2);
                this.columnDireccion3 = new global::System.Data.DataColumn("Direccion3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDireccion3);
                this.columnDireccion4 = new global::System.Data.DataColumn("Direccion4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDireccion4);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnEtiqueta = new global::System.Data.DataColumn("Etiqueta", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEtiqueta);
                this.columnVerGraficaDetalle = new global::System.Data.DataColumn("VerGraficaDetalle", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerGraficaDetalle);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow New_TableRow() {
                return ((_TableRow)(this.NewRow()));
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _TableRow(builder);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_TableRow);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._TableRowChanged != null)) {
                    this._TableRowChanged(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._TableRowChanging != null)) {
                    this._TableRowChanging(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._TableRowDeleted != null)) {
                    this._TableRowDeleted(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._TableRowDeleting != null)) {
                    this._TableRowDeleting(this, new _TableRowChangeEvent(((_TableRow)(e.Row)), e.Action));
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_TableRow(_TableRow row) {
                this.Rows.Remove(row);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepVentaNetaDataSet ds = new RepVentaNetaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_TableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _TableRow : global::System.Data.DataRow {
            private _TableDataTable table_Table;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _TableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_Table = ((_TableDataTable)(this.Table));
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Estacion {
                get {
                    try {
                        return ((int)(this[this.table_Table.EstacionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Estacion\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EstacionColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Empresa {
                get {
                    try {
                        return ((string)(this[this.table_Table.EmpresaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Empresa\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EmpresaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpresaNombre {
                get {
                    try {
                        return ((string)(this[this.table_Table.EmpresaNombreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'EmpresaNombre\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EmpresaNombreColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cuenta {
                get {
                    try {
                        return ((string)(this[this.table_Table.CuentaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Cuenta\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.CuentaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CuentaNombre {
                get {
                    try {
                        return ((string)(this[this.table_Table.CuentaNombreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'CuentaNombre\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.CuentaNombreColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tipo {
                get {
                    try {
                        return ((string)(this[this.table_Table.TipoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Tipo\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.TipoColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Inicio {
                get {
                    try {
                        return ((double)(this[this.table_Table.InicioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Inicio\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.InicioColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Cargos {
                get {
                    try {
                        return ((double)(this[this.table_Table.CargosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Cargos\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.CargosColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Abonos {
                get {
                    try {
                        return ((double)(this[this.table_Table.AbonosColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Abonos\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.AbonosColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Periodo {
                get {
                    try {
                        return ((int)(this[this.table_Table.PeriodoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Periodo\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.PeriodoColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Final {
                get {
                    try {
                        return ((double)(this[this.table_Table.FinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Final\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.FinalColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GraficaArgumento {
                get {
                    try {
                        return ((string)(this[this.table_Table.GraficaArgumentoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'GraficaArgumento\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.GraficaArgumentoColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double GraficaValor {
                get {
                    try {
                        return ((double)(this[this.table_Table.GraficaValorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'GraficaValor\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.GraficaValorColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Grafica {
                get {
                    try {
                        return ((int)(this[this.table_Table.GraficaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Grafica\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.GraficaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Titulo {
                get {
                    try {
                        return ((string)(this[this.table_Table.TituloColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Titulo\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.TituloColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reporte {
                get {
                    try {
                        return ((string)(this[this.table_Table.ReporteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Reporte\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.ReporteColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direccion2 {
                get {
                    try {
                        return ((string)(this[this.table_Table.Direccion2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Direccion2\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.Direccion2Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direccion3 {
                get {
                    try {
                        return ((string)(this[this.table_Table.Direccion3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Direccion3\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.Direccion3Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direccion4 {
                get {
                    try {
                        return ((string)(this[this.table_Table.Direccion4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Direccion4\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.Direccion4Column] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Total {
                get {
                    try {
                        return ((bool)(this[this.table_Table.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Total\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.TotalColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Etiqueta {
                get {
                    try {
                        return ((bool)(this[this.table_Table.EtiquetaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'Etiqueta\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.EtiquetaColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool VerGraficaDetalle {
                get {
                    try {
                        return ((bool)(this[this.table_Table.VerGraficaDetalleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'VerGraficaDetalle\' de la tabla \'Table\' es DBNull.", e);
                    }
                }
                set {
                    this[this.table_Table.VerGraficaDetalleColumn] = value;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstacionNull() {
                return this.IsNull(this.table_Table.EstacionColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstacionNull() {
                this[this.table_Table.EstacionColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpresaNull() {
                return this.IsNull(this.table_Table.EmpresaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpresaNull() {
                this[this.table_Table.EmpresaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpresaNombreNull() {
                return this.IsNull(this.table_Table.EmpresaNombreColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpresaNombreNull() {
                this[this.table_Table.EmpresaNombreColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCuentaNull() {
                return this.IsNull(this.table_Table.CuentaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCuentaNull() {
                this[this.table_Table.CuentaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCuentaNombreNull() {
                return this.IsNull(this.table_Table.CuentaNombreColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCuentaNombreNull() {
                this[this.table_Table.CuentaNombreColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTipoNull() {
                return this.IsNull(this.table_Table.TipoColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTipoNull() {
                this[this.table_Table.TipoColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInicioNull() {
                return this.IsNull(this.table_Table.InicioColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInicioNull() {
                this[this.table_Table.InicioColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCargosNull() {
                return this.IsNull(this.table_Table.CargosColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCargosNull() {
                this[this.table_Table.CargosColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbonosNull() {
                return this.IsNull(this.table_Table.AbonosColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbonosNull() {
                this[this.table_Table.AbonosColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPeriodoNull() {
                return this.IsNull(this.table_Table.PeriodoColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPeriodoNull() {
                this[this.table_Table.PeriodoColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalNull() {
                return this.IsNull(this.table_Table.FinalColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalNull() {
                this[this.table_Table.FinalColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGraficaArgumentoNull() {
                return this.IsNull(this.table_Table.GraficaArgumentoColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGraficaArgumentoNull() {
                this[this.table_Table.GraficaArgumentoColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGraficaValorNull() {
                return this.IsNull(this.table_Table.GraficaValorColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGraficaValorNull() {
                this[this.table_Table.GraficaValorColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGraficaNull() {
                return this.IsNull(this.table_Table.GraficaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGraficaNull() {
                this[this.table_Table.GraficaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTituloNull() {
                return this.IsNull(this.table_Table.TituloColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTituloNull() {
                this[this.table_Table.TituloColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReporteNull() {
                return this.IsNull(this.table_Table.ReporteColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReporteNull() {
                this[this.table_Table.ReporteColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDireccion2Null() {
                return this.IsNull(this.table_Table.Direccion2Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDireccion2Null() {
                this[this.table_Table.Direccion2Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDireccion3Null() {
                return this.IsNull(this.table_Table.Direccion3Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDireccion3Null() {
                this[this.table_Table.Direccion3Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDireccion4Null() {
                return this.IsNull(this.table_Table.Direccion4Column);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDireccion4Null() {
                this[this.table_Table.Direccion4Column] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.table_Table.TotalColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.table_Table.TotalColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEtiquetaNull() {
                return this.IsNull(this.table_Table.EtiquetaColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEtiquetaNull() {
                this[this.table_Table.EtiquetaColumn] = global::System.Convert.DBNull;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerGraficaDetalleNull() {
                return this.IsNull(this.table_Table.VerGraficaDetalleColumn);
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerGraficaDetalleNull() {
                this[this.table_Table.VerGraficaDetalleColumn] = global::System.Convert.DBNull;
            }
        }
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _TableRowChangeEvent : global::System.EventArgs {
            private _TableRow eventRow;
            private global::System.Data.DataRowAction eventAction;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRowChangeEvent(_TableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _TableRow Row {
                get {
                    return this.eventRow;
                }
            }
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
